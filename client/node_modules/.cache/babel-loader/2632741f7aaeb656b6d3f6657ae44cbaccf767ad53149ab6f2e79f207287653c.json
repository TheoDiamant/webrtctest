{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useWebRTC.js\nimport { useEffect, useRef, useState } from \"react\";\nexport default function useWebRTC(callId, {\n  timeout = 30000,\n  start = true,\n  isInitiator = false\n}) {\n  _s();\n  const wsRef = useRef();\n  const pcRef = useRef();\n  const dataChannelRef = useRef();\n  const remoteAudioRef = useRef();\n  const localStreamRef = useRef();\n  const [status, setStatus] = useState(\"waiting\");\n  const statusRef = useRef(status);\n  useEffect(() => {\n    statusRef.current = status;\n  }, [status]);\n  const [chatMessages, setChatMessages] = useState([]);\n  const [localSpeaking, setLocalSpeaking] = useState(false);\n  const [remoteSpeaking, setRemoteSpeaking] = useState(false);\n  const [remoteMuted, setRemoteMuted] = useState(false);\n\n  // 1) Signaling WS\n  useEffect(() => {\n    if (!start) return;\n    const serverUrl = process.env.REACT_APP_SERVER_URL;\n    const ws = new WebSocket(`${serverUrl.replace(/^http/, \"ws\")}?roomId=${callId}`);\n    wsRef.current = ws;\n    ws.onopen = () => console.log(\"WS open\");\n    ws.onclose = () => console.log(\"WS closed\");\n    ws.onmessage = async ({\n      data\n    }) => {\n      let msg;\n      try {\n        msg = JSON.parse(data);\n      } catch {\n        return;\n      }\n      switch (msg.type) {\n        case \"room-status\":\n          if (msg.peers === 2 && statusRef.current === \"waiting\") {\n            await initiateCall(isInitiator);\n          }\n          break;\n        case \"offer\":\n          await pcRef.current.setRemoteDescription(msg.offer);\n          {\n            const answer = await pcRef.current.createAnswer();\n            await pcRef.current.setLocalDescription(answer);\n            ws.send(JSON.stringify({\n              type: \"answer\",\n              answer\n            }));\n          }\n          break;\n        case \"answer\":\n          await pcRef.current.setRemoteDescription(msg.answer);\n          break;\n        case \"candidate\":\n          await pcRef.current.addIceCandidate(msg.candidate);\n          break;\n        case \"peer-left\":\n          setStatus(\"peer-left\");\n          break;\n        case \"call-ended\":\n          setStatus(\"ended\");\n          break;\n      }\n    };\n    const timer = setTimeout(() => {\n      if (statusRef.current !== \"connected\") setStatus(\"timeout\");\n    }, timeout);\n    return () => {\n      var _wsRef$current, _pcRef$current;\n      clearTimeout(timer);\n      (_wsRef$current = wsRef.current) === null || _wsRef$current === void 0 ? void 0 : _wsRef$current.close();\n      (_pcRef$current = pcRef.current) === null || _pcRef$current === void 0 ? void 0 : _pcRef$current.close();\n    };\n  }, [callId, start, isInitiator]);\n\n  // 2) PeerConnection + Media\n  async function initiateCall(isOfferer) {\n    setStatus(\"connecting\");\n    const pc = new RTCPeerConnection({\n      iceServers: [{\n        urls: process.env.REACT_APP_STUN_SERVER\n      }]\n    });\n    pcRef.current = pc;\n\n    // get local audio\n    localStreamRef.current = await navigator.mediaDevices.getUserMedia({\n      audio: true\n    });\n    localStreamRef.current.getTracks().forEach(t => pc.addTrack(t, localStreamRef.current));\n\n    // detect local speech\n    const audioCtxL = new (window.AudioContext || window.webkitAudioContext)();\n    const analyserL = audioCtxL.createAnalyser();\n    audioCtxL.createMediaStreamSource(localStreamRef.current).connect(analyserL);\n    analyserL.fftSize = 256;\n    const dataL = new Uint8Array(analyserL.frequencyBinCount);\n    (function detectLocal() {\n      analyserL.getByteFrequencyData(dataL);\n      setLocalSpeaking(dataL.reduce((a, v) => a + v, 0) / dataL.length > 30);\n      requestAnimationFrame(detectLocal);\n    })();\n\n    // handle remote track\n    pc.ontrack = ({\n      streams: [stream]\n    }) => {\n      if (remoteAudioRef.current) {\n        remoteAudioRef.current.srcObject = stream;\n        remoteAudioRef.current.play().catch(() => {}); // relancer la lecture\n      }\n      const rt = stream.getAudioTracks()[0];\n      if (rt) {\n        rt.onmute = () => setRemoteMuted(true);\n        rt.onunmute = () => setRemoteMuted(false);\n      }\n      if (!remoteSpeaking) {\n        const audioCtxR = new (window.AudioContext || window.webkitAudioContext)();\n        const analyserR = audioCtxR.createAnalyser();\n        audioCtxR.createMediaStreamSource(stream).connect(analyserR);\n        analyserR.fftSize = 256;\n        const dataR = new Uint8Array(analyserR.frequencyBinCount);\n        (function detectRemote() {\n          analyserR.getByteFrequencyData(dataR);\n          setRemoteSpeaking(dataR.reduce((a, v) => a + v, 0) / dataR.length > 30);\n          requestAnimationFrame(detectRemote);\n        })();\n      }\n    };\n\n    // data channel\n    if (isOfferer) {\n      dataChannelRef.current = pc.createDataChannel(\"chat\");\n      setupDataChannel();\n    } else {\n      pc.ondatachannel = ({\n        channel\n      }) => {\n        dataChannelRef.current = channel;\n        setupDataChannel();\n      };\n    }\n\n    // ICE\n    pc.onicecandidate = ({\n      candidate\n    }) => {\n      if (candidate) {\n        wsRef.current.send(JSON.stringify({\n          type: \"candidate\",\n          candidate\n        }));\n      }\n    };\n\n    // offer / answer\n    if (isOfferer) {\n      const offer = await pc.createOffer();\n      await pc.setLocalDescription(offer);\n      wsRef.current.send(JSON.stringify({\n        type: \"offer\",\n        offer\n      }));\n    }\n    setStatus(\"connected\");\n  }\n  function setupDataChannel() {\n    const dc = dataChannelRef.current;\n    dc.onopen = () => console.log(\"DataChannel open\");\n    dc.onmessage = ({\n      data\n    }) => {\n      var _p;\n      let p;\n      try {\n        p = JSON.parse(data);\n      } catch {}\n      if (((_p = p) === null || _p === void 0 ? void 0 : _p.type) === \"mute\") {\n        setRemoteMuted(p.muted);\n      } else {\n        setChatMessages(prev => [...prev, {\n          sender: \"peer\",\n          text: data\n        }]);\n      }\n    };\n  }\n\n  // API publique\n  function sendMessage(text) {\n    const dc = dataChannelRef.current;\n    if ((dc === null || dc === void 0 ? void 0 : dc.readyState) === \"open\") {\n      dc.send(text);\n      setChatMessages(p => [...p, {\n        sender: \"local\",\n        text\n      }]);\n    }\n  }\n  function toggleMute() {\n    var _localStreamRef$curre, _dataChannelRef$curre;\n    const t = (_localStreamRef$curre = localStreamRef.current) === null || _localStreamRef$curre === void 0 ? void 0 : _localStreamRef$curre.getAudioTracks()[0];\n    if (!t) return;\n    t.enabled = !t.enabled;\n    const msg = JSON.stringify({\n      type: \"mute\",\n      muted: !t.enabled\n    });\n    if (((_dataChannelRef$curre = dataChannelRef.current) === null || _dataChannelRef$curre === void 0 ? void 0 : _dataChannelRef$curre.readyState) === \"open\") dataChannelRef.current.send(msg);\n  }\n  function hangUp() {\n    var _localStreamRef$curre2;\n    if (isInitiator) wsRef.current.send(JSON.stringify({\n      type: \"end-call\"\n    }));\n    setStatus(\"ended\");\n    (_localStreamRef$curre2 = localStreamRef.current) === null || _localStreamRef$curre2 === void 0 ? void 0 : _localStreamRef$curre2.getTracks().forEach(t => t.stop());\n    if (remoteAudioRef.current) remoteAudioRef.current.srcObject = null;\n    setTimeout(() => {\n      var _wsRef$current2, _pcRef$current2;\n      (_wsRef$current2 = wsRef.current) === null || _wsRef$current2 === void 0 ? void 0 : _wsRef$current2.close();\n      (_pcRef$current2 = pcRef.current) === null || _pcRef$current2 === void 0 ? void 0 : _pcRef$current2.close();\n    }, 100);\n  }\n  return {\n    remoteAudioRef,\n    status,\n    chatMessages,\n    sendMessage,\n    toggleMute,\n    hangUp,\n    localSpeaking,\n    remoteSpeaking,\n    remoteMuted\n  };\n}\n_s(useWebRTC, \"cKP1I0v2cUgvh4EjW4pVYio3St0=\");","map":{"version":3,"names":["useEffect","useRef","useState","useWebRTC","callId","timeout","start","isInitiator","_s","wsRef","pcRef","dataChannelRef","remoteAudioRef","localStreamRef","status","setStatus","statusRef","current","chatMessages","setChatMessages","localSpeaking","setLocalSpeaking","remoteSpeaking","setRemoteSpeaking","remoteMuted","setRemoteMuted","serverUrl","process","env","REACT_APP_SERVER_URL","ws","WebSocket","replace","onopen","console","log","onclose","onmessage","data","msg","JSON","parse","type","peers","initiateCall","setRemoteDescription","offer","answer","createAnswer","setLocalDescription","send","stringify","addIceCandidate","candidate","timer","setTimeout","_wsRef$current","_pcRef$current","clearTimeout","close","isOfferer","pc","RTCPeerConnection","iceServers","urls","REACT_APP_STUN_SERVER","navigator","mediaDevices","getUserMedia","audio","getTracks","forEach","t","addTrack","audioCtxL","window","AudioContext","webkitAudioContext","analyserL","createAnalyser","createMediaStreamSource","connect","fftSize","dataL","Uint8Array","frequencyBinCount","detectLocal","getByteFrequencyData","reduce","a","v","length","requestAnimationFrame","ontrack","streams","stream","srcObject","play","catch","rt","getAudioTracks","onmute","onunmute","audioCtxR","analyserR","dataR","detectRemote","createDataChannel","setupDataChannel","ondatachannel","channel","onicecandidate","createOffer","dc","_p","p","muted","prev","sender","text","sendMessage","readyState","toggleMute","_localStreamRef$curre","_dataChannelRef$curre","enabled","hangUp","_localStreamRef$curre2","stop","_wsRef$current2","_pcRef$current2"],"sources":["/Users/theodiamant/Desktop/webrtc/client/src/hooks/useWebRTC.js"],"sourcesContent":["// src/hooks/useWebRTC.js\nimport { useEffect, useRef, useState } from \"react\";\n\nexport default function useWebRTC(\n  callId,\n  { timeout = 30000, start = true, isInitiator = false }\n) {\n  const wsRef = useRef();\n  const pcRef = useRef();\n  const dataChannelRef = useRef();\n  const remoteAudioRef = useRef();\n  const localStreamRef = useRef();\n\n  const [status, setStatus] = useState(\"waiting\");\n  const statusRef = useRef(status);\n  useEffect(() => {\n    statusRef.current = status;\n  }, [status]);\n\n  const [chatMessages, setChatMessages] = useState([]);\n  const [localSpeaking, setLocalSpeaking] = useState(false);\n  const [remoteSpeaking, setRemoteSpeaking] = useState(false);\n  const [remoteMuted, setRemoteMuted] = useState(false);\n\n  // 1) Signaling WS\n  useEffect(() => {\n    if (!start) return;\n    const serverUrl = process.env.REACT_APP_SERVER_URL;\n    const ws = new WebSocket(`${serverUrl.replace(/^http/, \"ws\")}?roomId=${callId}`);\n    wsRef.current = ws;\n\n    ws.onopen = () => console.log(\"WS open\");\n    ws.onclose = () => console.log(\"WS closed\");\n\n    ws.onmessage = async ({ data }) => {\n      let msg;\n      try {\n        msg = JSON.parse(data);\n      } catch {\n        return;\n      }\n\n      switch (msg.type) {\n        case \"room-status\":\n          if (msg.peers === 2 && statusRef.current === \"waiting\") {\n            await initiateCall(isInitiator);\n          }\n          break;\n        case \"offer\":\n          await pcRef.current.setRemoteDescription(msg.offer);\n          {\n            const answer = await pcRef.current.createAnswer();\n            await pcRef.current.setLocalDescription(answer);\n            ws.send(JSON.stringify({ type: \"answer\", answer }));\n          }\n          break;\n        case \"answer\":\n          await pcRef.current.setRemoteDescription(msg.answer);\n          break;\n        case \"candidate\":\n          await pcRef.current.addIceCandidate(msg.candidate);\n          break;\n        case \"peer-left\":\n          setStatus(\"peer-left\");\n          break;\n        case \"call-ended\":\n          setStatus(\"ended\");\n          break;\n      }\n    };\n\n    const timer = setTimeout(() => {\n      if (statusRef.current !== \"connected\") setStatus(\"timeout\");\n    }, timeout);\n\n    return () => {\n      clearTimeout(timer);\n      wsRef.current?.close();\n      pcRef.current?.close();\n    };\n  }, [callId, start, isInitiator]);\n\n  // 2) PeerConnection + Media\n  async function initiateCall(isOfferer) {\n    setStatus(\"connecting\");\n    const pc = new RTCPeerConnection({\n      iceServers: [{ urls: process.env.REACT_APP_STUN_SERVER }],\n    });\n    pcRef.current = pc;\n\n    // get local audio\n    localStreamRef.current = await navigator.mediaDevices.getUserMedia({ audio: true });\n    localStreamRef.current.getTracks().forEach((t) => pc.addTrack(t, localStreamRef.current));\n\n    // detect local speech\n    const audioCtxL = new (window.AudioContext || window.webkitAudioContext)();\n    const analyserL = audioCtxL.createAnalyser();\n    audioCtxL.createMediaStreamSource(localStreamRef.current).connect(analyserL);\n    analyserL.fftSize = 256;\n    const dataL = new Uint8Array(analyserL.frequencyBinCount);\n    (function detectLocal() {\n      analyserL.getByteFrequencyData(dataL);\n      setLocalSpeaking(dataL.reduce((a, v) => a + v, 0) / dataL.length > 30);\n      requestAnimationFrame(detectLocal);\n    })();\n\n    // handle remote track\n    pc.ontrack = ({ streams: [stream] }) => {\n      if (remoteAudioRef.current) {\n        remoteAudioRef.current.srcObject = stream;\n        remoteAudioRef.current.play().catch(() => {});  // relancer la lecture\n      }\n\n      const rt = stream.getAudioTracks()[0];\n      if (rt) {\n        rt.onmute = () => setRemoteMuted(true);\n        rt.onunmute = () => setRemoteMuted(false);\n      }\n\n      if (!remoteSpeaking) {\n        const audioCtxR = new (window.AudioContext || window.webkitAudioContext)();\n        const analyserR = audioCtxR.createAnalyser();\n        audioCtxR.createMediaStreamSource(stream).connect(analyserR);\n        analyserR.fftSize = 256;\n        const dataR = new Uint8Array(analyserR.frequencyBinCount);\n        (function detectRemote() {\n          analyserR.getByteFrequencyData(dataR);\n          setRemoteSpeaking(dataR.reduce((a, v) => a + v, 0) / dataR.length > 30);\n          requestAnimationFrame(detectRemote);\n        })();\n      }\n    };\n\n    // data channel\n    if (isOfferer) {\n      dataChannelRef.current = pc.createDataChannel(\"chat\");\n      setupDataChannel();\n    } else {\n      pc.ondatachannel = ({ channel }) => {\n        dataChannelRef.current = channel;\n        setupDataChannel();\n      };\n    }\n\n    // ICE\n    pc.onicecandidate = ({ candidate }) => {\n      if (candidate) {\n        wsRef.current.send(JSON.stringify({ type: \"candidate\", candidate }));\n      }\n    };\n\n    // offer / answer\n    if (isOfferer) {\n      const offer = await pc.createOffer();\n      await pc.setLocalDescription(offer);\n      wsRef.current.send(JSON.stringify({ type: \"offer\", offer }));\n    }\n\n    setStatus(\"connected\");\n  }\n\n  function setupDataChannel() {\n    const dc = dataChannelRef.current;\n    dc.onopen = () => console.log(\"DataChannel open\");\n    dc.onmessage = ({ data }) => {\n      let p;\n      try { p = JSON.parse(data); } catch {}\n      if (p?.type === \"mute\") {\n        setRemoteMuted(p.muted);\n      } else {\n        setChatMessages((prev) => [...prev, { sender: \"peer\", text: data }]);\n      }\n    };\n  }\n\n  // API publique\n  function sendMessage(text) {\n    const dc = dataChannelRef.current;\n    if (dc?.readyState === \"open\") {\n      dc.send(text);\n      setChatMessages((p) => [...p, { sender: \"local\", text }]);\n    }\n  }\n  function toggleMute() {\n    const t = localStreamRef.current?.getAudioTracks()[0];\n    if (!t) return;\n    t.enabled = !t.enabled;\n    const msg = JSON.stringify({ type: \"mute\", muted: !t.enabled });\n    if (dataChannelRef.current?.readyState === \"open\") dataChannelRef.current.send(msg);\n  }\n  function hangUp() {\n    if (isInitiator) wsRef.current.send(JSON.stringify({ type: \"end-call\" }));\n    setStatus(\"ended\");\n    localStreamRef.current?.getTracks().forEach((t) => t.stop());\n    if (remoteAudioRef.current) remoteAudioRef.current.srcObject = null;\n    setTimeout(() => {\n      wsRef.current?.close();\n      pcRef.current?.close();\n    }, 100);\n  }\n\n  return {\n    remoteAudioRef,\n    status,\n    chatMessages,\n    sendMessage,\n    toggleMute,\n    hangUp,\n    localSpeaking,\n    remoteSpeaking,\n    remoteMuted,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useWebRTC.js\nimport { useEffect, useRef, useState } from \"react\";\nexport default function useWebRTC(callId, {\n  timeout = 30000,\n  start = true,\n  isInitiator = false\n}) {\n  _s();\n  const [status, setStatus] = useState(\"waiting\");\n  const statusRef = useRef(status);\n  useEffect(() => {\n    statusRef.current = status;\n  }, [status]);\n  const wsRef = useRef();\n  const pcRef = useRef();\n  const dataChannelRef = useRef();\n  const remoteAudioRef = useRef();\n  const localStreamRef = useRef();\n  // nouvelle référence pour stocker les pistes distantes\n  const remoteStreamRef = useRef(new MediaStream());\n  const [chatMessages, setChatMessages] = useState([]);\n  const [localSpeaking, setLocalSpeaking] = useState(false);\n  const [remoteSpeaking, setRemoteSpeaking] = useState(false);\n  const [remoteMuted, setRemoteMuted] = useState(false);\n  const [isChannelOpen, setIsChannelOpen] = useState(false);\n\n  // 1) Signaling via WebSocket\n  useEffect(() => {\n    if (!start) return;\n    const serverUrl = process.env.REACT_APP_SERVER_URL;\n    wsRef.current = new WebSocket(`${serverUrl.replace(/^http/, \"ws\")}?roomId=${callId}`);\n    wsRef.current.onopen = () => console.log(\"%cWS open\", \"color:green;font-weight:bold;\", new Date());\n    wsRef.current.onclose = () => console.log(\"%cWS closed\", \"color:gray;font-weight:bold;\", new Date());\n    wsRef.current.onmessage = async ({\n      data\n    }) => {\n      let text = data instanceof Blob ? await data.text() : data;\n      console.log(\"%cWS ←\", \"color:purple;\", text);\n      let msg;\n      try {\n        msg = JSON.parse(text);\n      } catch {\n        console.warn(\"WS: message non JSON reçu\", text);\n        return;\n      }\n      console.log(\"%cSignal→\", \"color:blue;\", msg.type, msg);\n      switch (msg.type) {\n        case \"room-status\":\n          console.log(\"room-status:\", msg.peers);\n          if (msg.peers === 2) {\n            var _pcRef$current;\n            console.log(\"Deux peers, (re)création du PeerConnection\");\n            (_pcRef$current = pcRef.current) === null || _pcRef$current === void 0 ? void 0 : _pcRef$current.close();\n            await initiateCall(isInitiator);\n          } else {\n            var _pcRef$current2;\n            console.log(\"Peer left → nettoyage\");\n            setStatus(\"peer-left\");\n            (_pcRef$current2 = pcRef.current) === null || _pcRef$current2 === void 0 ? void 0 : _pcRef$current2.close();\n            remoteStreamRef.current = new MediaStream();\n            if (remoteAudioRef.current) remoteAudioRef.current.srcObject = null;\n            setIsChannelOpen(false);\n          }\n          break;\n        case \"offer\":\n          console.log(\"received OFFER\", msg.offer);\n          await pcRef.current.setRemoteDescription(msg.offer);\n          pcRef.current.getTransceivers().forEach(t => {\n            var _t$receiver$track;\n            if (((_t$receiver$track = t.receiver.track) === null || _t$receiver$track === void 0 ? void 0 : _t$receiver$track.kind) === \"audio\") t.direction = \"sendrecv\";\n          });\n          {\n            const answer = await pcRef.current.createAnswer();\n            await pcRef.current.setLocalDescription(answer);\n            wsRef.current.send(JSON.stringify({\n              type: \"answer\",\n              answer\n            }));\n          }\n          break;\n        case \"answer\":\n          console.log(\"received ANSWER\", msg.answer);\n          await pcRef.current.setRemoteDescription(msg.answer);\n          break;\n        case \"candidate\":\n          console.log(\"received CANDIDATE\", msg.candidate);\n          await pcRef.current.addIceCandidate(msg.candidate);\n          break;\n        case \"peer-left\":\n          console.log(\"peer-left\");\n          setStatus(\"peer-left\");\n          break;\n        case \"call-ended\":\n          console.log(\"call-ended\");\n          setStatus(\"ended\");\n          break;\n        default:\n          break;\n      }\n    };\n    return () => {\n      var _wsRef$current, _pcRef$current3;\n      (_wsRef$current = wsRef.current) === null || _wsRef$current === void 0 ? void 0 : _wsRef$current.close();\n      (_pcRef$current3 = pcRef.current) === null || _pcRef$current3 === void 0 ? void 0 : _pcRef$current3.close();\n    };\n  }, [callId, start, isInitiator]);\n\n  // 2) WebRTC peer connection & media\n  async function initiateCall(isInitiator) {\n    console.log(\"%c⏱ initiateCall()\", \"color:orange;\", {\n      isInitiator\n    });\n    setStatus(\"connecting\");\n    pcRef.current = new RTCPeerConnection({\n      iceServers: [{\n        urls: process.env.REACT_APP_STUN_SERVER\n      }]\n    });\n    pcRef.current.onconnectionstatechange = () => console.log(\"PC connectionState:\", pcRef.current.connectionState);\n    pcRef.current.oniceconnectionstatechange = () => console.log(\"PC iceConnectionState:\", pcRef.current.iceConnectionState);\n\n    // 2.1) récupérer l’audio local\n    localStreamRef.current = await navigator.mediaDevices.getUserMedia({\n      audio: true\n    });\n    console.log(\"got localStream:\", localStreamRef.current);\n\n    // 2.2) détection de voix locale (animation)\n    {\n      const audioCtxL = new (window.AudioContext || window.webkitAudioContext)();\n      const analyserL = audioCtxL.createAnalyser();\n      const srcL = audioCtxL.createMediaStreamSource(localStreamRef.current);\n      srcL.connect(analyserL);\n      analyserL.fftSize = 256;\n      const dataL = new Uint8Array(analyserL.frequencyBinCount);\n      (function detectLocal() {\n        analyserL.getByteFrequencyData(dataL);\n        setLocalSpeaking(dataL.reduce((sum, v) => sum + v, 0) / dataL.length > 30);\n        requestAnimationFrame(detectLocal);\n      })();\n    }\n\n    // 2.3) ajout des pistes au PeerConnection\n    localStreamRef.current.getTracks().forEach(t => {\n      console.log(\"addTrack:\", t.kind);\n      pcRef.current.addTrack(t, localStreamRef.current);\n    });\n\n    // 2.4) réception et affichage de l’audio distant\n    pcRef.current.ontrack = event => {\n      console.log(\"%cPC ontrack →\", \"color:teal;\", event.track);\n      // 1) ajouter la piste reçue à remoteStreamRef\n      remoteStreamRef.current.addTrack(event.track);\n      // 2) mettre à jour l’élément <audio>\n      if (remoteAudioRef.current) {\n        remoteAudioRef.current.srcObject = remoteStreamRef.current;\n      }\n      // mute / unmute\n      event.track.onmute = () => setRemoteMuted(true);\n      event.track.onunmute = () => setRemoteMuted(false);\n\n      // animation de la voix distante\n      if (!remoteSpeaking) {\n        const audioCtxR = new (window.AudioContext || window.webkitAudioContext)();\n        const analyserR = audioCtxR.createAnalyser();\n        const srcR = audioCtxR.createMediaStreamSource(remoteStreamRef.current);\n        srcR.connect(analyserR);\n        analyserR.fftSize = 256;\n        const dataR = new Uint8Array(analyserR.frequencyBinCount);\n        (function detectRemote() {\n          analyserR.getByteFrequencyData(dataR);\n          setRemoteSpeaking(dataR.reduce((sum, v) => sum + v, 0) / dataR.length > 30);\n          requestAnimationFrame(detectRemote);\n        })();\n      }\n    };\n\n    // 3) DataChannel pour le chat\n    if (isInitiator) {\n      console.log(\"creating DataChannel as initiator\");\n      dataChannelRef.current = pcRef.current.createDataChannel(\"chat\");\n      setupDataChannel();\n    } else {\n      pcRef.current.ondatachannel = ({\n        channel\n      }) => {\n        console.log(\"ondatachannel → received channel\", channel);\n        dataChannelRef.current = channel;\n        setupDataChannel();\n      };\n    }\n\n    // 4) échange ICE\n    pcRef.current.onicecandidate = ({\n      candidate\n    }) => {\n      console.log(\"onicecandidate → send\", candidate);\n      if (candidate) {\n        wsRef.current.send(JSON.stringify({\n          type: \"candidate\",\n          candidate\n        }));\n      }\n    };\n\n    // 5) negotiation offer/answer\n    if (isInitiator) {\n      const offer = await pcRef.current.createOffer();\n      console.log(\"created OFFER\", offer);\n      await pcRef.current.setLocalDescription(offer);\n      wsRef.current.send(JSON.stringify({\n        type: \"offer\",\n        offer\n      }));\n    }\n    setStatus(\"connected\");\n    console.log(\"status → connected\");\n  }\n\n  // data channel setup\n  function setupDataChannel() {\n    dataChannelRef.current.onopen = () => {\n      console.log(\"%cDataChannel open\", \"color:green;\");\n      setIsChannelOpen(true);\n    };\n    dataChannelRef.current.onclose = () => {\n      console.log(\"%cDataChannel closed\", \"color:red;\");\n      setIsChannelOpen(false);\n    };\n    dataChannelRef.current.onmessage = ({\n      data\n    }) => {\n      console.log(\"%cDataChannel ← peer:\", \"color:purple;\", data);\n      setChatMessages(prev => [...prev, {\n        sender: \"peer\",\n        text: data\n      }]);\n    };\n  }\n\n  // envoi chat\n  function sendMessage(text) {\n    var _dataChannelRef$curre;\n    console.log(\"sendMessage() →\", text);\n    setChatMessages(prev => [...prev, {\n      sender: \"local\",\n      text\n    }]);\n    if (((_dataChannelRef$curre = dataChannelRef.current) === null || _dataChannelRef$curre === void 0 ? void 0 : _dataChannelRef$curre.readyState) === \"open\") {\n      dataChannelRef.current.send(text);\n    } else {\n      console.warn(\"DataChannel pas open, message pas envoyé au pair :\", text);\n    }\n  }\n  function toggleMute() {\n    var _localStreamRef$curre;\n    const t = (_localStreamRef$curre = localStreamRef.current) === null || _localStreamRef$curre === void 0 ? void 0 : _localStreamRef$curre.getAudioTracks()[0];\n    if (t) t.enabled = !t.enabled;\n  }\n  function hangUp() {\n    var _localStreamRef$curre2;\n    if (isInitiator) {\n      wsRef.current.send(JSON.stringify({\n        type: \"end-call\"\n      }));\n    }\n    console.log(\"hangUp()\");\n    setStatus(\"ended\");\n    (_localStreamRef$curre2 = localStreamRef.current) === null || _localStreamRef$curre2 === void 0 ? void 0 : _localStreamRef$curre2.getTracks().forEach(t => t.stop());\n    remoteStreamRef.current = new MediaStream();\n    if (remoteAudioRef.current) remoteAudioRef.current.srcObject = null;\n    setTimeout(() => {\n      var _wsRef$current2, _pcRef$current4;\n      (_wsRef$current2 = wsRef.current) === null || _wsRef$current2 === void 0 ? void 0 : _wsRef$current2.close();\n      (_pcRef$current4 = pcRef.current) === null || _pcRef$current4 === void 0 ? void 0 : _pcRef$current4.close();\n    }, 100);\n  }\n  return {\n    remoteAudioRef,\n    status,\n    chatMessages,\n    sendMessage,\n    toggleMute,\n    hangUp,\n    localSpeaking,\n    remoteSpeaking,\n    remoteMuted,\n    isChannelOpen\n  };\n}\n_s(useWebRTC, \"DefbjgZVFSGlAyZOvpvZ7tiizIs=\");","map":{"version":3,"names":["useEffect","useRef","useState","useWebRTC","callId","timeout","start","isInitiator","_s","status","setStatus","statusRef","current","wsRef","pcRef","dataChannelRef","remoteAudioRef","localStreamRef","remoteStreamRef","MediaStream","chatMessages","setChatMessages","localSpeaking","setLocalSpeaking","remoteSpeaking","setRemoteSpeaking","remoteMuted","setRemoteMuted","isChannelOpen","setIsChannelOpen","serverUrl","process","env","REACT_APP_SERVER_URL","WebSocket","replace","onopen","console","log","Date","onclose","onmessage","data","text","Blob","msg","JSON","parse","warn","type","peers","_pcRef$current","close","initiateCall","_pcRef$current2","srcObject","offer","setRemoteDescription","getTransceivers","forEach","t","_t$receiver$track","receiver","track","kind","direction","answer","createAnswer","setLocalDescription","send","stringify","candidate","addIceCandidate","_wsRef$current","_pcRef$current3","RTCPeerConnection","iceServers","urls","REACT_APP_STUN_SERVER","onconnectionstatechange","connectionState","oniceconnectionstatechange","iceConnectionState","navigator","mediaDevices","getUserMedia","audio","audioCtxL","window","AudioContext","webkitAudioContext","analyserL","createAnalyser","srcL","createMediaStreamSource","connect","fftSize","dataL","Uint8Array","frequencyBinCount","detectLocal","getByteFrequencyData","reduce","sum","v","length","requestAnimationFrame","getTracks","addTrack","ontrack","event","onmute","onunmute","audioCtxR","analyserR","srcR","dataR","detectRemote","createDataChannel","setupDataChannel","ondatachannel","channel","onicecandidate","createOffer","prev","sender","sendMessage","_dataChannelRef$curre","readyState","toggleMute","_localStreamRef$curre","getAudioTracks","enabled","hangUp","_localStreamRef$curre2","stop","setTimeout","_wsRef$current2","_pcRef$current4"],"sources":["/Users/theodiamant/Desktop/webrtc/client/src/hooks/useWebRTC.js"],"sourcesContent":["// src/hooks/useWebRTC.js\nimport { useEffect, useRef, useState } from \"react\";\n\nexport default function useWebRTC(\n  callId,\n  { timeout = 30000, start = true, isInitiator = false }\n) {\n  const [status, setStatus] = useState(\"waiting\");\n  const statusRef = useRef(status);\n  useEffect(() => {\n    statusRef.current = status;\n  }, [status]);\n\n  const wsRef = useRef();\n  const pcRef = useRef();\n  const dataChannelRef = useRef();\n  const remoteAudioRef = useRef();\n  const localStreamRef = useRef();\n  // nouvelle référence pour stocker les pistes distantes\n  const remoteStreamRef = useRef(new MediaStream());\n\n  const [chatMessages, setChatMessages] = useState([]);\n  const [localSpeaking, setLocalSpeaking] = useState(false);\n  const [remoteSpeaking, setRemoteSpeaking] = useState(false);\n  const [remoteMuted, setRemoteMuted] = useState(false);\n  const [isChannelOpen, setIsChannelOpen] = useState(false);\n\n  // 1) Signaling via WebSocket\n  useEffect(() => {\n    if (!start) return;\n\n    const serverUrl = process.env.REACT_APP_SERVER_URL;\n    wsRef.current = new WebSocket(\n      `${serverUrl.replace(/^http/, \"ws\")}?roomId=${callId}`\n    );\n    wsRef.current.onopen = () =>\n      console.log(\"%cWS open\", \"color:green;font-weight:bold;\", new Date());\n    wsRef.current.onclose = () =>\n      console.log(\"%cWS closed\", \"color:gray;font-weight:bold;\", new Date());\n\n    wsRef.current.onmessage = async ({ data }) => {\n      let text = data instanceof Blob ? await data.text() : data;\n      console.log(\"%cWS ←\", \"color:purple;\", text);\n\n      let msg;\n      try {\n        msg = JSON.parse(text);\n      } catch {\n        console.warn(\"WS: message non JSON reçu\", text);\n        return;\n      }\n      console.log(\"%cSignal→\", \"color:blue;\", msg.type, msg);\n\n      switch (msg.type) {\n        case \"room-status\":\n          console.log(\"room-status:\", msg.peers);\n          if (msg.peers === 2) {\n            console.log(\"Deux peers, (re)création du PeerConnection\");\n            pcRef.current?.close();\n            await initiateCall(isInitiator);\n          } else {\n            console.log(\"Peer left → nettoyage\");\n            setStatus(\"peer-left\");\n            pcRef.current?.close();\n            remoteStreamRef.current = new MediaStream();\n            if (remoteAudioRef.current) remoteAudioRef.current.srcObject = null;\n            setIsChannelOpen(false);\n          }\n          break;\n\n        case \"offer\":\n          console.log(\"received OFFER\", msg.offer);\n          await pcRef.current.setRemoteDescription(msg.offer);\n          pcRef.current.getTransceivers().forEach((t) => {\n            if (t.receiver.track?.kind === \"audio\") t.direction = \"sendrecv\";\n          });\n          {\n            const answer = await pcRef.current.createAnswer();\n            await pcRef.current.setLocalDescription(answer);\n            wsRef.current.send(JSON.stringify({ type: \"answer\", answer }));\n          }\n          break;\n\n        case \"answer\":\n          console.log(\"received ANSWER\", msg.answer);\n          await pcRef.current.setRemoteDescription(msg.answer);\n          break;\n\n        case \"candidate\":\n          console.log(\"received CANDIDATE\", msg.candidate);\n          await pcRef.current.addIceCandidate(msg.candidate);\n          break;\n\n        case \"peer-left\":\n          console.log(\"peer-left\");\n          setStatus(\"peer-left\");\n          break;\n\n        case \"call-ended\":\n          console.log(\"call-ended\");\n          setStatus(\"ended\");\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    return () => {\n      wsRef.current?.close();\n      pcRef.current?.close();\n    };\n  }, [callId, start, isInitiator]);\n\n  // 2) WebRTC peer connection & media\n  async function initiateCall(isInitiator) {\n    console.log(\"%c⏱ initiateCall()\", \"color:orange;\", { isInitiator });\n    setStatus(\"connecting\");\n\n    pcRef.current = new RTCPeerConnection({\n      iceServers: [{ urls: process.env.REACT_APP_STUN_SERVER }],\n    });\n    pcRef.current.onconnectionstatechange = () =>\n      console.log(\"PC connectionState:\", pcRef.current.connectionState);\n    pcRef.current.oniceconnectionstatechange = () =>\n      console.log(\"PC iceConnectionState:\", pcRef.current.iceConnectionState);\n\n    // 2.1) récupérer l’audio local\n    localStreamRef.current = await navigator.mediaDevices.getUserMedia({\n      audio: true,\n    });\n    console.log(\"got localStream:\", localStreamRef.current);\n\n    // 2.2) détection de voix locale (animation)\n    {\n      const audioCtxL =\n        new (window.AudioContext || window.webkitAudioContext)();\n      const analyserL = audioCtxL.createAnalyser();\n      const srcL = audioCtxL.createMediaStreamSource(\n        localStreamRef.current\n      );\n      srcL.connect(analyserL);\n      analyserL.fftSize = 256;\n      const dataL = new Uint8Array(analyserL.frequencyBinCount);\n      (function detectLocal() {\n        analyserL.getByteFrequencyData(dataL);\n        setLocalSpeaking(\n          dataL.reduce((sum, v) => sum + v, 0) / dataL.length > 30\n        );\n        requestAnimationFrame(detectLocal);\n      })();\n    }\n\n    // 2.3) ajout des pistes au PeerConnection\n    localStreamRef.current.getTracks().forEach((t) => {\n      console.log(\"addTrack:\", t.kind);\n      pcRef.current.addTrack(t, localStreamRef.current);\n    });\n\n    // 2.4) réception et affichage de l’audio distant\n    pcRef.current.ontrack = (event) => {\n      console.log(\"%cPC ontrack →\", \"color:teal;\", event.track);\n      // 1) ajouter la piste reçue à remoteStreamRef\n      remoteStreamRef.current.addTrack(event.track);\n      // 2) mettre à jour l’élément <audio>\n      if (remoteAudioRef.current) {\n        remoteAudioRef.current.srcObject = remoteStreamRef.current;\n      }\n      // mute / unmute\n      event.track.onmute = () => setRemoteMuted(true);\n      event.track.onunmute = () => setRemoteMuted(false);\n\n      // animation de la voix distante\n      if (!remoteSpeaking) {\n        const audioCtxR =\n          new (window.AudioContext || window.webkitAudioContext)();\n        const analyserR = audioCtxR.createAnalyser();\n        const srcR = audioCtxR.createMediaStreamSource(\n          remoteStreamRef.current\n        );\n        srcR.connect(analyserR);\n        analyserR.fftSize = 256;\n        const dataR = new Uint8Array(analyserR.frequencyBinCount);\n        (function detectRemote() {\n          analyserR.getByteFrequencyData(dataR);\n          setRemoteSpeaking(\n            dataR.reduce((sum, v) => sum + v, 0) / dataR.length > 30\n          );\n          requestAnimationFrame(detectRemote);\n        })();\n      }\n    };\n\n    // 3) DataChannel pour le chat\n    if (isInitiator) {\n      console.log(\"creating DataChannel as initiator\");\n      dataChannelRef.current = pcRef.current.createDataChannel(\"chat\");\n      setupDataChannel();\n    } else {\n      pcRef.current.ondatachannel = ({ channel }) => {\n        console.log(\"ondatachannel → received channel\", channel);\n        dataChannelRef.current = channel;\n        setupDataChannel();\n      };\n    }\n\n    // 4) échange ICE\n    pcRef.current.onicecandidate = ({ candidate }) => {\n      console.log(\"onicecandidate → send\", candidate);\n      if (candidate) {\n        wsRef.current.send(\n          JSON.stringify({ type: \"candidate\", candidate })\n        );\n      }\n    };\n\n    // 5) negotiation offer/answer\n    if (isInitiator) {\n      const offer = await pcRef.current.createOffer();\n      console.log(\"created OFFER\", offer);\n      await pcRef.current.setLocalDescription(offer);\n      wsRef.current.send(JSON.stringify({ type: \"offer\", offer }));\n    }\n\n    setStatus(\"connected\");\n    console.log(\"status → connected\");\n  }\n\n  // data channel setup\n  function setupDataChannel() {\n    dataChannelRef.current.onopen = () => {\n      console.log(\"%cDataChannel open\", \"color:green;\");\n      setIsChannelOpen(true);\n    };\n    dataChannelRef.current.onclose = () => {\n      console.log(\"%cDataChannel closed\", \"color:red;\");\n      setIsChannelOpen(false);\n    };\n    dataChannelRef.current.onmessage = ({ data }) => {\n      console.log(\"%cDataChannel ← peer:\", \"color:purple;\", data);\n      setChatMessages((prev) => [...prev, { sender: \"peer\", text: data }]);\n    };\n  }\n\n  // envoi chat\n  function sendMessage(text) {\n    console.log(\"sendMessage() →\", text);\n    setChatMessages((prev) => [...prev, { sender: \"local\", text }]);\n    if (dataChannelRef.current?.readyState === \"open\") {\n      dataChannelRef.current.send(text);\n    } else {\n      console.warn(\n        \"DataChannel pas open, message pas envoyé au pair :\",\n        text\n      );\n    }\n  }\n\n  function toggleMute() {\n    const t = localStreamRef.current?.getAudioTracks()[0];\n    if (t) t.enabled = !t.enabled;\n  }\n\n  function hangUp() {\n    if (isInitiator) {\n      wsRef.current.send(JSON.stringify({ type: \"end-call\" }));\n    }\n    console.log(\"hangUp()\");\n    setStatus(\"ended\");\n    localStreamRef.current?.getTracks().forEach((t) => t.stop());\n    remoteStreamRef.current = new MediaStream();\n    if (remoteAudioRef.current) remoteAudioRef.current.srcObject = null;\n    setTimeout(() => {\n      wsRef.current?.close();\n      pcRef.current?.close();\n    }, 100);\n  }\n\n  return {\n    remoteAudioRef,\n    status,\n    chatMessages,\n    sendMessage,\n    toggleMute,\n    hangUp,\n    localSpeaking,\n    remoteSpeaking,\n    remoteMuted,\n    isChannelOpen,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
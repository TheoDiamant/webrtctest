{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useRef, useState } from \"react\";\nexport default function useWebRTC(callId, {\n  timeout = 30000,\n  start = true,\n  isInitiator = false\n}) {\n  _s();\n  const [status, setStatus] = useState(\"waiting\");\n  const statusRef = useRef(status);\n  useEffect(() => {\n    statusRef.current = status;\n  }, [status]);\n  const wsRef = useRef();\n  const pcRef = useRef();\n  const dataChannelRef = useRef();\n  const remoteAudioRef = useRef();\n  const localStreamRef = useRef();\n  const [chatMessages, setChatMessages] = useState([]);\n  const [localSpeaking, setLocalSpeaking] = useState(false);\n  const [remoteSpeaking, setRemoteSpeaking] = useState(false);\n  const [remoteMuted, setRemoteMuted] = useState(false);\n  useEffect(() => {\n    if (!start) return;\n    const serverUrl = process.env.REACT_APP_SERVER_URL;\n    wsRef.current = new WebSocket(`${serverUrl.replace(/^http/, \"ws\")}?roomId=${callId}`);\n    wsRef.current.onopen = () => console.log(\"WS open, readyState =\", wsRef.current.readyState);\n    wsRef.current.onclose = () => console.log(\"WS closed\");\n    wsRef.current.onmessage = async ({\n      data\n    }) => {\n      let msg;\n      try {\n        msg = JSON.parse(data);\n      } catch {\n        return;\n      }\n      switch (msg.type) {\n        case \"room-status\":\n          if (msg.peers === 2 && statusRef.current === \"waiting\") {\n            await initiateCall(isInitiator);\n          }\n          break;\n        case \"offer\":\n          console.log(\"‚Üê offer re√ßu\");\n          await pcRef.current.setRemoteDescription(msg.offer);\n          {\n            const answer = await pcRef.current.createAnswer();\n            await pcRef.current.setLocalDescription(answer);\n            wsRef.current.send(JSON.stringify({\n              type: \"answer\",\n              answer\n            }));\n          }\n          break;\n        case \"answer\":\n          console.log(\"‚Üê answer re√ßue\");\n          await pcRef.current.setRemoteDescription(msg.answer);\n          break;\n        case \"candidate\":\n          console.log(\"‚Üê candidate re√ßue\");\n          await pcRef.current.addIceCandidate(msg.candidate);\n          break;\n        case \"peer-left\":\n          setStatus(\"peer-left\");\n          break;\n        case \"call-ended\":\n          setStatus(\"ended\");\n          break;\n      }\n    };\n    const timer = setTimeout(() => {\n      if (statusRef.current !== \"connected\") setStatus(\"timeout\");\n    }, timeout);\n    return () => {\n      var _wsRef$current, _pcRef$current;\n      clearTimeout(timer);\n      (_wsRef$current = wsRef.current) === null || _wsRef$current === void 0 ? void 0 : _wsRef$current.close();\n      (_pcRef$current = pcRef.current) === null || _pcRef$current === void 0 ? void 0 : _pcRef$current.close();\n    };\n  }, [callId, start, isInitiator, timeout]);\n  async function initiateCall(isInitiator) {\n    console.log(\"initiateCall, initiator =\", isInitiator);\n    setStatus(\"connecting\");\n    pcRef.current = new RTCPeerConnection({\n      iceServers: [{\n        urls: process.env.REACT_APP_STUN_SERVER\n      }]\n    });\n    localStreamRef.current = await navigator.mediaDevices.getUserMedia({\n      audio: true\n    });\n    // ‚Ä¶ (speech detection identique)\n    localStreamRef.current.getTracks().forEach(t => pcRef.current.addTrack(t, localStreamRef.current));\n    pcRef.current.ontrack = ({\n      streams: [stream]\n    }) => {\n      remoteAudioRef.current.srcObject = stream;\n      // ‚Ä¶ (d√©tection remoteSpeaking / remoteMuted)\n    };\n\n    // DataChannel\n    if (isInitiator) {\n      dataChannelRef.current = pcRef.current.createDataChannel(\"chat\");\n      setupDataChannel();\n    } else {\n      pcRef.current.ondatachannel = ({\n        channel\n      }) => {\n        dataChannelRef.current = channel;\n        setupDataChannel();\n      };\n    }\n    pcRef.current.onicecandidate = ({\n      candidate\n    }) => {\n      if (candidate) {\n        console.log(\"‚Üí envoi candidate\");\n        wsRef.current.send(JSON.stringify({\n          type: \"candidate\",\n          candidate\n        }));\n      }\n    };\n    if (isInitiator) {\n      const offer = await pcRef.current.createOffer();\n      await pcRef.current.setLocalDescription(offer);\n      console.log(\"‚Üí envoi offer\");\n      wsRef.current.send(JSON.stringify({\n        type: \"offer\",\n        offer\n      }));\n    }\n    setStatus(\"connected\");\n  }\n  function setupDataChannel() {\n    dataChannelRef.current.onopen = () => console.log(\"üî• DataChannel open\");\n    dataChannelRef.current.onmessage = ({\n      data\n    }) => {\n      console.log(\"‚Äπ‚Äπ DC message re√ßu ‚Ä∫‚Ä∫\", data);\n      setChatMessages(prev => [...prev, {\n        sender: \"peer\",\n        text: data\n      }]);\n    };\n  }\n  function sendMessage(text) {\n    var _dataChannelRef$curre, _dataChannelRef$curre2;\n    console.log(\"‚Üí sendMessage, DC state=\", (_dataChannelRef$curre = dataChannelRef.current) === null || _dataChannelRef$curre === void 0 ? void 0 : _dataChannelRef$curre.readyState, \"text=\", text);\n    if (((_dataChannelRef$curre2 = dataChannelRef.current) === null || _dataChannelRef$curre2 === void 0 ? void 0 : _dataChannelRef$curre2.readyState) === \"open\") {\n      dataChannelRef.current.send(text);\n      setChatMessages(prev => [...prev, {\n        sender: \"local\",\n        text\n      }]);\n    }\n  }\n  function toggleMute() {\n    var _localStreamRef$curre;\n    const t = (_localStreamRef$curre = localStreamRef.current) === null || _localStreamRef$curre === void 0 ? void 0 : _localStreamRef$curre.getAudioTracks()[0];\n    if (t) t.enabled = !t.enabled;\n  }\n  function hangUp() {\n    var _localStreamRef$curre2;\n    if (isInitiator) {\n      wsRef.current.send(JSON.stringify({\n        type: \"end-call\"\n      }));\n    }\n    setStatus(\"ended\");\n    (_localStreamRef$curre2 = localStreamRef.current) === null || _localStreamRef$curre2 === void 0 ? void 0 : _localStreamRef$curre2.getTracks().forEach(t => t.stop());\n    setTimeout(() => {\n      var _wsRef$current2, _pcRef$current2;\n      (_wsRef$current2 = wsRef.current) === null || _wsRef$current2 === void 0 ? void 0 : _wsRef$current2.close();\n      (_pcRef$current2 = pcRef.current) === null || _pcRef$current2 === void 0 ? void 0 : _pcRef$current2.close();\n    }, 100);\n  }\n  return {\n    remoteAudioRef,\n    status,\n    chatMessages,\n    sendMessage,\n    toggleMute,\n    hangUp,\n    localSpeaking,\n    remoteSpeaking,\n    remoteMuted\n  };\n}\n_s(useWebRTC, \"FAn6c62XYO9toDHpX0l9Jeb9E2g=\");","map":{"version":3,"names":["useEffect","useRef","useState","useWebRTC","callId","timeout","start","isInitiator","_s","status","setStatus","statusRef","current","wsRef","pcRef","dataChannelRef","remoteAudioRef","localStreamRef","chatMessages","setChatMessages","localSpeaking","setLocalSpeaking","remoteSpeaking","setRemoteSpeaking","remoteMuted","setRemoteMuted","serverUrl","process","env","REACT_APP_SERVER_URL","WebSocket","replace","onopen","console","log","readyState","onclose","onmessage","data","msg","JSON","parse","type","peers","initiateCall","setRemoteDescription","offer","answer","createAnswer","setLocalDescription","send","stringify","addIceCandidate","candidate","timer","setTimeout","_wsRef$current","_pcRef$current","clearTimeout","close","RTCPeerConnection","iceServers","urls","REACT_APP_STUN_SERVER","navigator","mediaDevices","getUserMedia","audio","getTracks","forEach","t","addTrack","ontrack","streams","stream","srcObject","createDataChannel","setupDataChannel","ondatachannel","channel","onicecandidate","createOffer","prev","sender","text","sendMessage","_dataChannelRef$curre","_dataChannelRef$curre2","toggleMute","_localStreamRef$curre","getAudioTracks","enabled","hangUp","_localStreamRef$curre2","stop","_wsRef$current2","_pcRef$current2"],"sources":["/Users/theodiamant/Desktop/webrtc/client/src/hooks/useWebRTC.js"],"sourcesContent":["import { useEffect, useRef, useState } from \"react\";\n\nexport default function useWebRTC(\n  callId,\n  { timeout = 30000, start = true, isInitiator = false }\n) {\n  const [status, setStatus] = useState(\"waiting\");\n  const statusRef = useRef(status);\n  useEffect(() => { statusRef.current = status; }, [status]);\n\n  const wsRef = useRef();\n  const pcRef = useRef();\n  const dataChannelRef = useRef();\n  const remoteAudioRef = useRef();\n  const localStreamRef = useRef();\n\n  const [chatMessages, setChatMessages] = useState([]);\n  const [localSpeaking, setLocalSpeaking] = useState(false);\n  const [remoteSpeaking, setRemoteSpeaking] = useState(false);\n  const [remoteMuted, setRemoteMuted] = useState(false);\n\n  useEffect(() => {\n    if (!start) return;\n\n    const serverUrl = process.env.REACT_APP_SERVER_URL;\n    wsRef.current = new WebSocket(\n      `${serverUrl.replace(/^http/, \"ws\")}?roomId=${callId}`\n    );\n    wsRef.current.onopen = () =>\n      console.log(\"WS open, readyState =\", wsRef.current.readyState);\n    wsRef.current.onclose = () => console.log(\"WS closed\");\n\n    wsRef.current.onmessage = async ({ data }) => {\n      let msg;\n      try {\n        msg = JSON.parse(data);\n      } catch {\n        return;\n      }\n      switch (msg.type) {\n        case \"room-status\":\n          if (msg.peers === 2 && statusRef.current === \"waiting\") {\n            await initiateCall(isInitiator);\n          }\n          break;\n        case \"offer\":\n          console.log(\"‚Üê offer re√ßu\");\n          await pcRef.current.setRemoteDescription(msg.offer);\n          {\n            const answer = await pcRef.current.createAnswer();\n            await pcRef.current.setLocalDescription(answer);\n            wsRef.current.send(JSON.stringify({ type: \"answer\", answer }));\n          }\n          break;\n        case \"answer\":\n          console.log(\"‚Üê answer re√ßue\");\n          await pcRef.current.setRemoteDescription(msg.answer);\n          break;\n        case \"candidate\":\n          console.log(\"‚Üê candidate re√ßue\");\n          await pcRef.current.addIceCandidate(msg.candidate);\n          break;\n        case \"peer-left\":\n          setStatus(\"peer-left\");\n          break;\n        case \"call-ended\":\n          setStatus(\"ended\");\n          break;\n      }\n    };\n\n    const timer = setTimeout(() => {\n      if (statusRef.current !== \"connected\") setStatus(\"timeout\");\n    }, timeout);\n\n    return () => {\n      clearTimeout(timer);\n      wsRef.current?.close();\n      pcRef.current?.close();\n    };\n  }, [callId, start, isInitiator, timeout]);\n\n  async function initiateCall(isInitiator) {\n    console.log(\"initiateCall, initiator =\", isInitiator);\n    setStatus(\"connecting\");\n    pcRef.current = new RTCPeerConnection({\n      iceServers: [{ urls: process.env.REACT_APP_STUN_SERVER }],\n    });\n\n    localStreamRef.current = await navigator.mediaDevices.getUserMedia({\n      audio: true,\n    });\n    // ‚Ä¶ (speech detection identique)\n    localStreamRef.current\n      .getTracks()\n      .forEach((t) => pcRef.current.addTrack(t, localStreamRef.current));\n\n    pcRef.current.ontrack = ({ streams: [stream] }) => {\n      remoteAudioRef.current.srcObject = stream;\n      // ‚Ä¶ (d√©tection remoteSpeaking / remoteMuted)\n    };\n\n    // DataChannel\n    if (isInitiator) {\n      dataChannelRef.current = pcRef.current.createDataChannel(\"chat\");\n      setupDataChannel();\n    } else {\n      pcRef.current.ondatachannel = ({ channel }) => {\n        dataChannelRef.current = channel;\n        setupDataChannel();\n      };\n    }\n\n    pcRef.current.onicecandidate = ({ candidate }) => {\n      if (candidate) {\n        console.log(\"‚Üí envoi candidate\");\n        wsRef.current.send(JSON.stringify({ type: \"candidate\", candidate }));\n      }\n    };\n\n    if (isInitiator) {\n      const offer = await pcRef.current.createOffer();\n      await pcRef.current.setLocalDescription(offer);\n      console.log(\"‚Üí envoi offer\");\n      wsRef.current.send(JSON.stringify({ type: \"offer\", offer }));\n    }\n\n    setStatus(\"connected\");\n  }\n\n  function setupDataChannel() {\n    dataChannelRef.current.onopen = () =>\n      console.log(\"üî• DataChannel open\");\n    dataChannelRef.current.onmessage = ({ data }) => {\n      console.log(\"‚Äπ‚Äπ DC message re√ßu ‚Ä∫‚Ä∫\", data);\n      setChatMessages((prev) => [...prev, { sender: \"peer\", text: data }]);\n    };\n  }\n\n  function sendMessage(text) {\n    console.log(\n      \"‚Üí sendMessage, DC state=\",\n      dataChannelRef.current?.readyState,\n      \"text=\",\n      text\n    );\n    if (dataChannelRef.current?.readyState === \"open\") {\n      dataChannelRef.current.send(text);\n      setChatMessages((prev) => [...prev, { sender: \"local\", text }]);\n    }\n  }\n\n  function toggleMute() {\n    const t = localStreamRef.current?.getAudioTracks()[0];\n    if (t) t.enabled = !t.enabled;\n  }\n\n  function hangUp() {\n    if (isInitiator) {\n      wsRef.current.send(JSON.stringify({ type: \"end-call\" }));\n    }\n    setStatus(\"ended\");\n    localStreamRef.current?.getTracks().forEach((t) => t.stop());\n    setTimeout(() => {\n      wsRef.current?.close();\n      pcRef.current?.close();\n    }, 100);\n  }\n\n  return {\n    remoteAudioRef,\n    status,\n    chatMessages,\n    sendMessage,\n    toggleMute,\n    hangUp,\n    localSpeaking,\n    remoteSpeaking,\n    remoteMuted,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useRef, useState } from 'react';\nexport default function useWebRTC(callId, {\n  timeout = 30000,\n  start = true\n}) {\n  _s();\n  const wsRef = useRef();\n  const pcRef = useRef();\n  const dataChannelRef = useRef();\n  const remoteAudioRef = useRef();\n  const localStreamRef = useRef();\n  const [status, setStatus] = useState('waiting');\n  const [chatMessages, setChatMessages] = useState([]);\n  useEffect(() => {\n    if (!start) return;\n    const serverUrl = process.env.REACT_APP_SERVER_URL;\n    wsRef.current = new WebSocket(`${serverUrl.replace(/^http/, 'ws')}?roomId=${callId}`);\n    wsRef.current.onmessage = async ({\n      data\n    }) => {\n      const msg = JSON.parse(data);\n      switch (msg.type) {\n        case 'room-status':\n          if (msg.peers === 2 && status === 'waiting') {\n            await initiateCall(true);\n          }\n          break;\n        case 'offer':\n          await pcRef.current.setRemoteDescription(msg.offer);\n          const answer = await pcRef.current.createAnswer();\n          await pcRef.current.setLocalDescription(answer);\n          wsRef.current.send(JSON.stringify({\n            type: 'answer',\n            answer\n          }));\n          break;\n        case 'answer':\n          await pcRef.current.setRemoteDescription(msg.answer);\n          break;\n        case 'candidate':\n          await pcRef.current.addIceCandidate(msg.candidate);\n          break;\n        case 'peer-left':\n          setStatus('peer-left');\n          break;\n        default:\n          break;\n      }\n    };\n    wsRef.current.onopen = () => console.log('WS open');\n    wsRef.current.onclose = () => console.log('WS closed');\n    async function initiateCall(isInitiator) {\n      setStatus('connecting');\n      pcRef.current = new RTCPeerConnection({\n        iceServers: [{\n          urls: process.env.REACT_APP_STUN_SERVER\n        }]\n      });\n      localStreamRef.current = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      localStreamRef.current.getTracks().forEach(t => pcRef.current.addTrack(t, localStreamRef.current));\n      pcRef.current.ontrack = ({\n        streams: [stream]\n      }) => {\n        if (remoteAudioRef.current) remoteAudioRef.current.srcObject = stream;\n      };\n      if (isInitiator) {\n        dataChannelRef.current = pcRef.current.createDataChannel('chat');\n        setupDataChannel();\n      } else {\n        pcRef.current.ondatachannel = ({\n          channel\n        }) => {\n          dataChannelRef.current = channel;\n          setupDataChannel();\n        };\n      }\n      pcRef.current.onicecandidate = ({\n        candidate\n      }) => {\n        if (candidate) wsRef.current.send(JSON.stringify({\n          type: 'candidate',\n          candidate\n        }));\n      };\n      if (isInitiator) {\n        const offer = await pcRef.current.createOffer();\n        await pcRef.current.setLocalDescription(offer);\n        wsRef.current.send(JSON.stringify({\n          type: 'offer',\n          offer\n        }));\n      }\n      setStatus('connected');\n    }\n    function setupDataChannel() {\n      dataChannelRef.current.onopen = () => console.log('DataChannel open');\n      dataChannelRef.current.onmessage = ({\n        data\n      }) => setChatMessages(prev => [...prev, {\n        sender: 'peer',\n        text: data\n      }]);\n    }\n    const timer = setTimeout(() => {\n      if (status !== 'connected') setStatus('timeout');\n    }, timeout);\n    return () => {\n      var _wsRef$current, _pcRef$current;\n      clearTimeout(timer);\n      (_wsRef$current = wsRef.current) === null || _wsRef$current === void 0 ? void 0 : _wsRef$current.close();\n      (_pcRef$current = pcRef.current) === null || _pcRef$current === void 0 ? void 0 : _pcRef$current.close();\n    };\n  }, [callId, start]);\n  function sendMessage(text) {\n    var _dataChannelRef$curre;\n    if (((_dataChannelRef$curre = dataChannelRef.current) === null || _dataChannelRef$curre === void 0 ? void 0 : _dataChannelRef$curre.readyState) === 'open') {\n      dataChannelRef.current.send(text);\n      setChatMessages(prev => [...prev, {\n        sender: 'local',\n        text\n      }]);\n    }\n  }\n  function toggleMute() {\n    if (localStreamRef.current) {\n      const track = localStreamRef.current.getAudioTracks()[0];\n      track.enabled = !track.enabled;\n    }\n  }\n  function hangUp() {\n    wsRef.current.close();\n    pcRef.current.close();\n    setStatus('ended');\n  }\n  return {\n    remoteAudioRef,\n    status,\n    chatMessages,\n    sendMessage,\n    toggleMute,\n    hangUp\n  };\n}\n_s(useWebRTC, \"LejGSTazFg1QTjbukmp9FR4hWgw=\");","map":{"version":3,"names":["useEffect","useRef","useState","useWebRTC","callId","timeout","start","_s","wsRef","pcRef","dataChannelRef","remoteAudioRef","localStreamRef","status","setStatus","chatMessages","setChatMessages","serverUrl","process","env","REACT_APP_SERVER_URL","current","WebSocket","replace","onmessage","data","msg","JSON","parse","type","peers","initiateCall","setRemoteDescription","offer","answer","createAnswer","setLocalDescription","send","stringify","addIceCandidate","candidate","onopen","console","log","onclose","isInitiator","RTCPeerConnection","iceServers","urls","REACT_APP_STUN_SERVER","navigator","mediaDevices","getUserMedia","audio","getTracks","forEach","t","addTrack","ontrack","streams","stream","srcObject","createDataChannel","setupDataChannel","ondatachannel","channel","onicecandidate","createOffer","prev","sender","text","timer","setTimeout","_wsRef$current","_pcRef$current","clearTimeout","close","sendMessage","_dataChannelRef$curre","readyState","toggleMute","track","getAudioTracks","enabled","hangUp"],"sources":["/Users/theodiamant/Desktop/webrtc/client/src/hooks/useWebRTC.js"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\n\nexport default function useWebRTC(callId, { timeout = 30000, start = true }) {\n  const wsRef = useRef();\n  const pcRef = useRef();\n  const dataChannelRef = useRef();\n  const remoteAudioRef = useRef();\n  const localStreamRef = useRef();\n  const [status, setStatus] = useState('waiting');\n  const [chatMessages, setChatMessages] = useState([]);\n\n  useEffect(() => {\n    if (!start) return;\n    const serverUrl = process.env.REACT_APP_SERVER_URL;\n    wsRef.current = new WebSocket(`${serverUrl.replace(/^http/, 'ws')}?roomId=${callId}`);\n\n    wsRef.current.onmessage = async ({ data }) => {\n      const msg = JSON.parse(data);\n      switch (msg.type) {\n        case 'room-status':\n          if (msg.peers === 2 && status === 'waiting') {\n            await initiateCall(true);\n          }\n          break;\n        case 'offer':\n          await pcRef.current.setRemoteDescription(msg.offer);\n          const answer = await pcRef.current.createAnswer();\n          await pcRef.current.setLocalDescription(answer);\n          wsRef.current.send(JSON.stringify({ type: 'answer', answer }));\n          break;\n        case 'answer':\n          await pcRef.current.setRemoteDescription(msg.answer);\n          break;\n        case 'candidate':\n          await pcRef.current.addIceCandidate(msg.candidate);\n          break;\n        case 'peer-left':\n          setStatus('peer-left');\n          break;\n        default:\n          break;\n      }\n    };\n\n    wsRef.current.onopen = () => console.log('WS open');\n    wsRef.current.onclose = () => console.log('WS closed');\n\n    async function initiateCall(isInitiator) {\n      setStatus('connecting');\n      pcRef.current = new RTCPeerConnection({ iceServers: [{ urls: process.env.REACT_APP_STUN_SERVER }] });\n      localStreamRef.current = await navigator.mediaDevices.getUserMedia({ audio: true });\n      \n      localStreamRef.current.getTracks().forEach(t => pcRef.current.addTrack(t, localStreamRef.current));\n      pcRef.current.ontrack = ({ streams: [stream] }) => { if (remoteAudioRef.current) remoteAudioRef.current.srcObject = stream; };\n\n      if (isInitiator) {\n        dataChannelRef.current = pcRef.current.createDataChannel('chat');\n        setupDataChannel();\n      } else {\n        pcRef.current.ondatachannel = ({ channel }) => { dataChannelRef.current = channel; setupDataChannel(); };\n      }\n\n      pcRef.current.onicecandidate = ({ candidate }) => {\n        if (candidate) wsRef.current.send(JSON.stringify({ type: 'candidate', candidate }));\n      };\n\n      if (isInitiator) {\n        const offer = await pcRef.current.createOffer();\n        await pcRef.current.setLocalDescription(offer);\n        wsRef.current.send(JSON.stringify({ type: 'offer', offer }));\n      }\n\n      setStatus('connected');\n    }\n\n    function setupDataChannel() {\n      dataChannelRef.current.onopen = () => console.log('DataChannel open');\n      dataChannelRef.current.onmessage = ({ data }) => setChatMessages(prev => [...prev, { sender: 'peer', text: data }]);\n    }\n\n    const timer = setTimeout(() => { if (status !== 'connected') setStatus('timeout'); }, timeout);\n\n    return () => {\n      clearTimeout(timer);\n      wsRef.current?.close();\n      pcRef.current?.close();\n    };\n  }, [callId, start]);\n\n  function sendMessage(text) {\n    if (dataChannelRef.current?.readyState === 'open') {\n      dataChannelRef.current.send(text);\n      setChatMessages(prev => [...prev, { sender: 'local', text }]);\n    }\n  }\n\n  function toggleMute() {\n    if (localStreamRef.current) {\n      const track = localStreamRef.current.getAudioTracks()[0];\n      track.enabled = !track.enabled;\n    }\n  }\n\n  function hangUp() {\n    wsRef.current.close();\n    pcRef.current.close();\n    setStatus('ended');\n  }\n\n  return { remoteAudioRef, status, chatMessages, sendMessage, toggleMute, hangUp };\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
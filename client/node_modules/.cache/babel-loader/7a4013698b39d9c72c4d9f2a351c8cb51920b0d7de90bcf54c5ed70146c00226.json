{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useWebRTC.js\nimport { useEffect, useRef, useState } from \"react\";\nexport default function useWebRTC(callId, {\n  timeout = 30000,\n  start = true,\n  isInitiator = false\n}) {\n  _s();\n  // --- refs & state ---\n  const wsRef = useRef();\n  const pcRef = useRef();\n  const dataChannelRef = useRef();\n  const remoteAudioRef = useRef();\n  const localStreamRef = useRef();\n  const [status, setStatus] = useState(\"waiting\");\n  const statusRef = useRef(status);\n  useEffect(() => {\n    statusRef.current = status;\n  }, [status]);\n  const [chatMessages, setChatMessages] = useState([]);\n  const [localSpeaking, setLocalSpeaking] = useState(false);\n  const [remoteSpeaking, setRemoteSpeaking] = useState(false);\n  const [remoteMuted, setRemoteMuted] = useState(false);\n\n  // --- SIGNALING WS SETUP ---\n  useEffect(() => {\n    if (!start) return;\n    const serverUrl = process.env.REACT_APP_SERVER_URL;\n    wsRef.current = new WebSocket(`${serverUrl.replace(/^http/, \"ws\")}?roomId=${callId}`);\n    wsRef.current.onopen = () => console.log(\"WS open\");\n    wsRef.current.onclose = () => console.log(\"WS closed\");\n    wsRef.current.onmessage = async ({\n      data\n    }) => {\n      let msg;\n      try {\n        msg = JSON.parse(data);\n      } catch {\n        return;\n      }\n      switch (msg.type) {\n        case \"room-status\":\n          if (msg.peers === 2 && statusRef.current === \"waiting\") {\n            await initiateCall(isInitiator);\n          }\n          break;\n        case \"offer\":\n          await pcRef.current.setRemoteDescription(msg.offer);\n          {\n            const answer = await pcRef.current.createAnswer();\n            await pcRef.current.setLocalDescription(answer);\n            wsRef.current.send(JSON.stringify({\n              type: \"answer\",\n              answer\n            }));\n          }\n          break;\n        case \"answer\":\n          await pcRef.current.setRemoteDescription(msg.answer);\n          break;\n        case \"candidate\":\n          await pcRef.current.addIceCandidate(msg.candidate);\n          break;\n        case \"peer-left\":\n          setStatus(\"peer-left\");\n          break;\n        case \"call-ended\":\n          setStatus(\"ended\");\n          break;\n      }\n    };\n    const timer = setTimeout(() => {\n      if (statusRef.current !== \"connected\") setStatus(\"timeout\");\n    }, timeout);\n    return () => {\n      var _wsRef$current, _pcRef$current;\n      clearTimeout(timer);\n      (_wsRef$current = wsRef.current) === null || _wsRef$current === void 0 ? void 0 : _wsRef$current.close();\n      (_pcRef$current = pcRef.current) === null || _pcRef$current === void 0 ? void 0 : _pcRef$current.close();\n    };\n  }, [callId, start, isInitiator]);\n\n  // --- PEER CONNECTION SETUP ---\n  async function initiateCall(isInitiator) {\n    setStatus(\"connecting\");\n    pcRef.current = new RTCPeerConnection({\n      iceServers: [{\n        urls: process.env.REACT_APP_STUN_SERVER\n      }]\n    });\n\n    // local audio + speech detection\n    localStreamRef.current = await navigator.mediaDevices.getUserMedia({\n      audio: true\n    });\n    const audioCtxL = new (window.AudioContext || window.webkitAudioContext)();\n    const analyserL = audioCtxL.createAnalyser();\n    const srcL = audioCtxL.createMediaStreamSource(localStreamRef.current);\n    srcL.connect(analyserL);\n    analyserL.fftSize = 256;\n    const dataL = new Uint8Array(analyserL.frequencyBinCount);\n    (function detectLocal() {\n      analyserL.getByteFrequencyData(dataL);\n      setLocalSpeaking(dataL.reduce((sum, v) => sum + v, 0) / dataL.length > 30);\n      requestAnimationFrame(detectLocal);\n    })();\n    localStreamRef.current.getTracks().forEach(t => pcRef.current.addTrack(t, localStreamRef.current));\n\n    // remote audio + speech & mute detection\n    pcRef.current.ontrack = ({\n      streams: [stream]\n    }) => {\n      if (remoteAudioRef.current) remoteAudioRef.current.srcObject = stream;\n\n      // watch track mute/unmute events\n      const rt = stream.getAudioTracks()[0];\n      if (rt) {\n        rt.onmute = () => setRemoteMuted(true);\n        rt.onunmute = () => setRemoteMuted(false);\n      }\n      if (!remoteSpeaking) {\n        const audioCtxR = new (window.AudioContext || window.webkitAudioContext)();\n        const analyserR = audioCtxR.createAnalyser();\n        const srcR = audioCtxR.createMediaStreamSource(stream);\n        srcR.connect(analyserR);\n        analyserR.fftSize = 256;\n        const dataR = new Uint8Array(analyserR.frequencyBinCount);\n        (function detectRemote() {\n          analyserR.getByteFrequencyData(dataR);\n          setRemoteSpeaking(dataR.reduce((sum, v) => sum + v, 0) / dataR.length > 30);\n          requestAnimationFrame(detectRemote);\n        })();\n      }\n    };\n\n    // data channel for chat + mute signaling\n    if (isInitiator) {\n      dataChannelRef.current = pcRef.current.createDataChannel(\"chat\");\n      setupDataChannel();\n    } else {\n      pcRef.current.ondatachannel = ({\n        channel\n      }) => {\n        dataChannelRef.current = channel;\n        setupDataChannel();\n      };\n    }\n    pcRef.current.onicecandidate = ({\n      candidate\n    }) => {\n      if (candidate) wsRef.current.send(JSON.stringify({\n        type: \"candidate\",\n        candidate\n      }));\n    };\n    if (isInitiator) {\n      const offer = await pcRef.current.createOffer();\n      await pcRef.current.setLocalDescription(offer);\n      wsRef.current.send(JSON.stringify({\n        type: \"offer\",\n        offer\n      }));\n    }\n    setStatus(\"connected\");\n  }\n  function setupDataChannel() {\n    dataChannelRef.current.onopen = () => console.log(\"DataChannel open\");\n    dataChannelRef.current.onmessage = ({\n      data\n    }) => {\n      let parsed;\n      try {\n        parsed = JSON.parse(data);\n      } catch {/* not JSON? */}\n      // handle mute signaling\n      if (parsed && parsed.type === \"mute\") {\n        setRemoteMuted(parsed.muted);\n        return;\n      }\n      // otherwise chat message\n      setChatMessages(prev => [...prev, {\n        sender: \"peer\",\n        text: data\n      }]);\n    };\n  }\n\n  // --- PUBLIC API ---\n  function sendMessage(text) {\n    var _dataChannelRef$curre;\n    if (((_dataChannelRef$curre = dataChannelRef.current) === null || _dataChannelRef$curre === void 0 ? void 0 : _dataChannelRef$curre.readyState) === \"open\") {\n      dataChannelRef.current.send(text);\n      setChatMessages(prev => [...prev, {\n        sender: \"local\",\n        text\n      }]);\n    }\n  }\n  function toggleMute() {\n    var _localStreamRef$curre, _dataChannelRef$curre2;\n    const track = (_localStreamRef$curre = localStreamRef.current) === null || _localStreamRef$curre === void 0 ? void 0 : _localStreamRef$curre.getAudioTracks()[0];\n    if (!track) return;\n    track.enabled = !track.enabled;\n    // signal our new mute state to peer\n    const msg = JSON.stringify({\n      type: \"mute\",\n      muted: !track.enabled\n    });\n    if (((_dataChannelRef$curre2 = dataChannelRef.current) === null || _dataChannelRef$curre2 === void 0 ? void 0 : _dataChannelRef$curre2.readyState) === \"open\") {\n      dataChannelRef.current.send(msg);\n    }\n  }\n  function hangUp() {\n    var _localStreamRef$curre2;\n    if (isInitiator) {\n      wsRef.current.send(JSON.stringify({\n        type: \"end-call\"\n      }));\n    }\n    setStatus(\"ended\");\n    (_localStreamRef$curre2 = localStreamRef.current) === null || _localStreamRef$curre2 === void 0 ? void 0 : _localStreamRef$curre2.getTracks().forEach(t => t.stop());\n    if (remoteAudioRef.current) remoteAudioRef.current.srcObject = null;\n    setTimeout(() => {\n      var _wsRef$current2, _pcRef$current2;\n      (_wsRef$current2 = wsRef.current) === null || _wsRef$current2 === void 0 ? void 0 : _wsRef$current2.close();\n      (_pcRef$current2 = pcRef.current) === null || _pcRef$current2 === void 0 ? void 0 : _pcRef$current2.close();\n    }, 100);\n  }\n  return {\n    remoteAudioRef,\n    status,\n    chatMessages,\n    sendMessage,\n    toggleMute,\n    hangUp,\n    localSpeaking,\n    remoteSpeaking,\n    remoteMuted\n  };\n}\n_s(useWebRTC, \"cKP1I0v2cUgvh4EjW4pVYio3St0=\");","map":{"version":3,"names":["useEffect","useRef","useState","useWebRTC","callId","timeout","start","isInitiator","_s","wsRef","pcRef","dataChannelRef","remoteAudioRef","localStreamRef","status","setStatus","statusRef","current","chatMessages","setChatMessages","localSpeaking","setLocalSpeaking","remoteSpeaking","setRemoteSpeaking","remoteMuted","setRemoteMuted","serverUrl","process","env","REACT_APP_SERVER_URL","WebSocket","replace","onopen","console","log","onclose","onmessage","data","msg","JSON","parse","type","peers","initiateCall","setRemoteDescription","offer","answer","createAnswer","setLocalDescription","send","stringify","addIceCandidate","candidate","timer","setTimeout","_wsRef$current","_pcRef$current","clearTimeout","close","RTCPeerConnection","iceServers","urls","REACT_APP_STUN_SERVER","navigator","mediaDevices","getUserMedia","audio","audioCtxL","window","AudioContext","webkitAudioContext","analyserL","createAnalyser","srcL","createMediaStreamSource","connect","fftSize","dataL","Uint8Array","frequencyBinCount","detectLocal","getByteFrequencyData","reduce","sum","v","length","requestAnimationFrame","getTracks","forEach","t","addTrack","ontrack","streams","stream","srcObject","rt","getAudioTracks","onmute","onunmute","audioCtxR","analyserR","srcR","dataR","detectRemote","createDataChannel","setupDataChannel","ondatachannel","channel","onicecandidate","createOffer","parsed","muted","prev","sender","text","sendMessage","_dataChannelRef$curre","readyState","toggleMute","_localStreamRef$curre","_dataChannelRef$curre2","track","enabled","hangUp","_localStreamRef$curre2","stop","_wsRef$current2","_pcRef$current2"],"sources":["/Users/theodiamant/Desktop/webrtc/client/src/hooks/useWebRTC.js"],"sourcesContent":["// src/hooks/useWebRTC.js\nimport { useEffect, useRef, useState } from \"react\";\n\nexport default function useWebRTC(\n  callId,\n  { timeout = 30000, start = true, isInitiator = false }\n) {\n  // --- refs & state ---\n  const wsRef = useRef();\n  const pcRef = useRef();\n  const dataChannelRef = useRef();\n  const remoteAudioRef = useRef();\n  const localStreamRef = useRef();\n\n  const [status, setStatus] = useState(\"waiting\");\n  const statusRef = useRef(status);\n  useEffect(() => { statusRef.current = status }, [status]);\n\n  const [chatMessages, setChatMessages] = useState([]);\n  const [localSpeaking, setLocalSpeaking] = useState(false);\n  const [remoteSpeaking, setRemoteSpeaking] = useState(false);\n  const [remoteMuted, setRemoteMuted] = useState(false);\n\n  // --- SIGNALING WS SETUP ---\n  useEffect(() => {\n    if (!start) return;\n    const serverUrl = process.env.REACT_APP_SERVER_URL;\n    wsRef.current = new WebSocket(\n      `${serverUrl.replace(/^http/, \"ws\")}?roomId=${callId}`\n    );\n    wsRef.current.onopen = () => console.log(\"WS open\");\n    wsRef.current.onclose = () => console.log(\"WS closed\");\n\n    wsRef.current.onmessage = async ({ data }) => {\n      let msg;\n      try { msg = JSON.parse(data); } catch { return; }\n\n      switch (msg.type) {\n        case \"room-status\":\n          if (msg.peers === 2 && statusRef.current === \"waiting\") {\n            await initiateCall(isInitiator);\n          }\n          break;\n        case \"offer\":\n          await pcRef.current.setRemoteDescription(msg.offer);\n          {\n            const answer = await pcRef.current.createAnswer();\n            await pcRef.current.setLocalDescription(answer);\n            wsRef.current.send(JSON.stringify({ type: \"answer\", answer }));\n          }\n          break;\n        case \"answer\":\n          await pcRef.current.setRemoteDescription(msg.answer);\n          break;\n        case \"candidate\":\n          await pcRef.current.addIceCandidate(msg.candidate);\n          break;\n        case \"peer-left\":\n          setStatus(\"peer-left\");\n          break;\n        case \"call-ended\":\n          setStatus(\"ended\");\n          break;\n      }\n    };\n\n    const timer = setTimeout(() => {\n      if (statusRef.current !== \"connected\") setStatus(\"timeout\");\n    }, timeout);\n\n    return () => {\n      clearTimeout(timer);\n      wsRef.current?.close();\n      pcRef.current?.close();\n    };\n  }, [callId, start, isInitiator]);\n\n  // --- PEER CONNECTION SETUP ---\n  async function initiateCall(isInitiator) {\n    setStatus(\"connecting\");\n    pcRef.current = new RTCPeerConnection({\n      iceServers: [{ urls: process.env.REACT_APP_STUN_SERVER }],\n    });\n\n    // local audio + speech detection\n    localStreamRef.current = await navigator.mediaDevices.getUserMedia({ audio: true });\n    const audioCtxL = new (window.AudioContext || window.webkitAudioContext)();\n    const analyserL = audioCtxL.createAnalyser();\n    const srcL = audioCtxL.createMediaStreamSource(localStreamRef.current);\n    srcL.connect(analyserL);\n    analyserL.fftSize = 256;\n    const dataL = new Uint8Array(analyserL.frequencyBinCount);\n    (function detectLocal() {\n      analyserL.getByteFrequencyData(dataL);\n      setLocalSpeaking(dataL.reduce((sum, v) => sum + v, 0) / dataL.length > 30);\n      requestAnimationFrame(detectLocal);\n    })();\n\n    localStreamRef.current.getTracks()\n      .forEach((t) => pcRef.current.addTrack(t, localStreamRef.current));\n\n    // remote audio + speech & mute detection\n    pcRef.current.ontrack = ({ streams: [stream] }) => {\n      if (remoteAudioRef.current) remoteAudioRef.current.srcObject = stream;\n\n      // watch track mute/unmute events\n      const rt = stream.getAudioTracks()[0];\n      if (rt) {\n        rt.onmute   = () => setRemoteMuted(true);\n        rt.onunmute = () => setRemoteMuted(false);\n      }\n\n      if (!remoteSpeaking) {\n        const audioCtxR = new (window.AudioContext || window.webkitAudioContext)();\n        const analyserR = audioCtxR.createAnalyser();\n        const srcR = audioCtxR.createMediaStreamSource(stream);\n        srcR.connect(analyserR);\n        analyserR.fftSize = 256;\n        const dataR = new Uint8Array(analyserR.frequencyBinCount);\n        (function detectRemote() {\n          analyserR.getByteFrequencyData(dataR);\n          setRemoteSpeaking(dataR.reduce((sum, v) => sum + v, 0) / dataR.length > 30);\n          requestAnimationFrame(detectRemote);\n        })();\n      }\n    };\n\n    // data channel for chat + mute signaling\n    if (isInitiator) {\n      dataChannelRef.current = pcRef.current.createDataChannel(\"chat\");\n      setupDataChannel();\n    } else {\n      pcRef.current.ondatachannel = ({ channel }) => {\n        dataChannelRef.current = channel;\n        setupDataChannel();\n      };\n    }\n\n    pcRef.current.onicecandidate = ({ candidate }) => {\n      if (candidate)\n        wsRef.current.send(JSON.stringify({ type: \"candidate\", candidate }));\n    };\n\n    if (isInitiator) {\n      const offer = await pcRef.current.createOffer();\n      await pcRef.current.setLocalDescription(offer);\n      wsRef.current.send(JSON.stringify({ type: \"offer\", offer }));\n    }\n\n    setStatus(\"connected\");\n  }\n\n  function setupDataChannel() {\n    dataChannelRef.current.onopen = () => console.log(\"DataChannel open\");\n    dataChannelRef.current.onmessage = ({ data }) => {\n      let parsed;\n      try { parsed = JSON.parse(data); } catch { /* not JSON? */ }\n      // handle mute signaling\n      if (parsed && parsed.type === \"mute\") {\n        setRemoteMuted(parsed.muted);\n        return;\n      }\n      // otherwise chat message\n      setChatMessages((prev) => [...prev, { sender: \"peer\", text: data }]);\n    };\n  }\n\n  // --- PUBLIC API ---\n  function sendMessage(text) {\n    if (dataChannelRef.current?.readyState === \"open\") {\n      dataChannelRef.current.send(text);\n      setChatMessages((prev) => [...prev, { sender: \"local\", text }]);\n    }\n  }\n\n  function toggleMute() {\n    const track = localStreamRef.current?.getAudioTracks()[0];\n    if (!track) return;\n    track.enabled = !track.enabled;\n    // signal our new mute state to peer\n    const msg = JSON.stringify({ type: \"mute\", muted: !track.enabled });\n    if (dataChannelRef.current?.readyState === \"open\") {\n      dataChannelRef.current.send(msg);\n    }\n  }\n\n  function hangUp() {\n    if (isInitiator) {\n      wsRef.current.send(JSON.stringify({ type: \"end-call\" }));\n    }\n    setStatus(\"ended\");\n    localStreamRef.current?.getTracks().forEach((t) => t.stop());\n    if (remoteAudioRef.current) remoteAudioRef.current.srcObject = null;\n    setTimeout(() => {\n      wsRef.current?.close();\n      pcRef.current?.close();\n    }, 100);\n  }\n\n  return {\n    remoteAudioRef,\n    status,\n    chatMessages,\n    sendMessage,\n    toggleMute,\n    hangUp,\n    localSpeaking,\n    remoteSpeaking,\n    remoteMuted,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
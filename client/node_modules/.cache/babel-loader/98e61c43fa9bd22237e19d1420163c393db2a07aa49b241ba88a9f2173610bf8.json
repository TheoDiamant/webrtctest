{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useWebRTC.js\nimport { useEffect, useRef, useState } from \"react\";\nexport default function useWebRTC(callId, {\n  timeout = 30000,\n  start = true,\n  isInitiator = false\n}) {\n  _s();\n  const wsRef = useRef();\n  const pcRef = useRef();\n  const dataChannelRef = useRef();\n  const remoteAudioRef = useRef();\n  const localStreamRef = useRef();\n  const [status, setStatus] = useState(\"waiting\");\n  const statusRef = useRef(status);\n  useEffect(() => {\n    statusRef.current = status;\n  }, [status]);\n  const [chatMessages, setChatMessages] = useState([]);\n  const [localSpeaking, setLocalSpeaking] = useState(false);\n  const [remoteSpeaking, setRemoteSpeaking] = useState(false);\n  const [remoteMuted, setRemoteMuted] = useState(false);\n\n  // 1) Get local audio stream as soon as `start` is true\n  useEffect(() => {\n    if (!start) return;\n    navigator.mediaDevices.getUserMedia({\n      audio: true\n    }).then(stream => {\n      localStreamRef.current = stream;\n      // start speech detection locally\n      const audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n      const analyser = audioCtx.createAnalyser();\n      const src = audioCtx.createMediaStreamSource(stream);\n      src.connect(analyser);\n      analyser.fftSize = 256;\n      const dataArr = new Uint8Array(analyser.frequencyBinCount);\n      (function detect() {\n        analyser.getByteFrequencyData(dataArr);\n        setLocalSpeaking(dataArr.reduce((a, v) => a + v, 0) / dataArr.length > 30);\n        requestAnimationFrame(detect);\n      })();\n    }).catch(err => {\n      console.error(\"Accès micro refusé :\", err);\n      setStatus(\"error\");\n    });\n  }, [start]);\n\n  // 2) Open WebSocket & handle signaling\n  useEffect(() => {\n    if (!start || !localStreamRef.current) return;\n    const serverUrl = process.env.REACT_APP_SERVER_URL;\n    const ws = new WebSocket(`${serverUrl.replace(/^http/, \"ws\")}?roomId=${callId}`);\n    wsRef.current = ws;\n    ws.onopen = () => console.log(\"WS open\");\n    ws.onclose = () => console.log(\"WS closed\");\n    ws.onmessage = async ({\n      data\n    }) => {\n      let msg;\n      try {\n        msg = JSON.parse(data);\n      } catch {\n        return;\n      }\n      switch (msg.type) {\n        case \"room-status\":\n          // seul l’initiateur démarre l’appel quand il voit l’autre arriver\n          if (msg.peers === 2 && isInitiator && statusRef.current === \"waiting\") {\n            await initiateCall(true);\n          }\n          break;\n        case \"offer\":\n          if (!pcRef.current) await initiateCall(false);\n          await pcRef.current.setRemoteDescription(msg.offer);\n          const answer = await pcRef.current.createAnswer();\n          await pcRef.current.setLocalDescription(answer);\n          ws.send(JSON.stringify({\n            type: \"answer\",\n            answer\n          }));\n          break;\n        case \"answer\":\n          await pcRef.current.setRemoteDescription(msg.answer);\n          break;\n        case \"candidate\":\n          await pcRef.current.addIceCandidate(msg.candidate);\n          break;\n        case \"peer-left\":\n          setStatus(\"peer-left\");\n          break;\n        case \"call-ended\":\n          setStatus(\"ended\");\n          break;\n      }\n    };\n    const timer = setTimeout(() => {\n      if (statusRef.current !== \"connected\") setStatus(\"timeout\");\n    }, timeout);\n    return () => {\n      var _pcRef$current;\n      clearTimeout(timer);\n      ws.close();\n      (_pcRef$current = pcRef.current) === null || _pcRef$current === void 0 ? void 0 : _pcRef$current.close();\n    };\n  }, [callId, start, isInitiator]);\n\n  // 3) Build PeerConnection, add tracks, exchange offer/answer\n  async function initiateCall(offerer) {\n    +setStatus(\"connecting\");\n    const pc = new RTCPeerConnection({\n      iceServers: [{\n        urls: process.env.REACT_APP_STUN_SERVER\n      }]\n    });\n    pcRef.current = pc;\n\n    // add local audio tracks\n    localStreamRef.current.getTracks().forEach(t => pc.addTrack(t, localStreamRef.current));\n\n    // handle remote audio\n    pc.ontrack = ({\n      streams: [stream]\n    }) => {\n      if (remoteAudioRef.current) {\n        remoteAudioRef.current.srcObject = stream;\n        remoteAudioRef.current.play().catch(e => console.warn(\"Échec du play distant :\", e));\n      }\n      // detect mute on remote\n      const rt = stream.getAudioTracks()[0];\n      if (rt) {\n        rt.onmute = () => setRemoteMuted(true);\n        rt.onunmute = () => setRemoteMuted(false);\n      }\n      // remote speech detection\n      if (!remoteSpeaking) {\n        const audioCtxR = new (window.AudioContext || window.webkitAudioContext)();\n        const analyserR = audioCtxR.createAnalyser();\n        const srcR = audioCtxR.createMediaStreamSource(stream);\n        srcR.connect(analyserR);\n        analyserR.fftSize = 256;\n        const dataR = new Uint8Array(analyserR.frequencyBinCount);\n        (function detect() {\n          analyserR.getByteFrequencyData(dataR);\n          setRemoteSpeaking(dataR.reduce((a, v) => a + v, 0) / dataR.length > 30);\n          requestAnimationFrame(detect);\n        })();\n      }\n    };\n\n    // chat + mute signaling\n    if (offerer) {\n      dataChannelRef.current = pc.createDataChannel(\"chat\");\n      setupDataChannel();\n    } else {\n      pc.ondatachannel = ({\n        channel\n      }) => {\n        dataChannelRef.current = channel;\n        setupDataChannel();\n      };\n    }\n\n    // ICE\n    pc.onicecandidate = ({\n      candidate\n    }) => {\n      if (candidate) {\n        wsRef.current.send(JSON.stringify({\n          type: \"candidate\",\n          candidate\n        }));\n      }\n    };\n\n    // offer / answer\n    if (offerer) {\n      const offer = await pc.createOffer();\n      await pc.setLocalDescription(offer);\n      wsRef.current.send(JSON.stringify({\n        type: \"offer\",\n        offer\n      }));\n    }\n    setStatus(\"connected\");\n  }\n  function setupDataChannel() {\n    const dc = dataChannelRef.current;\n    dc.onopen = () => console.log(\"DataChannel open\");\n    dc.onmessage = ({\n      data\n    }) => {\n      var _p;\n      let p;\n      try {\n        p = JSON.parse(data);\n      } catch {}\n      if (((_p = p) === null || _p === void 0 ? void 0 : _p.type) === \"mute\") {\n        setRemoteMuted(p.muted);\n      } else {\n        setChatMessages(prev => [...prev, {\n          sender: \"peer\",\n          text: data\n        }]);\n      }\n    };\n  }\n\n  // 4) API\n  function sendMessage(text) {\n    const dc = dataChannelRef.current;\n    if ((dc === null || dc === void 0 ? void 0 : dc.readyState) === \"open\") {\n      dc.send(text);\n      setChatMessages(prev => [...prev, {\n        sender: \"local\",\n        text\n      }]);\n    }\n  }\n  function toggleMute() {\n    var _localStreamRef$curre, _dataChannelRef$curre;\n    const t = (_localStreamRef$curre = localStreamRef.current) === null || _localStreamRef$curre === void 0 ? void 0 : _localStreamRef$curre.getAudioTracks()[0];\n    if (!t) return;\n    t.enabled = !t.enabled;\n    // only guest signals mute\n    if (!isInitiator && ((_dataChannelRef$curre = dataChannelRef.current) === null || _dataChannelRef$curre === void 0 ? void 0 : _dataChannelRef$curre.readyState) === \"open\") {\n      dataChannelRef.current.send(JSON.stringify({\n        type: \"mute\",\n        muted: !t.enabled\n      }));\n    }\n  }\n  function hangUp() {\n    var _localStreamRef$curre2;\n    if (isInitiator) {\n      wsRef.current.send(JSON.stringify({\n        type: \"end-call\"\n      }));\n    }\n    setStatus(\"ended\");\n    (_localStreamRef$curre2 = localStreamRef.current) === null || _localStreamRef$curre2 === void 0 ? void 0 : _localStreamRef$curre2.getTracks().forEach(t => t.stop());\n    if (remoteAudioRef.current) remoteAudioRef.current.srcObject = null;\n    setTimeout(() => {\n      var _wsRef$current, _pcRef$current2;\n      (_wsRef$current = wsRef.current) === null || _wsRef$current === void 0 ? void 0 : _wsRef$current.close();\n      (_pcRef$current2 = pcRef.current) === null || _pcRef$current2 === void 0 ? void 0 : _pcRef$current2.close();\n    }, 100);\n  }\n  return {\n    remoteAudioRef,\n    status,\n    chatMessages,\n    sendMessage,\n    toggleMute,\n    hangUp,\n    localSpeaking,\n    remoteSpeaking,\n    remoteMuted\n  };\n}\n_s(useWebRTC, \"kNVkQRP/bn1rIT3nAdkBUn9hhUs=\");","map":{"version":3,"names":["useEffect","useRef","useState","useWebRTC","callId","timeout","start","isInitiator","_s","wsRef","pcRef","dataChannelRef","remoteAudioRef","localStreamRef","status","setStatus","statusRef","current","chatMessages","setChatMessages","localSpeaking","setLocalSpeaking","remoteSpeaking","setRemoteSpeaking","remoteMuted","setRemoteMuted","navigator","mediaDevices","getUserMedia","audio","then","stream","audioCtx","window","AudioContext","webkitAudioContext","analyser","createAnalyser","src","createMediaStreamSource","connect","fftSize","dataArr","Uint8Array","frequencyBinCount","detect","getByteFrequencyData","reduce","a","v","length","requestAnimationFrame","catch","err","console","error","serverUrl","process","env","REACT_APP_SERVER_URL","ws","WebSocket","replace","onopen","log","onclose","onmessage","data","msg","JSON","parse","type","peers","initiateCall","setRemoteDescription","offer","answer","createAnswer","setLocalDescription","send","stringify","addIceCandidate","candidate","timer","setTimeout","_pcRef$current","clearTimeout","close","offerer","pc","RTCPeerConnection","iceServers","urls","REACT_APP_STUN_SERVER","getTracks","forEach","t","addTrack","ontrack","streams","srcObject","play","e","warn","rt","getAudioTracks","onmute","onunmute","audioCtxR","analyserR","srcR","dataR","createDataChannel","setupDataChannel","ondatachannel","channel","onicecandidate","createOffer","dc","_p","p","muted","prev","sender","text","sendMessage","readyState","toggleMute","_localStreamRef$curre","_dataChannelRef$curre","enabled","hangUp","_localStreamRef$curre2","stop","_wsRef$current","_pcRef$current2"],"sources":["/Users/theodiamant/Desktop/webrtc/client/src/hooks/useWebRTC.js"],"sourcesContent":["// src/hooks/useWebRTC.js\nimport { useEffect, useRef, useState } from \"react\";\n\nexport default function useWebRTC(\n  callId,\n  { timeout = 30000, start = true, isInitiator = false }\n) {\n  const wsRef = useRef();\n  const pcRef = useRef();\n  const dataChannelRef = useRef();\n  const remoteAudioRef = useRef();\n  const localStreamRef = useRef();\n\n  const [status, setStatus] = useState(\"waiting\");\n  const statusRef = useRef(status);\n  useEffect(() => {\n    statusRef.current = status;\n  }, [status]);\n\n  const [chatMessages, setChatMessages] = useState([]);\n  const [localSpeaking, setLocalSpeaking] = useState(false);\n  const [remoteSpeaking, setRemoteSpeaking] = useState(false);\n  const [remoteMuted, setRemoteMuted] = useState(false);\n\n  // 1) Get local audio stream as soon as `start` is true\n  useEffect(() => {\n    if (!start) return;\n    navigator.mediaDevices\n      .getUserMedia({ audio: true })\n      .then((stream) => {\n        localStreamRef.current = stream;\n        // start speech detection locally\n        const audioCtx = new (window.AudioContext ||\n          window.webkitAudioContext)();\n        const analyser = audioCtx.createAnalyser();\n        const src = audioCtx.createMediaStreamSource(stream);\n        src.connect(analyser);\n        analyser.fftSize = 256;\n        const dataArr = new Uint8Array(analyser.frequencyBinCount);\n        (function detect() {\n          analyser.getByteFrequencyData(dataArr);\n          setLocalSpeaking(\n            dataArr.reduce((a, v) => a + v, 0) / dataArr.length > 30\n          );\n          requestAnimationFrame(detect);\n        })();\n      })\n      .catch((err) => {\n        console.error(\"Accès micro refusé :\", err);\n        setStatus(\"error\");\n      });\n  }, [start]);\n\n  // 2) Open WebSocket & handle signaling\n  useEffect(() => {\n    if (!start || !localStreamRef.current) return;\n\n    const serverUrl = process.env.REACT_APP_SERVER_URL;\n    const ws = new WebSocket(\n      `${serverUrl.replace(/^http/, \"ws\")}?roomId=${callId}`\n    );\n    wsRef.current = ws;\n\n    ws.onopen = () => console.log(\"WS open\");\n    ws.onclose = () => console.log(\"WS closed\");\n\n    ws.onmessage = async ({ data }) => {\n      let msg;\n      try {\n        msg = JSON.parse(data);\n      } catch {\n        return;\n      }\n\n      switch (msg.type) {\n        case \"room-status\":\n          // seul l’initiateur démarre l’appel quand il voit l’autre arriver\n          if (\n            msg.peers === 2 &&\n            isInitiator &&\n            statusRef.current === \"waiting\"\n          ) {\n            await initiateCall(true);\n          }\n          break;\n        case \"offer\":\n          if (!pcRef.current) await initiateCall(false);\n          await pcRef.current.setRemoteDescription(msg.offer);\n          const answer = await pcRef.current.createAnswer();\n          await pcRef.current.setLocalDescription(answer);\n          ws.send(JSON.stringify({ type: \"answer\", answer }));\n          break;\n        case \"answer\":\n          await pcRef.current.setRemoteDescription(msg.answer);\n          break;\n        case \"candidate\":\n          await pcRef.current.addIceCandidate(msg.candidate);\n          break;\n        case \"peer-left\":\n          setStatus(\"peer-left\");\n          break;\n        case \"call-ended\":\n          setStatus(\"ended\");\n          break;\n      }\n    };\n\n    const timer = setTimeout(() => {\n      if (statusRef.current !== \"connected\") setStatus(\"timeout\");\n    }, timeout);\n\n    return () => {\n      clearTimeout(timer);\n      ws.close();\n      pcRef.current?.close();\n    };\n  }, [callId, start, isInitiator]);\n\n  // 3) Build PeerConnection, add tracks, exchange offer/answer\n  async function initiateCall(offerer) {\n    +   setStatus(\"connecting\");\n\n    const pc = new RTCPeerConnection({\n      iceServers: [{ urls: process.env.REACT_APP_STUN_SERVER }],\n    });\n    pcRef.current = pc;\n\n    // add local audio tracks\n    localStreamRef.current\n      .getTracks()\n      .forEach((t) => pc.addTrack(t, localStreamRef.current));\n\n    // handle remote audio\n    pc.ontrack = ({ streams: [stream] }) => {\n      if (remoteAudioRef.current) {\n        remoteAudioRef.current.srcObject = stream;\n        remoteAudioRef.current\n          .play()\n          .catch((e) => console.warn(\"Échec du play distant :\", e));\n      }\n      // detect mute on remote\n      const rt = stream.getAudioTracks()[0];\n      if (rt) {\n        rt.onmute = () => setRemoteMuted(true);\n        rt.onunmute = () => setRemoteMuted(false);\n      }\n      // remote speech detection\n      if (!remoteSpeaking) {\n        const audioCtxR = new (window.AudioContext ||\n          window.webkitAudioContext)();\n        const analyserR = audioCtxR.createAnalyser();\n        const srcR = audioCtxR.createMediaStreamSource(stream);\n        srcR.connect(analyserR);\n        analyserR.fftSize = 256;\n        const dataR = new Uint8Array(analyserR.frequencyBinCount);\n        (function detect() {\n          analyserR.getByteFrequencyData(dataR);\n          setRemoteSpeaking(\n            dataR.reduce((a, v) => a + v, 0) / dataR.length > 30\n          );\n          requestAnimationFrame(detect);\n        })();\n      }\n    };\n\n    // chat + mute signaling\n    if (offerer) {\n      dataChannelRef.current = pc.createDataChannel(\"chat\");\n      setupDataChannel();\n    } else {\n      pc.ondatachannel = ({ channel }) => {\n        dataChannelRef.current = channel;\n        setupDataChannel();\n      };\n    }\n\n    // ICE\n    pc.onicecandidate = ({ candidate }) => {\n      if (candidate) {\n        wsRef.current.send(JSON.stringify({ type: \"candidate\", candidate }));\n      }\n    };\n\n    // offer / answer\n    if (offerer) {\n      const offer = await pc.createOffer();\n      await pc.setLocalDescription(offer);\n      wsRef.current.send(JSON.stringify({ type: \"offer\", offer }));\n    }\n\n    setStatus(\"connected\");\n  }\n\n  function setupDataChannel() {\n    const dc = dataChannelRef.current;\n    dc.onopen = () => console.log(\"DataChannel open\");\n    dc.onmessage = ({ data }) => {\n      let p;\n      try {\n        p = JSON.parse(data);\n      } catch {}\n      if (p?.type === \"mute\") {\n        setRemoteMuted(p.muted);\n      } else {\n        setChatMessages((prev) => [...prev, { sender: \"peer\", text: data }]);\n      }\n    };\n  }\n\n  // 4) API\n  function sendMessage(text) {\n    const dc = dataChannelRef.current;\n    if (dc?.readyState === \"open\") {\n      dc.send(text);\n      setChatMessages((prev) => [...prev, { sender: \"local\", text }]);\n    }\n  }\n\n  function toggleMute() {\n    const t = localStreamRef.current?.getAudioTracks()[0];\n    if (!t) return;\n    t.enabled = !t.enabled;\n    // only guest signals mute\n    if (!isInitiator && dataChannelRef.current?.readyState === \"open\") {\n      dataChannelRef.current.send(\n        JSON.stringify({ type: \"mute\", muted: !t.enabled })\n      );\n    }\n  }\n\n  function hangUp() {\n    if (isInitiator) {\n      wsRef.current.send(JSON.stringify({ type: \"end-call\" }));\n    }\n    setStatus(\"ended\");\n    localStreamRef.current?.getTracks().forEach((t) => t.stop());\n    if (remoteAudioRef.current) remoteAudioRef.current.srcObject = null;\n    setTimeout(() => {\n      wsRef.current?.close();\n      pcRef.current?.close();\n    }, 100);\n  }\n\n  return {\n    remoteAudioRef,\n    status,\n    chatMessages,\n    sendMessage,\n    toggleMute,\n    hangUp,\n    localSpeaking,\n    remoteSpeaking,\n    remoteMuted,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useRef, useState } from \"react\";\nexport default function useWebRTC(callId, {\n  start = true,\n  isInitiator = false\n}) {\n  _s();\n  const wsRef = useRef();\n  const pcRef = useRef();\n  const dataChannelRef = useRef();\n  const remoteAudioRef = useRef();\n  const localStreamRef = useRef();\n  const [status, setStatus] = useState(\"waiting\");\n  const statusRef = useRef(status);\n  useEffect(() => {\n    statusRef.current = status;\n  }, [status]);\n  const [chatMessages, setChatMessages] = useState([]);\n  const [localSpeaking, setLocalSpeaking] = useState(false);\n  const [remoteSpeaking, setRemoteSpeaking] = useState(false);\n  const [remoteMuted, setRemoteMuted] = useState(false);\n  const readyCountRef = useRef(0);\n\n  // --- Déclenche peer-ready dès que splash est terminé ---\n  useEffect(() => {\n    if (!start || !wsRef.current || wsRef.current.readyState !== 1) return;\n    wsRef.current.send(JSON.stringify({\n      type: \"peer-ready\"\n    }));\n  }, [start]);\n\n  // --- Micro local ---\n  useEffect(() => {\n    if (!start) return;\n    navigator.mediaDevices.getUserMedia({\n      audio: true\n    }).then(stream => {\n      localStreamRef.current = stream;\n      const audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n      const analyser = audioCtx.createAnalyser();\n      const src = audioCtx.createMediaStreamSource(stream);\n      src.connect(analyser);\n      analyser.fftSize = 256;\n      const dataArr = new Uint8Array(analyser.frequencyBinCount);\n      (function detect() {\n        analyser.getByteFrequencyData(dataArr);\n        setLocalSpeaking(dataArr.reduce((a, v) => a + v, 0) / dataArr.length > 30);\n        requestAnimationFrame(detect);\n      })();\n    }).catch(err => console.error(\"Microphone error\", err));\n  }, [start]);\n\n  // --- WebSocket setup ---\n  useEffect(() => {\n    const serverUrl = process.env.REACT_APP_SERVER_URL;\n    wsRef.current = new WebSocket(`${serverUrl.replace(/^http/, \"ws\")}?roomId=${callId}`);\n    wsRef.current.onopen = () => console.log(\"WS open\");\n    wsRef.current.onclose = () => console.log(\"WS closed\");\n    wsRef.current.onmessage = async ({\n      data\n    }) => {\n      let msg;\n      try {\n        msg = JSON.parse(data);\n      } catch {\n        return;\n      }\n      switch (msg.type) {\n        case \"peers-ready\":\n          readyCountRef.current = msg.readyCount;\n          if (msg.readyCount === 2 && statusRef.current === \"waiting\" && start && isInitiator) {\n            await initiateCall(true);\n          }\n          break;\n        case \"offer\":\n          if (!pcRef.current && start) await initiateCall(false);\n          await pcRef.current.setRemoteDescription(msg.offer);\n          const answer = await pcRef.current.createAnswer();\n          await pcRef.current.setLocalDescription(answer);\n          wsRef.current.send(JSON.stringify({\n            type: \"answer\",\n            answer\n          }));\n          break;\n        case \"answer\":\n          await pcRef.current.setRemoteDescription(msg.answer);\n          break;\n        case \"candidate\":\n          await pcRef.current.addIceCandidate(msg.candidate);\n          break;\n        case \"peer-left\":\n          setStatus(\"peer-left\");\n          break;\n        case \"call-ended\":\n          setStatus(\"ended\");\n          break;\n      }\n    };\n    return () => {\n      var _wsRef$current, _pcRef$current;\n      (_wsRef$current = wsRef.current) === null || _wsRef$current === void 0 ? void 0 : _wsRef$current.close();\n      (_pcRef$current = pcRef.current) === null || _pcRef$current === void 0 ? void 0 : _pcRef$current.close();\n    };\n  }, [callId, start, isInitiator]);\n\n  // --- Initialisation WebRTC ---\n  async function initiateCall(isOfferer) {\n    if (statusRef.current === \"connected\" || statusRef.current === \"connecting\") return;\n    setStatus(\"connecting\");\n    pcRef.current = new RTCPeerConnection({\n      iceServers: [{\n        urls: process.env.REACT_APP_STUN_SERVER\n      }]\n    });\n    if (!localStreamRef.current) {\n      localStreamRef.current = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n    }\n    localStreamRef.current.getTracks().forEach(track => pcRef.current.addTrack(track, localStreamRef.current));\n    pcRef.current.ontrack = ({\n      streams: [stream]\n    }) => {\n      if (remoteAudioRef.current) {\n        remoteAudioRef.current.srcObject = stream;\n        const playPromise = remoteAudioRef.current.play();\n        if (playPromise !== undefined) {\n          playPromise.catch(e => {\n            console.warn(\"Playback failed:\", e.message || e);\n          });\n        }\n      }\n      const rt = stream.getAudioTracks()[0];\n      if (rt) {\n        rt.onmute = () => setRemoteMuted(true);\n        rt.onunmute = () => setRemoteMuted(false);\n      }\n      const audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n      const analyser = audioCtx.createAnalyser();\n      const src = audioCtx.createMediaStreamSource(stream);\n      src.connect(analyser);\n      analyser.fftSize = 256;\n      const dataArr = new Uint8Array(analyser.frequencyBinCount);\n      (function detect() {\n        analyser.getByteFrequencyData(dataArr);\n        setRemoteSpeaking(dataArr.reduce((a, v) => a + v, 0) / dataArr.length > 30);\n        requestAnimationFrame(detect);\n      })();\n    };\n    if (isOfferer) {\n      dataChannelRef.current = pcRef.current.createDataChannel(\"chat\");\n      setupDataChannel();\n    } else {\n      pcRef.current.ondatachannel = ({\n        channel\n      }) => {\n        dataChannelRef.current = channel;\n        setupDataChannel();\n      };\n    }\n    pcRef.current.onicecandidate = ({\n      candidate\n    }) => {\n      if (candidate) {\n        wsRef.current.send(JSON.stringify({\n          type: \"candidate\",\n          candidate\n        }));\n      }\n    };\n    if (isOfferer) {\n      const offer = await pcRef.current.createOffer();\n      await pcRef.current.setLocalDescription(offer);\n      wsRef.current.send(JSON.stringify({\n        type: \"offer\",\n        offer\n      }));\n    }\n    setStatus(\"connected\");\n  }\n  function setupDataChannel() {\n    dataChannelRef.current.onopen = () => console.log(\"DataChannel open\");\n    dataChannelRef.current.onmessage = ({\n      data\n    }) => {\n      var _parsed;\n      let parsed;\n      try {\n        parsed = JSON.parse(data);\n      } catch {}\n      if (((_parsed = parsed) === null || _parsed === void 0 ? void 0 : _parsed.type) === \"mute\") {\n        setRemoteMuted(parsed.muted);\n      } else {\n        setChatMessages(prev => [...prev, {\n          sender: \"peer\",\n          text: data\n        }]);\n      }\n    };\n  }\n  function sendMessage(text) {\n    var _dataChannelRef$curre;\n    if (((_dataChannelRef$curre = dataChannelRef.current) === null || _dataChannelRef$curre === void 0 ? void 0 : _dataChannelRef$curre.readyState) === \"open\") {\n      dataChannelRef.current.send(text);\n      setChatMessages(prev => [...prev, {\n        sender: \"local\",\n        text\n      }]);\n    }\n  }\n  function toggleMute() {\n    var _localStreamRef$curre, _dataChannelRef$curre2;\n    const track = (_localStreamRef$curre = localStreamRef.current) === null || _localStreamRef$curre === void 0 ? void 0 : _localStreamRef$curre.getAudioTracks()[0];\n    if (!track) return;\n    track.enabled = !track.enabled;\n    if (!isInitiator && ((_dataChannelRef$curre2 = dataChannelRef.current) === null || _dataChannelRef$curre2 === void 0 ? void 0 : _dataChannelRef$curre2.readyState) === \"open\") {\n      dataChannelRef.current.send(JSON.stringify({\n        type: \"mute\",\n        muted: !track.enabled\n      }));\n    }\n  }\n  function hangUp() {\n    var _localStreamRef$curre2;\n    if (isInitiator) {\n      wsRef.current.send(JSON.stringify({\n        type: \"end-call\"\n      }));\n    }\n    setStatus(\"ended\");\n    (_localStreamRef$curre2 = localStreamRef.current) === null || _localStreamRef$curre2 === void 0 ? void 0 : _localStreamRef$curre2.getTracks().forEach(t => t.stop());\n    if (remoteAudioRef.current) remoteAudioRef.current.srcObject = null;\n    setTimeout(() => {\n      var _wsRef$current2, _pcRef$current2;\n      (_wsRef$current2 = wsRef.current) === null || _wsRef$current2 === void 0 ? void 0 : _wsRef$current2.close();\n      (_pcRef$current2 = pcRef.current) === null || _pcRef$current2 === void 0 ? void 0 : _pcRef$current2.close();\n    }, 100);\n  }\n  return {\n    remoteAudioRef,\n    status,\n    chatMessages,\n    sendMessage,\n    toggleMute,\n    hangUp,\n    localSpeaking,\n    remoteSpeaking,\n    remoteMuted\n  };\n}\n_s(useWebRTC, \"qGXxW0Ugams724H2JjFC2/K82pk=\");","map":{"version":3,"names":["useEffect","useRef","useState","useWebRTC","callId","start","isInitiator","_s","wsRef","pcRef","dataChannelRef","remoteAudioRef","localStreamRef","status","setStatus","statusRef","current","chatMessages","setChatMessages","localSpeaking","setLocalSpeaking","remoteSpeaking","setRemoteSpeaking","remoteMuted","setRemoteMuted","readyCountRef","readyState","send","JSON","stringify","type","navigator","mediaDevices","getUserMedia","audio","then","stream","audioCtx","window","AudioContext","webkitAudioContext","analyser","createAnalyser","src","createMediaStreamSource","connect","fftSize","dataArr","Uint8Array","frequencyBinCount","detect","getByteFrequencyData","reduce","a","v","length","requestAnimationFrame","catch","err","console","error","serverUrl","process","env","REACT_APP_SERVER_URL","WebSocket","replace","onopen","log","onclose","onmessage","data","msg","parse","readyCount","initiateCall","setRemoteDescription","offer","answer","createAnswer","setLocalDescription","addIceCandidate","candidate","_wsRef$current","_pcRef$current","close","isOfferer","RTCPeerConnection","iceServers","urls","REACT_APP_STUN_SERVER","getTracks","forEach","track","addTrack","ontrack","streams","srcObject","playPromise","play","undefined","e","warn","message","rt","getAudioTracks","onmute","onunmute","createDataChannel","setupDataChannel","ondatachannel","channel","onicecandidate","createOffer","_parsed","parsed","muted","prev","sender","text","sendMessage","_dataChannelRef$curre","toggleMute","_localStreamRef$curre","_dataChannelRef$curre2","enabled","hangUp","_localStreamRef$curre2","t","stop","setTimeout","_wsRef$current2","_pcRef$current2"],"sources":["/Users/theodiamant/Desktop/webrtc/client/src/hooks/useWebRTC.js"],"sourcesContent":["import { useEffect, useRef, useState } from \"react\";\n\nexport default function useWebRTC(\n  callId,\n  { start = true, isInitiator = false }\n) {\n  const wsRef = useRef();\n  const pcRef = useRef();\n  const dataChannelRef = useRef();\n  const remoteAudioRef = useRef();\n  const localStreamRef = useRef();\n  const [status, setStatus] = useState(\"waiting\");\n  const statusRef = useRef(status);\n  useEffect(() => {\n    statusRef.current = status;\n  }, [status]);\n\n  const [chatMessages, setChatMessages] = useState([]);\n  const [localSpeaking, setLocalSpeaking] = useState(false);\n  const [remoteSpeaking, setRemoteSpeaking] = useState(false);\n  const [remoteMuted, setRemoteMuted] = useState(false);\n  const readyCountRef = useRef(0);\n\n  // --- Déclenche peer-ready dès que splash est terminé ---\n  useEffect(() => {\n    if (!start || !wsRef.current || wsRef.current.readyState !== 1) return;\n    wsRef.current.send(JSON.stringify({ type: \"peer-ready\" }));\n  }, [start]);\n\n  // --- Micro local ---\n  useEffect(() => {\n    if (!start) return;\n    navigator.mediaDevices\n      .getUserMedia({ audio: true })\n      .then((stream) => {\n        localStreamRef.current = stream;\n        const audioCtx = new (window.AudioContext ||\n          window.webkitAudioContext)();\n        const analyser = audioCtx.createAnalyser();\n        const src = audioCtx.createMediaStreamSource(stream);\n        src.connect(analyser);\n        analyser.fftSize = 256;\n        const dataArr = new Uint8Array(analyser.frequencyBinCount);\n        (function detect() {\n          analyser.getByteFrequencyData(dataArr);\n          setLocalSpeaking(\n            dataArr.reduce((a, v) => a + v, 0) / dataArr.length > 30\n          );\n          requestAnimationFrame(detect);\n        })();\n      })\n      .catch((err) => console.error(\"Microphone error\", err));\n  }, [start]);\n\n  // --- WebSocket setup ---\n  useEffect(() => {\n    const serverUrl = process.env.REACT_APP_SERVER_URL;\n    wsRef.current = new WebSocket(\n      `${serverUrl.replace(/^http/, \"ws\")}?roomId=${callId}`\n    );\n    wsRef.current.onopen = () => console.log(\"WS open\");\n    wsRef.current.onclose = () => console.log(\"WS closed\");\n\n    wsRef.current.onmessage = async ({ data }) => {\n      let msg;\n      try {\n        msg = JSON.parse(data);\n      } catch {\n        return;\n      }\n\n      switch (msg.type) {\n        case \"peers-ready\":\n          readyCountRef.current = msg.readyCount;\n          if (\n            msg.readyCount === 2 &&\n            statusRef.current === \"waiting\" &&\n            start &&\n            isInitiator\n          ) {\n            await initiateCall(true);\n          }\n          break;\n\n        case \"offer\":\n          if (!pcRef.current && start) await initiateCall(false);\n          await pcRef.current.setRemoteDescription(msg.offer);\n          const answer = await pcRef.current.createAnswer();\n          await pcRef.current.setLocalDescription(answer);\n          wsRef.current.send(JSON.stringify({ type: \"answer\", answer }));\n          break;\n\n        case \"answer\":\n          await pcRef.current.setRemoteDescription(msg.answer);\n          break;\n\n        case \"candidate\":\n          await pcRef.current.addIceCandidate(msg.candidate);\n          break;\n\n        case \"peer-left\":\n          setStatus(\"peer-left\");\n          break;\n\n        case \"call-ended\":\n          setStatus(\"ended\");\n          break;\n      }\n    };\n\n    return () => {\n      wsRef.current?.close();\n      pcRef.current?.close();\n    };\n  }, [callId, start, isInitiator]);\n\n  // --- Initialisation WebRTC ---\n  async function initiateCall(isOfferer) {\n    if (statusRef.current === \"connected\" || statusRef.current === \"connecting\")\n      return;\n    setStatus(\"connecting\");\n\n    pcRef.current = new RTCPeerConnection({\n      iceServers: [{ urls: process.env.REACT_APP_STUN_SERVER }],\n    });\n\n    if (!localStreamRef.current) {\n      localStreamRef.current = await navigator.mediaDevices.getUserMedia({\n        audio: true,\n      });\n    }\n\n    localStreamRef.current\n      .getTracks()\n      .forEach((track) =>\n        pcRef.current.addTrack(track, localStreamRef.current)\n      );\n\n    pcRef.current.ontrack = ({ streams: [stream] }) => {\n      if (remoteAudioRef.current) {\n        remoteAudioRef.current.srcObject = stream;\n        const playPromise = remoteAudioRef.current.play();\n        if (playPromise !== undefined) {\n          playPromise.catch((e) => {\n            console.warn(\"Playback failed:\", e.message || e);\n          });\n        }\n      }\n\n      const rt = stream.getAudioTracks()[0];\n      if (rt) {\n        rt.onmute = () => setRemoteMuted(true);\n        rt.onunmute = () => setRemoteMuted(false);\n      }\n\n      const audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n      const analyser = audioCtx.createAnalyser();\n      const src = audioCtx.createMediaStreamSource(stream);\n      src.connect(analyser);\n      analyser.fftSize = 256;\n      const dataArr = new Uint8Array(analyser.frequencyBinCount);\n      (function detect() {\n        analyser.getByteFrequencyData(dataArr);\n        setRemoteSpeaking(\n          dataArr.reduce((a, v) => a + v, 0) / dataArr.length > 30\n        );\n        requestAnimationFrame(detect);\n      })();\n    };\n\n    if (isOfferer) {\n      dataChannelRef.current = pcRef.current.createDataChannel(\"chat\");\n      setupDataChannel();\n    } else {\n      pcRef.current.ondatachannel = ({ channel }) => {\n        dataChannelRef.current = channel;\n        setupDataChannel();\n      };\n    }\n\n    pcRef.current.onicecandidate = ({ candidate }) => {\n      if (candidate) {\n        wsRef.current.send(JSON.stringify({ type: \"candidate\", candidate }));\n      }\n    };\n\n    if (isOfferer) {\n      const offer = await pcRef.current.createOffer();\n      await pcRef.current.setLocalDescription(offer);\n      wsRef.current.send(JSON.stringify({ type: \"offer\", offer }));\n    }\n\n    setStatus(\"connected\");\n  }\n\n  function setupDataChannel() {\n    dataChannelRef.current.onopen = () => console.log(\"DataChannel open\");\n    dataChannelRef.current.onmessage = ({ data }) => {\n      let parsed;\n      try {\n        parsed = JSON.parse(data);\n      } catch {}\n      if (parsed?.type === \"mute\") {\n        setRemoteMuted(parsed.muted);\n      } else {\n        setChatMessages((prev) => [...prev, { sender: \"peer\", text: data }]);\n      }\n    };\n  }\n\n  function sendMessage(text) {\n    if (dataChannelRef.current?.readyState === \"open\") {\n      dataChannelRef.current.send(text);\n      setChatMessages((prev) => [...prev, { sender: \"local\", text }]);\n    }\n  }\n\n  function toggleMute() {\n    const track = localStreamRef.current?.getAudioTracks()[0];\n    if (!track) return;\n    track.enabled = !track.enabled;\n    if (!isInitiator && dataChannelRef.current?.readyState === \"open\") {\n      dataChannelRef.current.send(\n        JSON.stringify({ type: \"mute\", muted: !track.enabled })\n      );\n    }\n  }\n\n  function hangUp() {\n    if (isInitiator) {\n      wsRef.current.send(JSON.stringify({ type: \"end-call\" }));\n    }\n    setStatus(\"ended\");\n    localStreamRef.current?.getTracks().forEach((t) => t.stop());\n    if (remoteAudioRef.current) remoteAudioRef.current.srcObject = null;\n    setTimeout(() => {\n      wsRef.current?.close();\n      pcRef.current?.close();\n    }, 100);\n  }\n\n  return {\n    remoteAudioRef,\n    status,\n    chatMessages,\n    sendMessage,\n    toggleMute,\n    hangUp,\n    localSpeaking,\n    remoteSpeaking,\n    remoteMuted,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
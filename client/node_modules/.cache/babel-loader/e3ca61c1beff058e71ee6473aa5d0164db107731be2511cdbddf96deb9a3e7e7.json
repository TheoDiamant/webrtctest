{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useWebRTC.js\nimport { useEffect, useRef, useState } from \"react\";\nexport default function useWebRTC(callId, {\n  timeout = 30000,\n  start = true,\n  isInitiator = false\n}) {\n  _s();\n  // --- status + ref so our onmessage callback sees the current status ---\n  const [status, setStatus] = useState(\"waiting\");\n  const statusRef = useRef(status);\n  useEffect(() => {\n    statusRef.current = status;\n  }, [status]);\n  const wsRef = useRef();\n  const pcRef = useRef();\n  const dataChannelRef = useRef();\n  const remoteAudioRef = useRef();\n  const localStreamRef = useRef();\n  const [chatMessages, setChatMessages] = useState([]);\n  const [localSpeaking, setLocalSpeaking] = useState(false);\n  const [remoteSpeaking, setRemoteSpeaking] = useState(false);\n  const [remoteMuted, setRemoteMuted] = useState(false);\n  const [isChannelOpen, setIsChannelOpen] = useState(false);\n  useEffect(() => {\n    if (!start) return;\n\n    // 1) open WebSocket\n    const serverUrl = process.env.REACT_APP_SERVER_URL;\n    wsRef.current = new WebSocket(`${serverUrl.replace(/^http/, \"ws\")}?roomId=${callId}`);\n    wsRef.current.onopen = () => console.log(\"WS open\");\n    wsRef.current.onclose = () => console.log(\"WS closed\");\n\n    // 2) handle incoming signaling\n    wsRef.current.onmessage = async ({\n      data\n    }) => {\n      let msg;\n      try {\n        msg = JSON.parse(typeof data === \"string\" ? data : data.toString());\n      } catch {\n        return;\n      }\n      switch (msg.type) {\n        case \"room-status\":\n          // only once, when peers goes 2, and weâ€™re still in \"waiting\"\n          if (msg.peers === 2 && statusRef.current === \"waiting\") {\n            await initiateCall(isInitiator);\n          }\n          break;\n        case \"offer\":\n          await pcRef.current.setRemoteDescription(msg.offer);\n          {\n            const answer = await pcRef.current.createAnswer();\n            await pcRef.current.setLocalDescription(answer);\n            wsRef.current.send(JSON.stringify({\n              type: \"answer\",\n              answer\n            }));\n          }\n          break;\n        case \"answer\":\n          await pcRef.current.setRemoteDescription(msg.answer);\n          break;\n        case \"candidate\":\n          await pcRef.current.addIceCandidate(msg.candidate);\n          break;\n        case \"peer-left\":\n          setStatus(\"peer-left\");\n          break;\n        case \"call-ended\":\n          setStatus(\"ended\");\n          break;\n      }\n    };\n\n    // 3) set a timeout in case nothing happens\n    const timer = setTimeout(() => {\n      if (statusRef.current !== \"connected\") setStatus(\"timeout\");\n    }, timeout);\n    return () => {\n      var _wsRef$current, _pcRef$current;\n      clearTimeout(timer);\n      (_wsRef$current = wsRef.current) === null || _wsRef$current === void 0 ? void 0 : _wsRef$current.close();\n      (_pcRef$current = pcRef.current) === null || _pcRef$current === void 0 ? void 0 : _pcRef$current.close();\n    };\n    // <-- Note: status has been removed from deps\n  }, [callId, start, isInitiator]);\n\n  // --- sets up PeerConnection, local & remote audio, data channels, etc. ---\n  async function initiateCall(isInitiator) {\n    setStatus(\"connecting\");\n    pcRef.current = new RTCPeerConnection({\n      iceServers: [{\n        urls: process.env.REACT_APP_STUN_SERVER\n      }]\n    });\n\n    // get local audio + start speech detection...\n    localStreamRef.current = await navigator.mediaDevices.getUserMedia({\n      audio: true\n    });\n    const audioCtxL = new (window.AudioContext || window.webkitAudioContext)();\n    const analyserL = audioCtxL.createAnalyser();\n    const srcL = audioCtxL.createMediaStreamSource(localStreamRef.current);\n    srcL.connect(analyserL);\n    analyserL.fftSize = 256;\n    const dataL = new Uint8Array(analyserL.frequencyBinCount);\n    (function detectLocal() {\n      analyserL.getByteFrequencyData(dataL);\n      setLocalSpeaking(dataL.reduce((sum, v) => sum + v, 0) / dataL.length > 30);\n      requestAnimationFrame(detectLocal);\n    })();\n\n    // add local tracks\n    localStreamRef.current.getTracks().forEach(t => pcRef.current.addTrack(t, localStreamRef.current));\n\n    // on first remote track: attach audio, detect remote speech & mute\n    pcRef.current.ontrack = ({\n      streams: [stream]\n    }) => {\n      if (remoteAudioRef.current) remoteAudioRef.current.srcObject = stream;\n      const rt = stream.getAudioTracks()[0];\n      if (rt) {\n        rt.onmute = () => setRemoteMuted(true);\n        rt.onunmute = () => setRemoteMuted(false);\n      }\n      if (!remoteSpeaking) {\n        const audioCtxR = new (window.AudioContext || window.webkitAudioContext)();\n        const analyserR = audioCtxR.createAnalyser();\n        const srcR = audioCtxR.createMediaStreamSource(stream);\n        srcR.connect(analyserR);\n        analyserR.fftSize = 256;\n        const dataR = new Uint8Array(analyserR.frequencyBinCount);\n        (function detectRemote() {\n          analyserR.getByteFrequencyData(dataR);\n          setRemoteSpeaking(dataR.reduce((sum, v) => sum + v, 0) / dataR.length > 30);\n          requestAnimationFrame(detectRemote);\n        })();\n      }\n    };\n\n    // data channel setup\n    if (isInitiator) {\n      dataChannelRef.current = pcRef.current.createDataChannel(\"chat\");\n      setupDataChannel();\n    } else {\n      pcRef.current.ondatachannel = ({\n        channel\n      }) => {\n        dataChannelRef.current = channel;\n        setupDataChannel();\n      };\n    }\n    pcRef.current.onicecandidate = ({\n      candidate\n    }) => {\n      if (candidate) wsRef.current.send(JSON.stringify({\n        type: \"candidate\",\n        candidate\n      }));\n    };\n    if (isInitiator) {\n      const offer = await pcRef.current.createOffer();\n      await pcRef.current.setLocalDescription(offer);\n      wsRef.current.send(JSON.stringify({\n        type: \"offer\",\n        offer\n      }));\n    }\n    setStatus(\"connected\");\n  }\n  function setupDataChannel() {\n    dataChannelRef.current.onopen = () => {\n      console.log(\"DataChannel open\");\n      setIsChannelOpen(true);\n    };\n    dataChannelRef.current.onclose = () => {\n      console.log(\"DataChannel closed\");\n      setIsChannelOpen(false);\n    };\n    dataChannelRef.current.onmessage = ({\n      data\n    }) => setChatMessages(prev => [...prev, {\n      sender: \"peer\",\n      text: data\n    }]);\n  }\n  function sendMessage(text) {\n    if (isChannelOpen) {\n      // le channel est bien ouvert\n      dataChannelRef.current.send(text);\n      setChatMessages(prev => [...prev, {\n        sender: \"local\",\n        text\n      }]);\n    } else {\n      console.warn(\"Envoi impossible : DataChannel pas encore open\", text);\n    }\n  }\n  function toggleMute() {\n    var _localStreamRef$curre;\n    const t = (_localStreamRef$curre = localStreamRef.current) === null || _localStreamRef$curre === void 0 ? void 0 : _localStreamRef$curre.getAudioTracks()[0];\n    if (t) t.enabled = !t;\n  }\n  function hangUp() {\n    var _localStreamRef$curre2;\n    if (isInitiator) {\n      wsRef.current.send(JSON.stringify({\n        type: \"end-call\"\n      }));\n    }\n    setStatus(\"ended\");\n    (_localStreamRef$curre2 = localStreamRef.current) === null || _localStreamRef$curre2 === void 0 ? void 0 : _localStreamRef$curre2.getTracks().forEach(t => t.stop());\n    if (remoteAudioRef.current) remoteAudioRef.current.srcObject = null;\n    setTimeout(() => {\n      var _wsRef$current2, _pcRef$current2;\n      (_wsRef$current2 = wsRef.current) === null || _wsRef$current2 === void 0 ? void 0 : _wsRef$current2.close();\n      (_pcRef$current2 = pcRef.current) === null || _pcRef$current2 === void 0 ? void 0 : _pcRef$current2.close();\n    }, 100);\n  }\n  return {\n    remoteAudioRef,\n    status,\n    chatMessages,\n    sendMessage,\n    toggleMute,\n    hangUp,\n    localSpeaking,\n    remoteSpeaking,\n    remoteMuted,\n    isChannelOpen\n  };\n}\n_s(useWebRTC, \"57q8djH89EADKyJ4WZAcEuUFvQc=\");","map":{"version":3,"names":["useEffect","useRef","useState","useWebRTC","callId","timeout","start","isInitiator","_s","status","setStatus","statusRef","current","wsRef","pcRef","dataChannelRef","remoteAudioRef","localStreamRef","chatMessages","setChatMessages","localSpeaking","setLocalSpeaking","remoteSpeaking","setRemoteSpeaking","remoteMuted","setRemoteMuted","isChannelOpen","setIsChannelOpen","serverUrl","process","env","REACT_APP_SERVER_URL","WebSocket","replace","onopen","console","log","onclose","onmessage","data","msg","JSON","parse","toString","type","peers","initiateCall","setRemoteDescription","offer","answer","createAnswer","setLocalDescription","send","stringify","addIceCandidate","candidate","timer","setTimeout","_wsRef$current","_pcRef$current","clearTimeout","close","RTCPeerConnection","iceServers","urls","REACT_APP_STUN_SERVER","navigator","mediaDevices","getUserMedia","audio","audioCtxL","window","AudioContext","webkitAudioContext","analyserL","createAnalyser","srcL","createMediaStreamSource","connect","fftSize","dataL","Uint8Array","frequencyBinCount","detectLocal","getByteFrequencyData","reduce","sum","v","length","requestAnimationFrame","getTracks","forEach","t","addTrack","ontrack","streams","stream","srcObject","rt","getAudioTracks","onmute","onunmute","audioCtxR","analyserR","srcR","dataR","detectRemote","createDataChannel","setupDataChannel","ondatachannel","channel","onicecandidate","createOffer","prev","sender","text","sendMessage","warn","toggleMute","_localStreamRef$curre","enabled","hangUp","_localStreamRef$curre2","stop","_wsRef$current2","_pcRef$current2"],"sources":["/Users/theodiamant/Desktop/webrtc/client/src/hooks/useWebRTC.js"],"sourcesContent":["// src/hooks/useWebRTC.js\nimport { useEffect, useRef, useState } from \"react\";\n\nexport default function useWebRTC(\n  callId,\n  { timeout = 30000, start = true, isInitiator = false }\n) {\n  // --- status + ref so our onmessage callback sees the current status ---\n  const [status, setStatus] = useState(\"waiting\");\n  const statusRef = useRef(status);\n  useEffect(() => {\n    statusRef.current = status;\n  }, [status]);\n\n  const wsRef = useRef();\n  const pcRef = useRef();\n  const dataChannelRef = useRef();\n  const remoteAudioRef = useRef();\n  const localStreamRef = useRef();\n\n  const [chatMessages, setChatMessages] = useState([]);\n  const [localSpeaking, setLocalSpeaking] = useState(false);\n  const [remoteSpeaking, setRemoteSpeaking] = useState(false);\n  const [remoteMuted, setRemoteMuted] = useState(false);\n  const [isChannelOpen, setIsChannelOpen] = useState(false);\n\n  useEffect(() => {\n    if (!start) return;\n\n    // 1) open WebSocket\n    const serverUrl = process.env.REACT_APP_SERVER_URL;\n    wsRef.current = new WebSocket(\n      `${serverUrl.replace(/^http/, \"ws\")}?roomId=${callId}`\n    );\n    wsRef.current.onopen = () => console.log(\"WS open\");\n    wsRef.current.onclose = () => console.log(\"WS closed\");\n\n    // 2) handle incoming signaling\n    wsRef.current.onmessage = async ({ data }) => {\n      let msg;\n      try {\n        msg = JSON.parse(typeof data === \"string\" ? data : data.toString());\n      } catch {\n        return;\n      }\n\n      switch (msg.type) {\n        case \"room-status\":\n          // only once, when peers goes 2, and weâ€™re still in \"waiting\"\n          if (msg.peers === 2 && statusRef.current === \"waiting\") {\n            await initiateCall(isInitiator);\n          }\n          break;\n\n        case \"offer\":\n          await pcRef.current.setRemoteDescription(msg.offer);\n          {\n            const answer = await pcRef.current.createAnswer();\n            await pcRef.current.setLocalDescription(answer);\n            wsRef.current.send(JSON.stringify({ type: \"answer\", answer }));\n          }\n          break;\n\n        case \"answer\":\n          await pcRef.current.setRemoteDescription(msg.answer);\n          break;\n\n        case \"candidate\":\n          await pcRef.current.addIceCandidate(msg.candidate);\n          break;\n\n        case \"peer-left\":\n          setStatus(\"peer-left\");\n          break;\n\n        case \"call-ended\":\n          setStatus(\"ended\");\n          break;\n      }\n    };\n\n    // 3) set a timeout in case nothing happens\n    const timer = setTimeout(() => {\n      if (statusRef.current !== \"connected\") setStatus(\"timeout\");\n    }, timeout);\n\n    return () => {\n      clearTimeout(timer);\n      wsRef.current?.close();\n      pcRef.current?.close();\n    };\n    // <-- Note: status has been removed from deps\n  }, [callId, start, isInitiator]);\n\n  // --- sets up PeerConnection, local & remote audio, data channels, etc. ---\n  async function initiateCall(isInitiator) {\n    setStatus(\"connecting\");\n    pcRef.current = new RTCPeerConnection({\n      iceServers: [{ urls: process.env.REACT_APP_STUN_SERVER }],\n    });\n\n    // get local audio + start speech detection...\n    localStreamRef.current = await navigator.mediaDevices.getUserMedia({\n      audio: true,\n    });\n    const audioCtxL = new (window.AudioContext || window.webkitAudioContext)();\n    const analyserL = audioCtxL.createAnalyser();\n    const srcL = audioCtxL.createMediaStreamSource(localStreamRef.current);\n    srcL.connect(analyserL);\n    analyserL.fftSize = 256;\n    const dataL = new Uint8Array(analyserL.frequencyBinCount);\n    (function detectLocal() {\n      analyserL.getByteFrequencyData(dataL);\n      setLocalSpeaking(\n        dataL.reduce((sum, v) => sum + v, 0) / dataL.length > 30\n      );\n      requestAnimationFrame(detectLocal);\n    })();\n\n    // add local tracks\n    localStreamRef.current\n      .getTracks()\n      .forEach((t) => pcRef.current.addTrack(t, localStreamRef.current));\n\n    // on first remote track: attach audio, detect remote speech & mute\n    pcRef.current.ontrack = ({ streams: [stream] }) => {\n      if (remoteAudioRef.current) remoteAudioRef.current.srcObject = stream;\n\n      const rt = stream.getAudioTracks()[0];\n      if (rt) {\n        rt.onmute = () => setRemoteMuted(true);\n        rt.onunmute = () => setRemoteMuted(false);\n      }\n\n      if (!remoteSpeaking) {\n        const audioCtxR = new (window.AudioContext ||\n          window.webkitAudioContext)();\n        const analyserR = audioCtxR.createAnalyser();\n        const srcR = audioCtxR.createMediaStreamSource(stream);\n        srcR.connect(analyserR);\n        analyserR.fftSize = 256;\n        const dataR = new Uint8Array(analyserR.frequencyBinCount);\n        (function detectRemote() {\n          analyserR.getByteFrequencyData(dataR);\n          setRemoteSpeaking(\n            dataR.reduce((sum, v) => sum + v, 0) / dataR.length > 30\n          );\n          requestAnimationFrame(detectRemote);\n        })();\n      }\n    };\n\n    // data channel setup\n    if (isInitiator) {\n      dataChannelRef.current = pcRef.current.createDataChannel(\"chat\");\n      setupDataChannel();\n    } else {\n      pcRef.current.ondatachannel = ({ channel }) => {\n        dataChannelRef.current = channel;\n        setupDataChannel();\n      };\n    }\n\n    pcRef.current.onicecandidate = ({ candidate }) => {\n      if (candidate)\n        wsRef.current.send(JSON.stringify({ type: \"candidate\", candidate }));\n    };\n\n    if (isInitiator) {\n      const offer = await pcRef.current.createOffer();\n      await pcRef.current.setLocalDescription(offer);\n      wsRef.current.send(JSON.stringify({ type: \"offer\", offer }));\n    }\n\n    setStatus(\"connected\");\n  }\n\n  function setupDataChannel() {\n    dataChannelRef.current.onopen = () => {\n      console.log(\"DataChannel open\");\n      setIsChannelOpen(true);\n    };\n    dataChannelRef.current.onclose = () => {\n      console.log(\"DataChannel closed\");\n      setIsChannelOpen(false);\n    };\n    dataChannelRef.current.onmessage = ({ data }) =>\n      setChatMessages((prev) => [...prev, { sender: \"peer\", text: data }]);\n  }\n\n  function sendMessage(text) {\n    if (isChannelOpen) {\n      // le channel est bien ouvert\n      dataChannelRef.current.send(text);\n      setChatMessages((prev) => [...prev, { sender: \"local\", text }]);\n    } else {\n      console.warn(\"Envoi impossible : DataChannel pas encore open\", text);\n    }\n  }\n\n  function toggleMute() {\n    const t = localStreamRef.current?.getAudioTracks()[0];\n    if (t) t.enabled = !t;\n  }\n\n  function hangUp() {\n    if (isInitiator) {\n      wsRef.current.send(JSON.stringify({ type: \"end-call\" }));\n    }\n    setStatus(\"ended\");\n    localStreamRef.current?.getTracks().forEach((t) => t.stop());\n    if (remoteAudioRef.current) remoteAudioRef.current.srcObject = null;\n    setTimeout(() => {\n      wsRef.current?.close();\n      pcRef.current?.close();\n    }, 100);\n  }\n\n  return {\n    remoteAudioRef,\n    status,\n    chatMessages,\n    sendMessage,\n    toggleMute,\n    hangUp,\n    localSpeaking,\n    remoteSpeaking,\n    remoteMuted,\n    isChannelOpen,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
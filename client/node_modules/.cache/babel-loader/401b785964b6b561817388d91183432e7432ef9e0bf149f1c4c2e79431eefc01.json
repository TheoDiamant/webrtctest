{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useWebRTC.js\nimport { useEffect, useRef, useState } from \"react\";\nexport default function useWebRTC(callId, {\n  timeout = 30000,\n  start = true,\n  isInitiator = false\n}) {\n  _s();\n  const [status, setStatus] = useState(\"waiting\");\n  const statusRef = useRef(status);\n  useEffect(() => {\n    statusRef.current = status;\n  }, [status]);\n  const wsRef = useRef();\n  const pcRef = useRef();\n  const dataChannelRef = useRef();\n  const remoteAudioRef = useRef();\n  const localStreamRef = useRef();\n  const [chatMessages, setChatMessages] = useState([]);\n  const [localSpeaking, setLocalSpeaking] = useState(false);\n  const [remoteSpeaking, setRemoteSpeaking] = useState(false);\n  const [remoteMuted, setRemoteMuted] = useState(false);\n  const [isChannelOpen, setIsChannelOpen] = useState(false);\n\n  // 1) Signaling via WebSocket\n  // 1) Signaling via WebSocket\n  useEffect(() => {\n    if (!start) return;\n    const serverUrl = process.env.REACT_APP_SERVER_URL;\n    wsRef.current = new WebSocket(`${serverUrl.replace(/^http/, \"ws\")}?roomId=${callId}`);\n    wsRef.current.onopen = () => console.log(\"%cWS open\", \"color:green;font-weight:bold;\", new Date());\n    wsRef.current.onclose = () => console.log(\"%cWS closed\", \"color:gray;font-weight:bold;\", new Date());\n    wsRef.current.onmessage = async ({\n      data\n    }) => {\n      // Blob → texte\n      let text = data instanceof Blob ? await data.text() : data;\n      console.log(\"%cWS ←\", \"color:purple;\", text);\n\n      // JSON.parse\n      let msg;\n      try {\n        msg = JSON.parse(text);\n      } catch {\n        console.warn(\"WS: message non JSON reçu\", text);\n        return;\n      }\n      console.log(\"%cSignal→\", \"color:blue;\", msg.type, msg);\n      switch (msg.type) {\n        case \"room-status\":\n          console.log(\"room-status:\", msg.peers);\n          if (msg.peers === 1) {\n            // il ne reste plus que vous : l’invité est parti\n            setStatus(\"peer-left\");\n          } else if (msg.peers === 2) {\n            // l’invité vient de (re)venir\n            // on relance la nego si on n’est pas déjà connecté\n            if (statusRef.current !== \"connected\") {\n              console.log(\"Invité (re)joint, relancement de la connexion\");\n              await initiateCall(isInitiator);\n            }\n          }\n          break;\n        case \"offer\":\n          console.log(\"received OFFER\", msg.offer);\n          await pcRef.current.setRemoteDescription(msg.offer);\n          {\n            const answer = await pcRef.current.createAnswer();\n            await pcRef.current.setLocalDescription(answer);\n            wsRef.current.send(JSON.stringify({\n              type: \"answer\",\n              answer\n            }));\n          }\n          break;\n        case \"answer\":\n          console.log(\"received ANSWER\", msg.answer);\n          await pcRef.current.setRemoteDescription(msg.answer);\n          break;\n        case \"candidate\":\n          console.log(\"received CANDIDATE\", msg.candidate);\n          await pcRef.current.addIceCandidate(msg.candidate);\n          break;\n        case \"peer-left\":\n          console.log(\"peer-left\");\n          setStatus(\"peer-left\");\n          break;\n        case \"call-ended\":\n          console.log(\"call-ended\");\n          setStatus(\"ended\");\n          break;\n        default:\n          break;\n      }\n    };\n\n    // cleanup : on ferme juste les connexions\n    return () => {\n      var _wsRef$current, _pcRef$current;\n      (_wsRef$current = wsRef.current) === null || _wsRef$current === void 0 ? void 0 : _wsRef$current.close();\n      (_pcRef$current = pcRef.current) === null || _pcRef$current === void 0 ? void 0 : _pcRef$current.close();\n    };\n  }, [callId, start, isInitiator]);\n\n  // 2) WebRTC peer connection & media\n  async function initiateCall(isInitiator) {\n    console.log(\"%c⏱ initiateCall()\", \"color:orange;\", {\n      isInitiator\n    });\n    setStatus(\"connecting\");\n    pcRef.current = new RTCPeerConnection({\n      iceServers: [{\n        urls: process.env.REACT_APP_STUN_SERVER\n      }]\n    });\n    pcRef.current.onconnectionstatechange = () => console.log(\"PC connectionState:\", pcRef.current.connectionState);\n    pcRef.current.oniceconnectionstatechange = () => console.log(\"PC iceConnectionState:\", pcRef.current.iceConnectionState);\n\n    // 2.1) récupérer l’audio local\n    localStreamRef.current = await navigator.mediaDevices.getUserMedia({\n      audio: true\n    });\n    console.log(\"got localStream:\", localStreamRef.current);\n\n    // 2.2) détection de voix locale (animation)\n    const audioCtxL = new (window.AudioContext || window.webkitAudioContext)();\n    const analyserL = audioCtxL.createAnalyser();\n    const srcL = audioCtxL.createMediaStreamSource(localStreamRef.current);\n    srcL.connect(analyserL);\n    analyserL.fftSize = 256;\n    const dataL = new Uint8Array(analyserL.frequencyBinCount);\n    (function detectLocal() {\n      analyserL.getByteFrequencyData(dataL);\n      setLocalSpeaking(dataL.reduce((sum, v) => sum + v, 0) / dataL.length > 30);\n      requestAnimationFrame(detectLocal);\n    })();\n\n    // 2.3) ajout des pistes au PeerConnection\n    localStreamRef.current.getTracks().forEach(t => {\n      console.log(\"addTrack:\", t.kind);\n      pcRef.current.addTrack(t, localStreamRef.current);\n    });\n\n    // 2.4) réception et affichage de l’audio distant\n    pcRef.current.ontrack = ({\n      streams: [stream]\n    }) => {\n      console.log(\"%cPC ontrack →\", \"color:teal;\", stream);\n      if (remoteAudioRef.current) remoteAudioRef.current.srcObject = stream;\n      const rt = stream.getAudioTracks()[0];\n      if (rt) {\n        rt.onmute = () => setRemoteMuted(true);\n        rt.onunmute = () => setRemoteMuted(false);\n      }\n      if (!remoteSpeaking) {\n        const audioCtxR = new (window.AudioContext || window.webkitAudioContext)();\n        const analyserR = audioCtxR.createAnalyser();\n        const srcR = audioCtxR.createMediaStreamSource(stream);\n        srcR.connect(analyserR);\n        analyserR.fftSize = 256;\n        const dataR = new Uint8Array(analyserR.frequencyBinCount);\n        (function detectRemote() {\n          analyserR.getByteFrequencyData(dataR);\n          setRemoteSpeaking(dataR.reduce((sum, v) => sum + v, 0) / dataR.length > 30);\n          requestAnimationFrame(detectRemote);\n        })();\n      }\n    };\n\n    // 3) DataChannel pour le chat\n    if (isInitiator) {\n      console.log(\"creating DataChannel as initiator\");\n      dataChannelRef.current = pcRef.current.createDataChannel(\"chat\");\n      setupDataChannel();\n    } else {\n      pcRef.current.ondatachannel = ({\n        channel\n      }) => {\n        console.log(\"ondatachannel → received channel\", channel);\n        dataChannelRef.current = channel;\n        setupDataChannel();\n      };\n    }\n\n    // 4) échange ICE\n    pcRef.current.onicecandidate = ({\n      candidate\n    }) => {\n      console.log(\"onicecandidate → send\", candidate);\n      if (candidate) {\n        wsRef.current.send(JSON.stringify({\n          type: \"candidate\",\n          candidate\n        }));\n      }\n    };\n\n    // 5) negotiation offer/answer\n    if (isInitiator) {\n      const offer = await pcRef.current.createOffer();\n      console.log(\"created OFFER\", offer);\n      await pcRef.current.setLocalDescription(offer);\n      wsRef.current.send(JSON.stringify({\n        type: \"offer\",\n        offer\n      }));\n    }\n    setStatus(\"connected\");\n    console.log(\"status → connected\");\n  }\n  function setupDataChannel() {\n    dataChannelRef.current.onopen = () => {\n      console.log(\"%cDataChannel open\", \"color:green;\", dataChannelRef.current);\n      setIsChannelOpen(true);\n    };\n    dataChannelRef.current.onclose = () => {\n      console.log(\"%cDataChannel closed\", \"color:red;\", dataChannelRef.current);\n      setIsChannelOpen(false);\n    };\n    dataChannelRef.current.onmessage = ({\n      data\n    }) => {\n      console.log(\"%cDataChannel ← peer:\", \"color:purple;\", data);\n      setChatMessages(prev => [...prev, {\n        sender: \"peer\",\n        text: data\n      }]);\n    };\n  }\n\n  // Envoi d’un message (chat)\n  function sendMessage(text) {\n    var _dataChannelRef$curre, _dataChannelRef$curre2;\n    console.log(\"sendMessage() →\", text, \"DCstate:\", (_dataChannelRef$curre = dataChannelRef.current) === null || _dataChannelRef$curre === void 0 ? void 0 : _dataChannelRef$curre.readyState);\n    setChatMessages(prev => [...prev, {\n      sender: \"local\",\n      text\n    }]);\n    if (((_dataChannelRef$curre2 = dataChannelRef.current) === null || _dataChannelRef$curre2 === void 0 ? void 0 : _dataChannelRef$curre2.readyState) === \"open\") {\n      dataChannelRef.current.send(text);\n    } else {\n      console.warn(\"DataChannel pas open, message pas envoyé au pair :\", text);\n    }\n  }\n  function toggleMute() {\n    var _localStreamRef$curre;\n    const t = (_localStreamRef$curre = localStreamRef.current) === null || _localStreamRef$curre === void 0 ? void 0 : _localStreamRef$curre.getAudioTracks()[0];\n    if (t) t.enabled = !t;\n  }\n  function hangUp() {\n    var _localStreamRef$curre2;\n    if (isInitiator) {\n      wsRef.current.send(JSON.stringify({\n        type: \"end-call\"\n      }));\n    }\n    console.log(\"hangUp()\");\n    setStatus(\"ended\");\n    (_localStreamRef$curre2 = localStreamRef.current) === null || _localStreamRef$curre2 === void 0 ? void 0 : _localStreamRef$curre2.getTracks().forEach(t => t.stop());\n    if (remoteAudioRef.current) remoteAudioRef.current.srcObject = null;\n    setTimeout(() => {\n      var _wsRef$current2, _pcRef$current2;\n      (_wsRef$current2 = wsRef.current) === null || _wsRef$current2 === void 0 ? void 0 : _wsRef$current2.close();\n      (_pcRef$current2 = pcRef.current) === null || _pcRef$current2 === void 0 ? void 0 : _pcRef$current2.close();\n    }, 100);\n  }\n  return {\n    remoteAudioRef,\n    status,\n    chatMessages,\n    sendMessage,\n    toggleMute,\n    hangUp,\n    localSpeaking,\n    remoteSpeaking,\n    remoteMuted,\n    isChannelOpen\n  };\n}\n_s(useWebRTC, \"57q8djH89EADKyJ4WZAcEuUFvQc=\");","map":{"version":3,"names":["useEffect","useRef","useState","useWebRTC","callId","timeout","start","isInitiator","_s","status","setStatus","statusRef","current","wsRef","pcRef","dataChannelRef","remoteAudioRef","localStreamRef","chatMessages","setChatMessages","localSpeaking","setLocalSpeaking","remoteSpeaking","setRemoteSpeaking","remoteMuted","setRemoteMuted","isChannelOpen","setIsChannelOpen","serverUrl","process","env","REACT_APP_SERVER_URL","WebSocket","replace","onopen","console","log","Date","onclose","onmessage","data","text","Blob","msg","JSON","parse","warn","type","peers","initiateCall","offer","setRemoteDescription","answer","createAnswer","setLocalDescription","send","stringify","candidate","addIceCandidate","_wsRef$current","_pcRef$current","close","RTCPeerConnection","iceServers","urls","REACT_APP_STUN_SERVER","onconnectionstatechange","connectionState","oniceconnectionstatechange","iceConnectionState","navigator","mediaDevices","getUserMedia","audio","audioCtxL","window","AudioContext","webkitAudioContext","analyserL","createAnalyser","srcL","createMediaStreamSource","connect","fftSize","dataL","Uint8Array","frequencyBinCount","detectLocal","getByteFrequencyData","reduce","sum","v","length","requestAnimationFrame","getTracks","forEach","t","kind","addTrack","ontrack","streams","stream","srcObject","rt","getAudioTracks","onmute","onunmute","audioCtxR","analyserR","srcR","dataR","detectRemote","createDataChannel","setupDataChannel","ondatachannel","channel","onicecandidate","createOffer","prev","sender","sendMessage","_dataChannelRef$curre","_dataChannelRef$curre2","readyState","toggleMute","_localStreamRef$curre","enabled","hangUp","_localStreamRef$curre2","stop","setTimeout","_wsRef$current2","_pcRef$current2"],"sources":["/Users/theodiamant/Desktop/webrtc/client/src/hooks/useWebRTC.js"],"sourcesContent":["// src/hooks/useWebRTC.js\nimport { useEffect, useRef, useState } from \"react\";\n\nexport default function useWebRTC(\n  callId,\n  { timeout = 30000, start = true, isInitiator = false }\n) {\n  const [status, setStatus] = useState(\"waiting\");\n  const statusRef = useRef(status);\n  useEffect(() => {\n    statusRef.current = status;\n  }, [status]);\n\n  const wsRef = useRef();\n  const pcRef = useRef();\n  const dataChannelRef = useRef();\n  const remoteAudioRef = useRef();\n  const localStreamRef = useRef();\n\n  const [chatMessages, setChatMessages] = useState([]);\n  const [localSpeaking, setLocalSpeaking] = useState(false);\n  const [remoteSpeaking, setRemoteSpeaking] = useState(false);\n  const [remoteMuted, setRemoteMuted] = useState(false);\n  const [isChannelOpen, setIsChannelOpen] = useState(false);\n\n  // 1) Signaling via WebSocket\n  // 1) Signaling via WebSocket\n  useEffect(() => {\n    if (!start) return;\n\n    const serverUrl = process.env.REACT_APP_SERVER_URL;\n    wsRef.current = new WebSocket(\n      `${serverUrl.replace(/^http/, \"ws\")}?roomId=${callId}`\n    );\n    wsRef.current.onopen = () =>\n      console.log(\"%cWS open\", \"color:green;font-weight:bold;\", new Date());\n    wsRef.current.onclose = () =>\n      console.log(\"%cWS closed\", \"color:gray;font-weight:bold;\", new Date());\n\n    wsRef.current.onmessage = async ({ data }) => {\n      // Blob → texte\n      let text = data instanceof Blob ? await data.text() : data;\n      console.log(\"%cWS ←\", \"color:purple;\", text);\n\n      // JSON.parse\n      let msg;\n      try {\n        msg = JSON.parse(text);\n      } catch {\n        console.warn(\"WS: message non JSON reçu\", text);\n        return;\n      }\n      console.log(\"%cSignal→\", \"color:blue;\", msg.type, msg);\n\n      switch (msg.type) {\n        case \"room-status\":\n          console.log(\"room-status:\", msg.peers);\n          if (msg.peers === 1) {\n            // il ne reste plus que vous : l’invité est parti\n            setStatus(\"peer-left\");\n          } else if (msg.peers === 2) {\n            // l’invité vient de (re)venir\n            // on relance la nego si on n’est pas déjà connecté\n            if (statusRef.current !== \"connected\") {\n              console.log(\"Invité (re)joint, relancement de la connexion\");\n              await initiateCall(isInitiator);\n            }\n          }\n          break;\n        case \"offer\":\n          console.log(\"received OFFER\", msg.offer);\n          await pcRef.current.setRemoteDescription(msg.offer);\n          {\n            const answer = await pcRef.current.createAnswer();\n            await pcRef.current.setLocalDescription(answer);\n            wsRef.current.send(JSON.stringify({ type: \"answer\", answer }));\n          }\n          break;\n        case \"answer\":\n          console.log(\"received ANSWER\", msg.answer);\n          await pcRef.current.setRemoteDescription(msg.answer);\n          break;\n        case \"candidate\":\n          console.log(\"received CANDIDATE\", msg.candidate);\n          await pcRef.current.addIceCandidate(msg.candidate);\n          break;\n        case \"peer-left\":\n          console.log(\"peer-left\");\n          setStatus(\"peer-left\");\n          break;\n        case \"call-ended\":\n          console.log(\"call-ended\");\n          setStatus(\"ended\");\n          break;\n        default:\n          break;\n      }\n    };\n\n    // cleanup : on ferme juste les connexions\n    return () => {\n      wsRef.current?.close();\n      pcRef.current?.close();\n    };\n  }, [callId, start, isInitiator]);\n\n  // 2) WebRTC peer connection & media\n  async function initiateCall(isInitiator) {\n    console.log(\"%c⏱ initiateCall()\", \"color:orange;\", { isInitiator });\n    setStatus(\"connecting\");\n\n    pcRef.current = new RTCPeerConnection({\n      iceServers: [{ urls: process.env.REACT_APP_STUN_SERVER }],\n    });\n    pcRef.current.onconnectionstatechange = () =>\n      console.log(\"PC connectionState:\", pcRef.current.connectionState);\n    pcRef.current.oniceconnectionstatechange = () =>\n      console.log(\"PC iceConnectionState:\", pcRef.current.iceConnectionState);\n\n    // 2.1) récupérer l’audio local\n    localStreamRef.current = await navigator.mediaDevices.getUserMedia({\n      audio: true,\n    });\n    console.log(\"got localStream:\", localStreamRef.current);\n\n    // 2.2) détection de voix locale (animation)\n    const audioCtxL = new (window.AudioContext || window.webkitAudioContext)();\n    const analyserL = audioCtxL.createAnalyser();\n    const srcL = audioCtxL.createMediaStreamSource(localStreamRef.current);\n    srcL.connect(analyserL);\n    analyserL.fftSize = 256;\n    const dataL = new Uint8Array(analyserL.frequencyBinCount);\n    (function detectLocal() {\n      analyserL.getByteFrequencyData(dataL);\n      setLocalSpeaking(\n        dataL.reduce((sum, v) => sum + v, 0) / dataL.length > 30\n      );\n      requestAnimationFrame(detectLocal);\n    })();\n\n    // 2.3) ajout des pistes au PeerConnection\n    localStreamRef.current.getTracks().forEach((t) => {\n      console.log(\"addTrack:\", t.kind);\n      pcRef.current.addTrack(t, localStreamRef.current);\n    });\n\n    // 2.4) réception et affichage de l’audio distant\n    pcRef.current.ontrack = ({ streams: [stream] }) => {\n      console.log(\"%cPC ontrack →\", \"color:teal;\", stream);\n      if (remoteAudioRef.current) remoteAudioRef.current.srcObject = stream;\n\n      const rt = stream.getAudioTracks()[0];\n      if (rt) {\n        rt.onmute = () => setRemoteMuted(true);\n        rt.onunmute = () => setRemoteMuted(false);\n      }\n\n      if (!remoteSpeaking) {\n        const audioCtxR = new (window.AudioContext ||\n          window.webkitAudioContext)();\n        const analyserR = audioCtxR.createAnalyser();\n        const srcR = audioCtxR.createMediaStreamSource(stream);\n        srcR.connect(analyserR);\n        analyserR.fftSize = 256;\n        const dataR = new Uint8Array(analyserR.frequencyBinCount);\n        (function detectRemote() {\n          analyserR.getByteFrequencyData(dataR);\n          setRemoteSpeaking(\n            dataR.reduce((sum, v) => sum + v, 0) / dataR.length > 30\n          );\n          requestAnimationFrame(detectRemote);\n        })();\n      }\n    };\n\n    // 3) DataChannel pour le chat\n    if (isInitiator) {\n      console.log(\"creating DataChannel as initiator\");\n      dataChannelRef.current = pcRef.current.createDataChannel(\"chat\");\n      setupDataChannel();\n    } else {\n      pcRef.current.ondatachannel = ({ channel }) => {\n        console.log(\"ondatachannel → received channel\", channel);\n        dataChannelRef.current = channel;\n        setupDataChannel();\n      };\n    }\n\n    // 4) échange ICE\n    pcRef.current.onicecandidate = ({ candidate }) => {\n      console.log(\"onicecandidate → send\", candidate);\n      if (candidate) {\n        wsRef.current.send(JSON.stringify({ type: \"candidate\", candidate }));\n      }\n    };\n\n    // 5) negotiation offer/answer\n    if (isInitiator) {\n      const offer = await pcRef.current.createOffer();\n      console.log(\"created OFFER\", offer);\n      await pcRef.current.setLocalDescription(offer);\n      wsRef.current.send(JSON.stringify({ type: \"offer\", offer }));\n    }\n\n    setStatus(\"connected\");\n    console.log(\"status → connected\");\n  }\n\n  function setupDataChannel() {\n    dataChannelRef.current.onopen = () => {\n      console.log(\"%cDataChannel open\", \"color:green;\", dataChannelRef.current);\n      setIsChannelOpen(true);\n    };\n    dataChannelRef.current.onclose = () => {\n      console.log(\"%cDataChannel closed\", \"color:red;\", dataChannelRef.current);\n      setIsChannelOpen(false);\n    };\n    dataChannelRef.current.onmessage = ({ data }) => {\n      console.log(\"%cDataChannel ← peer:\", \"color:purple;\", data);\n      setChatMessages((prev) => [...prev, { sender: \"peer\", text: data }]);\n    };\n  }\n\n  // Envoi d’un message (chat)\n  function sendMessage(text) {\n    console.log(\n      \"sendMessage() →\",\n      text,\n      \"DCstate:\",\n      dataChannelRef.current?.readyState\n    );\n    setChatMessages((prev) => [...prev, { sender: \"local\", text }]);\n\n    if (dataChannelRef.current?.readyState === \"open\") {\n      dataChannelRef.current.send(text);\n    } else {\n      console.warn(\"DataChannel pas open, message pas envoyé au pair :\", text);\n    }\n  }\n\n  function toggleMute() {\n    const t = localStreamRef.current?.getAudioTracks()[0];\n    if (t) t.enabled = !t;\n  }\n\n  function hangUp() {\n    if (isInitiator) {\n      wsRef.current.send(JSON.stringify({ type: \"end-call\" }));\n    }\n    console.log(\"hangUp()\");\n    setStatus(\"ended\");\n    localStreamRef.current?.getTracks().forEach((t) => t.stop());\n    if (remoteAudioRef.current) remoteAudioRef.current.srcObject = null;\n    setTimeout(() => {\n      wsRef.current?.close();\n      pcRef.current?.close();\n    }, 100);\n  }\n\n  return {\n    remoteAudioRef,\n    status,\n    chatMessages,\n    sendMessage,\n    toggleMute,\n    hangUp,\n    localSpeaking,\n    remoteSpeaking,\n    remoteMuted,\n    isChannelOpen,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
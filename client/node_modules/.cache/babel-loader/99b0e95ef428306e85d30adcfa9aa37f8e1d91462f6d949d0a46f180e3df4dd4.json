{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useWebRTC.js\nimport { useEffect, useRef, useState } from \"react\";\nexport default function useWebRTC(callId, {\n  timeout = 30000,\n  start = true,\n  isInitiator = false\n}) {\n  _s();\n  const [status, setStatus] = useState(\"waiting\");\n  const statusRef = useRef(status);\n  useEffect(() => {\n    statusRef.current = status;\n  }, [status]);\n  const wsRef = useRef();\n  const pcRef = useRef();\n  const dataChannelRef = useRef();\n  const remoteAudioRef = useRef();\n  const localStreamRef = useRef();\n  const remoteStreamRef = useRef(new MediaStream());\n  const [chatMessages, setChatMessages] = useState([]);\n  const [localSpeaking, setLocalSpeaking] = useState(false);\n  const [remoteSpeaking, setRemoteSpeaking] = useState(false);\n  const [remoteMuted, setRemoteMuted] = useState(false);\n  const [isChannelOpen, setIsChannelOpen] = useState(false);\n\n  // 1) Signaling via WebSocket\n  useEffect(() => {\n    if (!start) return;\n    wsRef.current = new WebSocket(`${process.env.REACT_APP_SERVER_URL.replace(/^http/, \"ws\")}?roomId=${callId}`);\n    wsRef.current.onopen = () => console.log(\"WS open\", new Date());\n    wsRef.current.onclose = () => console.log(\"WS closed\", new Date());\n    wsRef.current.onmessage = async ({\n      data\n    }) => {\n      const text = data instanceof Blob ? await data.text() : data;\n      let msg;\n      try {\n        msg = JSON.parse(text);\n      } catch {\n        console.warn(\"WS: message non JSON reçu\", text);\n        return;\n      }\n      switch (msg.type) {\n        case \"room-status\":\n          console.log(\"room-status:\", msg.peers);\n          if (msg.peers === 2 && statusRef.current === \"waiting\") {\n            // première arrivée du peer\n            await initiateCall(isInitiator);\n          } else if (msg.peers === 2 && statusRef.current === \"peer-left\") {\n            // peer revient après être parti\n            setStatus(\"connecting\");\n            await initiateCall(isInitiator);\n          } else if (msg.peers === 1 && statusRef.current === \"connected\") {\n            var _pcRef$current;\n            // peer a quitté\n            console.log(\"Peer left → nettoyage\");\n            setStatus(\"peer-left\");\n            (_pcRef$current = pcRef.current) === null || _pcRef$current === void 0 ? void 0 : _pcRef$current.close();\n            remoteStreamRef.current = new MediaStream();\n            if (remoteAudioRef.current) {\n              remoteAudioRef.current.srcObject = null;\n            }\n            setIsChannelOpen(false);\n          }\n          break;\n        case \"offer\":\n          await pcRef.current.setRemoteDescription(msg.offer);\n          pcRef.current.getTransceivers().forEach(t => {\n            var _t$receiver$track;\n            if (((_t$receiver$track = t.receiver.track) === null || _t$receiver$track === void 0 ? void 0 : _t$receiver$track.kind) === \"audio\") t.direction = \"sendrecv\";\n          });\n          {\n            const answer = await pcRef.current.createAnswer();\n            await pcRef.current.setLocalDescription(answer);\n            wsRef.current.send(JSON.stringify({\n              type: \"answer\",\n              answer\n            }));\n          }\n          break;\n        case \"answer\":\n          await pcRef.current.setRemoteDescription(msg.answer);\n          break;\n        case \"candidate\":\n          await pcRef.current.addIceCandidate(msg.candidate);\n          break;\n        case \"peer-left\":\n          setStatus(\"peer-left\");\n          break;\n        case \"call-ended\":\n          setStatus(\"ended\");\n          break;\n        default:\n          break;\n      }\n    };\n    return () => {\n      var _wsRef$current, _pcRef$current2;\n      (_wsRef$current = wsRef.current) === null || _wsRef$current === void 0 ? void 0 : _wsRef$current.close();\n      (_pcRef$current2 = pcRef.current) === null || _pcRef$current2 === void 0 ? void 0 : _pcRef$current2.close();\n    };\n  }, [callId, start, isInitiator]);\n\n  // 2) WebRTC peer connection & media\n  async function initiateCall(isInitiator) {\n    setStatus(\"connecting\");\n    pcRef.current = new RTCPeerConnection({\n      iceServers: [{\n        urls: process.env.REACT_APP_STUN_SERVER\n      }]\n    });\n    pcRef.current.oniceconnectionstatechange = () => console.log(\"ICE:\", pcRef.current.iceConnectionState);\n    pcRef.current.onconnectionstatechange = () => console.log(\"PC:\", pcRef.current.connectionState);\n\n    // 2.1) getUserMedia\n    localStreamRef.current = await navigator.mediaDevices.getUserMedia({\n      audio: true\n    });\n    localStreamRef.current.getTracks().forEach(t => pcRef.current.addTrack(t, localStreamRef.current));\n\n    // 2.2) ajouter l’audio distant\n    pcRef.current.ontrack = event => {\n      // ajouter chaque piste au remoteStream\n      remoteStreamRef.current.addTrack(event.track);\n      if (remoteAudioRef.current) {\n        remoteAudioRef.current.srcObject = remoteStreamRef.current;\n      }\n      event.track.onmute = () => setRemoteMuted(true);\n      event.track.onunmute = () => setRemoteMuted(false);\n\n      // animation voix distante\n      if (!remoteSpeaking) {\n        const ctx = new (window.AudioContext || window.webkitAudioContext)();\n        const analyser = ctx.createAnalyser();\n        ctx.createMediaStreamSource(remoteStreamRef.current).connect(analyser);\n        analyser.fftSize = 256;\n        const data = new Uint8Array(analyser.frequencyBinCount);\n        (function detect() {\n          analyser.getByteFrequencyData(data);\n          setRemoteSpeaking(data.reduce((s, v) => s + v, 0) / data.length > 30);\n          requestAnimationFrame(detect);\n        })();\n      }\n    };\n\n    // 3) DataChannel chat\n    if (isInitiator) {\n      dataChannelRef.current = pcRef.current.createDataChannel(\"chat\");\n      setupDataChannel();\n    } else {\n      pcRef.current.ondatachannel = ({\n        channel\n      }) => {\n        dataChannelRef.current = channel;\n        setupDataChannel();\n      };\n    }\n\n    // 4) ICE\n    pcRef.current.onicecandidate = ({\n      candidate\n    }) => {\n      if (candidate) wsRef.current.send(JSON.stringify({\n        type: \"candidate\",\n        candidate\n      }));\n    };\n\n    // 5) Offer/Answer\n    if (isInitiator) {\n      const offer = await pcRef.current.createOffer();\n      await pcRef.current.setLocalDescription(offer);\n      wsRef.current.send(JSON.stringify({\n        type: \"offer\",\n        offer\n      }));\n    }\n    setStatus(\"connected\");\n  }\n  function setupDataChannel() {\n    dataChannelRef.current.onopen = () => setIsChannelOpen(true);\n    dataChannelRef.current.onclose = () => setIsChannelOpen(false);\n    dataChannelRef.current.onmessage = ({\n      data\n    }) => setChatMessages(p => [...p, {\n      sender: \"peer\",\n      text: data\n    }]);\n  }\n  function sendMessage(text) {\n    var _dataChannelRef$curre;\n    setChatMessages(p => [...p, {\n      sender: \"local\",\n      text\n    }]);\n    if (((_dataChannelRef$curre = dataChannelRef.current) === null || _dataChannelRef$curre === void 0 ? void 0 : _dataChannelRef$curre.readyState) === \"open\") {\n      dataChannelRef.current.send(text);\n    }\n  }\n  function toggleMute() {\n    var _localStreamRef$curre;\n    const t = (_localStreamRef$curre = localStreamRef.current) === null || _localStreamRef$curre === void 0 ? void 0 : _localStreamRef$curre.getAudioTracks()[0];\n    if (t) t.enabled = !t.enabled;\n  }\n  function hangUp() {\n    var _localStreamRef$curre2;\n    if (isInitiator) {\n      wsRef.current.send(JSON.stringify({\n        type: \"end-call\"\n      }));\n    }\n    setStatus(\"ended\");\n    (_localStreamRef$curre2 = localStreamRef.current) === null || _localStreamRef$curre2 === void 0 ? void 0 : _localStreamRef$curre2.getTracks().forEach(t => t.stop());\n    remoteStreamRef.current = new MediaStream();\n    if (remoteAudioRef.current) remoteAudioRef.current.srcObject = null;\n    setTimeout(() => {\n      var _wsRef$current2, _pcRef$current3;\n      (_wsRef$current2 = wsRef.current) === null || _wsRef$current2 === void 0 ? void 0 : _wsRef$current2.close();\n      (_pcRef$current3 = pcRef.current) === null || _pcRef$current3 === void 0 ? void 0 : _pcRef$current3.close();\n    }, 100);\n  }\n  return {\n    remoteAudioRef,\n    status,\n    chatMessages,\n    sendMessage,\n    toggleMute,\n    hangUp,\n    localSpeaking,\n    remoteSpeaking,\n    remoteMuted,\n    isChannelOpen\n  };\n}\n_s(useWebRTC, \"DefbjgZVFSGlAyZOvpvZ7tiizIs=\");","map":{"version":3,"names":["useEffect","useRef","useState","useWebRTC","callId","timeout","start","isInitiator","_s","status","setStatus","statusRef","current","wsRef","pcRef","dataChannelRef","remoteAudioRef","localStreamRef","remoteStreamRef","MediaStream","chatMessages","setChatMessages","localSpeaking","setLocalSpeaking","remoteSpeaking","setRemoteSpeaking","remoteMuted","setRemoteMuted","isChannelOpen","setIsChannelOpen","WebSocket","process","env","REACT_APP_SERVER_URL","replace","onopen","console","log","Date","onclose","onmessage","data","text","Blob","msg","JSON","parse","warn","type","peers","initiateCall","_pcRef$current","close","srcObject","setRemoteDescription","offer","getTransceivers","forEach","t","_t$receiver$track","receiver","track","kind","direction","answer","createAnswer","setLocalDescription","send","stringify","addIceCandidate","candidate","_wsRef$current","_pcRef$current2","RTCPeerConnection","iceServers","urls","REACT_APP_STUN_SERVER","oniceconnectionstatechange","iceConnectionState","onconnectionstatechange","connectionState","navigator","mediaDevices","getUserMedia","audio","getTracks","addTrack","ontrack","event","onmute","onunmute","ctx","window","AudioContext","webkitAudioContext","analyser","createAnalyser","createMediaStreamSource","connect","fftSize","Uint8Array","frequencyBinCount","detect","getByteFrequencyData","reduce","s","v","length","requestAnimationFrame","createDataChannel","setupDataChannel","ondatachannel","channel","onicecandidate","createOffer","p","sender","sendMessage","_dataChannelRef$curre","readyState","toggleMute","_localStreamRef$curre","getAudioTracks","enabled","hangUp","_localStreamRef$curre2","stop","setTimeout","_wsRef$current2","_pcRef$current3"],"sources":["/Users/theodiamant/Desktop/webrtc/client/src/hooks/useWebRTC.js"],"sourcesContent":["// src/hooks/useWebRTC.js\nimport { useEffect, useRef, useState } from \"react\";\n\nexport default function useWebRTC(\n  callId,\n  { timeout = 30000, start = true, isInitiator = false }\n) {\n  const [status, setStatus] = useState(\"waiting\");\n  const statusRef = useRef(status);\n  useEffect(() => {\n    statusRef.current = status;\n  }, [status]);\n\n  const wsRef = useRef();\n  const pcRef = useRef();\n  const dataChannelRef = useRef();\n  const remoteAudioRef = useRef();\n  const localStreamRef = useRef();\n  const remoteStreamRef = useRef(new MediaStream());\n\n  const [chatMessages, setChatMessages] = useState([]);\n  const [localSpeaking, setLocalSpeaking] = useState(false);\n  const [remoteSpeaking, setRemoteSpeaking] = useState(false);\n  const [remoteMuted, setRemoteMuted] = useState(false);\n  const [isChannelOpen, setIsChannelOpen] = useState(false);\n\n  // 1) Signaling via WebSocket\n  useEffect(() => {\n    if (!start) return;\n\n    wsRef.current = new WebSocket(\n      `${process.env.REACT_APP_SERVER_URL.replace(/^http/, \"ws\")}?roomId=${callId}`\n    );\n    wsRef.current.onopen = () =>\n      console.log(\"WS open\", new Date());\n    wsRef.current.onclose = () =>\n      console.log(\"WS closed\", new Date());\n\n    wsRef.current.onmessage = async ({ data }) => {\n      const text = data instanceof Blob ? await data.text() : data;\n      let msg;\n      try {\n        msg = JSON.parse(text);\n      } catch {\n        console.warn(\"WS: message non JSON reçu\", text);\n        return;\n      }\n\n      switch (msg.type) {\n        case \"room-status\":\n          console.log(\"room-status:\", msg.peers);\n          if (msg.peers === 2 && statusRef.current === \"waiting\") {\n            // première arrivée du peer\n            await initiateCall(isInitiator);\n          } else if (\n            msg.peers === 2 &&\n            statusRef.current === \"peer-left\"\n          ) {\n            // peer revient après être parti\n            setStatus(\"connecting\");\n            await initiateCall(isInitiator);\n          } else if (\n            msg.peers === 1 &&\n            statusRef.current === \"connected\"\n          ) {\n            // peer a quitté\n            console.log(\"Peer left → nettoyage\");\n            setStatus(\"peer-left\");\n            pcRef.current?.close();\n            remoteStreamRef.current = new MediaStream();\n            if (remoteAudioRef.current) {\n              remoteAudioRef.current.srcObject = null;\n            }\n            setIsChannelOpen(false);\n          }\n          break;\n\n        case \"offer\":\n          await pcRef.current.setRemoteDescription(msg.offer);\n          pcRef.current.getTransceivers().forEach((t) => {\n            if (t.receiver.track?.kind === \"audio\") t.direction = \"sendrecv\";\n          });\n          {\n            const answer = await pcRef.current.createAnswer();\n            await pcRef.current.setLocalDescription(answer);\n            wsRef.current.send(JSON.stringify({ type: \"answer\", answer }));\n          }\n          break;\n\n        case \"answer\":\n          await pcRef.current.setRemoteDescription(msg.answer);\n          break;\n\n        case \"candidate\":\n          await pcRef.current.addIceCandidate(msg.candidate);\n          break;\n\n        case \"peer-left\":\n          setStatus(\"peer-left\");\n          break;\n\n        case \"call-ended\":\n          setStatus(\"ended\");\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    return () => {\n      wsRef.current?.close();\n      pcRef.current?.close();\n    };\n  }, [callId, start, isInitiator]);\n\n  // 2) WebRTC peer connection & media\n  async function initiateCall(isInitiator) {\n    setStatus(\"connecting\");\n    pcRef.current = new RTCPeerConnection({\n      iceServers: [{ urls: process.env.REACT_APP_STUN_SERVER }],\n    });\n    pcRef.current.oniceconnectionstatechange = () =>\n      console.log(\"ICE:\", pcRef.current.iceConnectionState);\n    pcRef.current.onconnectionstatechange = () =>\n      console.log(\"PC:\", pcRef.current.connectionState);\n\n    // 2.1) getUserMedia\n    localStreamRef.current = await navigator.mediaDevices.getUserMedia({\n      audio: true,\n    });\n    localStreamRef.current.getTracks().forEach((t) =>\n      pcRef.current.addTrack(t, localStreamRef.current)\n    );\n\n    // 2.2) ajouter l’audio distant\n    pcRef.current.ontrack = (event) => {\n      // ajouter chaque piste au remoteStream\n      remoteStreamRef.current.addTrack(event.track);\n      if (remoteAudioRef.current) {\n        remoteAudioRef.current.srcObject = remoteStreamRef.current;\n      }\n      event.track.onmute = () => setRemoteMuted(true);\n      event.track.onunmute = () => setRemoteMuted(false);\n\n      // animation voix distante\n      if (!remoteSpeaking) {\n        const ctx = new (window.AudioContext ||\n          window.webkitAudioContext)();\n        const analyser = ctx.createAnalyser();\n        ctx.createMediaStreamSource(remoteStreamRef.current).connect(analyser);\n        analyser.fftSize = 256;\n        const data = new Uint8Array(analyser.frequencyBinCount);\n        (function detect() {\n          analyser.getByteFrequencyData(data);\n          setRemoteSpeaking(\n            data.reduce((s, v) => s + v, 0) / data.length > 30\n          );\n          requestAnimationFrame(detect);\n        })();\n      }\n    };\n\n    // 3) DataChannel chat\n    if (isInitiator) {\n      dataChannelRef.current = pcRef.current.createDataChannel(\"chat\");\n      setupDataChannel();\n    } else {\n      pcRef.current.ondatachannel = ({ channel }) => {\n        dataChannelRef.current = channel;\n        setupDataChannel();\n      };\n    }\n\n    // 4) ICE\n    pcRef.current.onicecandidate = ({ candidate }) => {\n      if (candidate)\n        wsRef.current.send(JSON.stringify({ type: \"candidate\", candidate }));\n    };\n\n    // 5) Offer/Answer\n    if (isInitiator) {\n      const offer = await pcRef.current.createOffer();\n      await pcRef.current.setLocalDescription(offer);\n      wsRef.current.send(JSON.stringify({ type: \"offer\", offer }));\n    }\n\n    setStatus(\"connected\");\n  }\n\n  function setupDataChannel() {\n    dataChannelRef.current.onopen = () => setIsChannelOpen(true);\n    dataChannelRef.current.onclose = () => setIsChannelOpen(false);\n    dataChannelRef.current.onmessage = ({ data }) =>\n      setChatMessages((p) => [...p, { sender: \"peer\", text: data }]);\n  }\n\n  function sendMessage(text) {\n    setChatMessages((p) => [...p, { sender: \"local\", text }]);\n    if (dataChannelRef.current?.readyState === \"open\") {\n      dataChannelRef.current.send(text);\n    }\n  }\n\n  function toggleMute() {\n    const t = localStreamRef.current?.getAudioTracks()[0];\n    if (t) t.enabled = !t.enabled;\n  }\n\n  function hangUp() {\n    if (isInitiator) {\n      wsRef.current.send(JSON.stringify({ type: \"end-call\" }));\n    }\n    setStatus(\"ended\");\n    localStreamRef.current?.getTracks().forEach((t) => t.stop());\n    remoteStreamRef.current = new MediaStream();\n    if (remoteAudioRef.current) remoteAudioRef.current.srcObject = null;\n    setTimeout(() => {\n      wsRef.current?.close();\n      pcRef.current?.close();\n    }, 100);\n  }\n\n  return {\n    remoteAudioRef,\n    status,\n    chatMessages,\n    sendMessage,\n    toggleMute,\n    hangUp,\n    localSpeaking,\n    remoteSpeaking,\n    remoteMuted,\n    isChannelOpen,\n  };\n}\n"],"mappings":";AAAA;AACA,SAASA,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAEnD,eAAe,SAASC,SAASA,CAC/BC,MAAM,EACN;EAAEC,OAAO,GAAG,KAAK;EAAEC,KAAK,GAAG,IAAI;EAAEC,WAAW,GAAG;AAAM,CAAC,EACtD;EAAAC,EAAA;EACA,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAC,SAAS,CAAC;EAC/C,MAAMS,SAAS,GAAGV,MAAM,CAACQ,MAAM,CAAC;EAChCT,SAAS,CAAC,MAAM;IACdW,SAAS,CAACC,OAAO,GAAGH,MAAM;EAC5B,CAAC,EAAE,CAACA,MAAM,CAAC,CAAC;EAEZ,MAAMI,KAAK,GAAGZ,MAAM,CAAC,CAAC;EACtB,MAAMa,KAAK,GAAGb,MAAM,CAAC,CAAC;EACtB,MAAMc,cAAc,GAAGd,MAAM,CAAC,CAAC;EAC/B,MAAMe,cAAc,GAAGf,MAAM,CAAC,CAAC;EAC/B,MAAMgB,cAAc,GAAGhB,MAAM,CAAC,CAAC;EAC/B,MAAMiB,eAAe,GAAGjB,MAAM,CAAC,IAAIkB,WAAW,CAAC,CAAC,CAAC;EAEjD,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACoB,aAAa,EAAEC,gBAAgB,CAAC,GAAGrB,QAAQ,CAAC,KAAK,CAAC;EACzD,MAAM,CAACsB,cAAc,EAAEC,iBAAiB,CAAC,GAAGvB,QAAQ,CAAC,KAAK,CAAC;EAC3D,MAAM,CAACwB,WAAW,EAAEC,cAAc,CAAC,GAAGzB,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAAC0B,aAAa,EAAEC,gBAAgB,CAAC,GAAG3B,QAAQ,CAAC,KAAK,CAAC;;EAEzD;EACAF,SAAS,CAAC,MAAM;IACd,IAAI,CAACM,KAAK,EAAE;IAEZO,KAAK,CAACD,OAAO,GAAG,IAAIkB,SAAS,CAC3B,GAAGC,OAAO,CAACC,GAAG,CAACC,oBAAoB,CAACC,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,WAAW9B,MAAM,EAC7E,CAAC;IACDS,KAAK,CAACD,OAAO,CAACuB,MAAM,GAAG,MACrBC,OAAO,CAACC,GAAG,CAAC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAAC;IACpCzB,KAAK,CAACD,OAAO,CAAC2B,OAAO,GAAG,MACtBH,OAAO,CAACC,GAAG,CAAC,WAAW,EAAE,IAAIC,IAAI,CAAC,CAAC,CAAC;IAEtCzB,KAAK,CAACD,OAAO,CAAC4B,SAAS,GAAG,OAAO;MAAEC;IAAK,CAAC,KAAK;MAC5C,MAAMC,IAAI,GAAGD,IAAI,YAAYE,IAAI,GAAG,MAAMF,IAAI,CAACC,IAAI,CAAC,CAAC,GAAGD,IAAI;MAC5D,IAAIG,GAAG;MACP,IAAI;QACFA,GAAG,GAAGC,IAAI,CAACC,KAAK,CAACJ,IAAI,CAAC;MACxB,CAAC,CAAC,MAAM;QACNN,OAAO,CAACW,IAAI,CAAC,2BAA2B,EAAEL,IAAI,CAAC;QAC/C;MACF;MAEA,QAAQE,GAAG,CAACI,IAAI;QACd,KAAK,aAAa;UAChBZ,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEO,GAAG,CAACK,KAAK,CAAC;UACtC,IAAIL,GAAG,CAACK,KAAK,KAAK,CAAC,IAAItC,SAAS,CAACC,OAAO,KAAK,SAAS,EAAE;YACtD;YACA,MAAMsC,YAAY,CAAC3C,WAAW,CAAC;UACjC,CAAC,MAAM,IACLqC,GAAG,CAACK,KAAK,KAAK,CAAC,IACftC,SAAS,CAACC,OAAO,KAAK,WAAW,EACjC;YACA;YACAF,SAAS,CAAC,YAAY,CAAC;YACvB,MAAMwC,YAAY,CAAC3C,WAAW,CAAC;UACjC,CAAC,MAAM,IACLqC,GAAG,CAACK,KAAK,KAAK,CAAC,IACftC,SAAS,CAACC,OAAO,KAAK,WAAW,EACjC;YAAA,IAAAuC,cAAA;YACA;YACAf,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;YACpC3B,SAAS,CAAC,WAAW,CAAC;YACtB,CAAAyC,cAAA,GAAArC,KAAK,CAACF,OAAO,cAAAuC,cAAA,uBAAbA,cAAA,CAAeC,KAAK,CAAC,CAAC;YACtBlC,eAAe,CAACN,OAAO,GAAG,IAAIO,WAAW,CAAC,CAAC;YAC3C,IAAIH,cAAc,CAACJ,OAAO,EAAE;cAC1BI,cAAc,CAACJ,OAAO,CAACyC,SAAS,GAAG,IAAI;YACzC;YACAxB,gBAAgB,CAAC,KAAK,CAAC;UACzB;UACA;QAEF,KAAK,OAAO;UACV,MAAMf,KAAK,CAACF,OAAO,CAAC0C,oBAAoB,CAACV,GAAG,CAACW,KAAK,CAAC;UACnDzC,KAAK,CAACF,OAAO,CAAC4C,eAAe,CAAC,CAAC,CAACC,OAAO,CAAEC,CAAC,IAAK;YAAA,IAAAC,iBAAA;YAC7C,IAAI,EAAAA,iBAAA,GAAAD,CAAC,CAACE,QAAQ,CAACC,KAAK,cAAAF,iBAAA,uBAAhBA,iBAAA,CAAkBG,IAAI,MAAK,OAAO,EAAEJ,CAAC,CAACK,SAAS,GAAG,UAAU;UAClE,CAAC,CAAC;UACF;YACE,MAAMC,MAAM,GAAG,MAAMlD,KAAK,CAACF,OAAO,CAACqD,YAAY,CAAC,CAAC;YACjD,MAAMnD,KAAK,CAACF,OAAO,CAACsD,mBAAmB,CAACF,MAAM,CAAC;YAC/CnD,KAAK,CAACD,OAAO,CAACuD,IAAI,CAACtB,IAAI,CAACuB,SAAS,CAAC;cAAEpB,IAAI,EAAE,QAAQ;cAAEgB;YAAO,CAAC,CAAC,CAAC;UAChE;UACA;QAEF,KAAK,QAAQ;UACX,MAAMlD,KAAK,CAACF,OAAO,CAAC0C,oBAAoB,CAACV,GAAG,CAACoB,MAAM,CAAC;UACpD;QAEF,KAAK,WAAW;UACd,MAAMlD,KAAK,CAACF,OAAO,CAACyD,eAAe,CAACzB,GAAG,CAAC0B,SAAS,CAAC;UAClD;QAEF,KAAK,WAAW;UACd5D,SAAS,CAAC,WAAW,CAAC;UACtB;QAEF,KAAK,YAAY;UACfA,SAAS,CAAC,OAAO,CAAC;UAClB;QAEF;UACE;MACJ;IACF,CAAC;IAED,OAAO,MAAM;MAAA,IAAA6D,cAAA,EAAAC,eAAA;MACX,CAAAD,cAAA,GAAA1D,KAAK,CAACD,OAAO,cAAA2D,cAAA,uBAAbA,cAAA,CAAenB,KAAK,CAAC,CAAC;MACtB,CAAAoB,eAAA,GAAA1D,KAAK,CAACF,OAAO,cAAA4D,eAAA,uBAAbA,eAAA,CAAepB,KAAK,CAAC,CAAC;IACxB,CAAC;EACH,CAAC,EAAE,CAAChD,MAAM,EAAEE,KAAK,EAAEC,WAAW,CAAC,CAAC;;EAEhC;EACA,eAAe2C,YAAYA,CAAC3C,WAAW,EAAE;IACvCG,SAAS,CAAC,YAAY,CAAC;IACvBI,KAAK,CAACF,OAAO,GAAG,IAAI6D,iBAAiB,CAAC;MACpCC,UAAU,EAAE,CAAC;QAAEC,IAAI,EAAE5C,OAAO,CAACC,GAAG,CAAC4C;MAAsB,CAAC;IAC1D,CAAC,CAAC;IACF9D,KAAK,CAACF,OAAO,CAACiE,0BAA0B,GAAG,MACzCzC,OAAO,CAACC,GAAG,CAAC,MAAM,EAAEvB,KAAK,CAACF,OAAO,CAACkE,kBAAkB,CAAC;IACvDhE,KAAK,CAACF,OAAO,CAACmE,uBAAuB,GAAG,MACtC3C,OAAO,CAACC,GAAG,CAAC,KAAK,EAAEvB,KAAK,CAACF,OAAO,CAACoE,eAAe,CAAC;;IAEnD;IACA/D,cAAc,CAACL,OAAO,GAAG,MAAMqE,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;MACjEC,KAAK,EAAE;IACT,CAAC,CAAC;IACFnE,cAAc,CAACL,OAAO,CAACyE,SAAS,CAAC,CAAC,CAAC5B,OAAO,CAAEC,CAAC,IAC3C5C,KAAK,CAACF,OAAO,CAAC0E,QAAQ,CAAC5B,CAAC,EAAEzC,cAAc,CAACL,OAAO,CAClD,CAAC;;IAED;IACAE,KAAK,CAACF,OAAO,CAAC2E,OAAO,GAAIC,KAAK,IAAK;MACjC;MACAtE,eAAe,CAACN,OAAO,CAAC0E,QAAQ,CAACE,KAAK,CAAC3B,KAAK,CAAC;MAC7C,IAAI7C,cAAc,CAACJ,OAAO,EAAE;QAC1BI,cAAc,CAACJ,OAAO,CAACyC,SAAS,GAAGnC,eAAe,CAACN,OAAO;MAC5D;MACA4E,KAAK,CAAC3B,KAAK,CAAC4B,MAAM,GAAG,MAAM9D,cAAc,CAAC,IAAI,CAAC;MAC/C6D,KAAK,CAAC3B,KAAK,CAAC6B,QAAQ,GAAG,MAAM/D,cAAc,CAAC,KAAK,CAAC;;MAElD;MACA,IAAI,CAACH,cAAc,EAAE;QACnB,MAAMmE,GAAG,GAAG,KAAKC,MAAM,CAACC,YAAY,IAClCD,MAAM,CAACE,kBAAkB,EAAE,CAAC;QAC9B,MAAMC,QAAQ,GAAGJ,GAAG,CAACK,cAAc,CAAC,CAAC;QACrCL,GAAG,CAACM,uBAAuB,CAAC/E,eAAe,CAACN,OAAO,CAAC,CAACsF,OAAO,CAACH,QAAQ,CAAC;QACtEA,QAAQ,CAACI,OAAO,GAAG,GAAG;QACtB,MAAM1D,IAAI,GAAG,IAAI2D,UAAU,CAACL,QAAQ,CAACM,iBAAiB,CAAC;QACvD,CAAC,SAASC,MAAMA,CAAA,EAAG;UACjBP,QAAQ,CAACQ,oBAAoB,CAAC9D,IAAI,CAAC;UACnChB,iBAAiB,CACfgB,IAAI,CAAC+D,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,EAAE,CAAC,CAAC,GAAGjE,IAAI,CAACkE,MAAM,GAAG,EAClD,CAAC;UACDC,qBAAqB,CAACN,MAAM,CAAC;QAC/B,CAAC,EAAE,CAAC;MACN;IACF,CAAC;;IAED;IACA,IAAI/F,WAAW,EAAE;MACfQ,cAAc,CAACH,OAAO,GAAGE,KAAK,CAACF,OAAO,CAACiG,iBAAiB,CAAC,MAAM,CAAC;MAChEC,gBAAgB,CAAC,CAAC;IACpB,CAAC,MAAM;MACLhG,KAAK,CAACF,OAAO,CAACmG,aAAa,GAAG,CAAC;QAAEC;MAAQ,CAAC,KAAK;QAC7CjG,cAAc,CAACH,OAAO,GAAGoG,OAAO;QAChCF,gBAAgB,CAAC,CAAC;MACpB,CAAC;IACH;;IAEA;IACAhG,KAAK,CAACF,OAAO,CAACqG,cAAc,GAAG,CAAC;MAAE3C;IAAU,CAAC,KAAK;MAChD,IAAIA,SAAS,EACXzD,KAAK,CAACD,OAAO,CAACuD,IAAI,CAACtB,IAAI,CAACuB,SAAS,CAAC;QAAEpB,IAAI,EAAE,WAAW;QAAEsB;MAAU,CAAC,CAAC,CAAC;IACxE,CAAC;;IAED;IACA,IAAI/D,WAAW,EAAE;MACf,MAAMgD,KAAK,GAAG,MAAMzC,KAAK,CAACF,OAAO,CAACsG,WAAW,CAAC,CAAC;MAC/C,MAAMpG,KAAK,CAACF,OAAO,CAACsD,mBAAmB,CAACX,KAAK,CAAC;MAC9C1C,KAAK,CAACD,OAAO,CAACuD,IAAI,CAACtB,IAAI,CAACuB,SAAS,CAAC;QAAEpB,IAAI,EAAE,OAAO;QAAEO;MAAM,CAAC,CAAC,CAAC;IAC9D;IAEA7C,SAAS,CAAC,WAAW,CAAC;EACxB;EAEA,SAASoG,gBAAgBA,CAAA,EAAG;IAC1B/F,cAAc,CAACH,OAAO,CAACuB,MAAM,GAAG,MAAMN,gBAAgB,CAAC,IAAI,CAAC;IAC5Dd,cAAc,CAACH,OAAO,CAAC2B,OAAO,GAAG,MAAMV,gBAAgB,CAAC,KAAK,CAAC;IAC9Dd,cAAc,CAACH,OAAO,CAAC4B,SAAS,GAAG,CAAC;MAAEC;IAAK,CAAC,KAC1CpB,eAAe,CAAE8F,CAAC,IAAK,CAAC,GAAGA,CAAC,EAAE;MAAEC,MAAM,EAAE,MAAM;MAAE1E,IAAI,EAAED;IAAK,CAAC,CAAC,CAAC;EAClE;EAEA,SAAS4E,WAAWA,CAAC3E,IAAI,EAAE;IAAA,IAAA4E,qBAAA;IACzBjG,eAAe,CAAE8F,CAAC,IAAK,CAAC,GAAGA,CAAC,EAAE;MAAEC,MAAM,EAAE,OAAO;MAAE1E;IAAK,CAAC,CAAC,CAAC;IACzD,IAAI,EAAA4E,qBAAA,GAAAvG,cAAc,CAACH,OAAO,cAAA0G,qBAAA,uBAAtBA,qBAAA,CAAwBC,UAAU,MAAK,MAAM,EAAE;MACjDxG,cAAc,CAACH,OAAO,CAACuD,IAAI,CAACzB,IAAI,CAAC;IACnC;EACF;EAEA,SAAS8E,UAAUA,CAAA,EAAG;IAAA,IAAAC,qBAAA;IACpB,MAAM/D,CAAC,IAAA+D,qBAAA,GAAGxG,cAAc,CAACL,OAAO,cAAA6G,qBAAA,uBAAtBA,qBAAA,CAAwBC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;IACrD,IAAIhE,CAAC,EAAEA,CAAC,CAACiE,OAAO,GAAG,CAACjE,CAAC,CAACiE,OAAO;EAC/B;EAEA,SAASC,MAAMA,CAAA,EAAG;IAAA,IAAAC,sBAAA;IAChB,IAAItH,WAAW,EAAE;MACfM,KAAK,CAACD,OAAO,CAACuD,IAAI,CAACtB,IAAI,CAACuB,SAAS,CAAC;QAAEpB,IAAI,EAAE;MAAW,CAAC,CAAC,CAAC;IAC1D;IACAtC,SAAS,CAAC,OAAO,CAAC;IAClB,CAAAmH,sBAAA,GAAA5G,cAAc,CAACL,OAAO,cAAAiH,sBAAA,uBAAtBA,sBAAA,CAAwBxC,SAAS,CAAC,CAAC,CAAC5B,OAAO,CAAEC,CAAC,IAAKA,CAAC,CAACoE,IAAI,CAAC,CAAC,CAAC;IAC5D5G,eAAe,CAACN,OAAO,GAAG,IAAIO,WAAW,CAAC,CAAC;IAC3C,IAAIH,cAAc,CAACJ,OAAO,EAAEI,cAAc,CAACJ,OAAO,CAACyC,SAAS,GAAG,IAAI;IACnE0E,UAAU,CAAC,MAAM;MAAA,IAAAC,eAAA,EAAAC,eAAA;MACf,CAAAD,eAAA,GAAAnH,KAAK,CAACD,OAAO,cAAAoH,eAAA,uBAAbA,eAAA,CAAe5E,KAAK,CAAC,CAAC;MACtB,CAAA6E,eAAA,GAAAnH,KAAK,CAACF,OAAO,cAAAqH,eAAA,uBAAbA,eAAA,CAAe7E,KAAK,CAAC,CAAC;IACxB,CAAC,EAAE,GAAG,CAAC;EACT;EAEA,OAAO;IACLpC,cAAc;IACdP,MAAM;IACNW,YAAY;IACZiG,WAAW;IACXG,UAAU;IACVI,MAAM;IACNtG,aAAa;IACbE,cAAc;IACdE,WAAW;IACXE;EACF,CAAC;AACH;AAACpB,EAAA,CAxOuBL,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useWebRTC.js\nimport { useEffect, useRef, useState } from \"react\";\nexport default function useWebRTC(callId, {\n  timeout = 30000,\n  start = true,\n  isInitiator = false\n}) {\n  _s();\n  // --- refs & state ---\n  const wsRef = useRef();\n  const pcRef = useRef();\n  const dataChannelRef = useRef();\n  const remoteAudioRef = useRef();\n  const localStreamRef = useRef(); // stream obtenu dès start\n  const [status, setStatus] = useState(\"waiting\");\n  const statusRef = useRef(status);\n  useEffect(() => {\n    statusRef.current = status;\n  }, [status]);\n  const [chatMessages, setChatMessages] = useState([]);\n  const [localSpeaking, setLocalSpeaking] = useState(false);\n  const [remoteSpeaking, setRemoteSpeaking] = useState(false);\n  const [remoteMuted, setRemoteMuted] = useState(false);\n\n  // 1) Demande d'accès au micro dès que start = true\n  useEffect(() => {\n    if (!start) return;\n    navigator.mediaDevices.getUserMedia({\n      audio: true\n    }).then(stream => {\n      localStreamRef.current = stream;\n      // on peut commencer dès maintenant à détecter la parole locale\n      const audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n      const analyser = audioCtx.createAnalyser();\n      const src = audioCtx.createMediaStreamSource(stream);\n      src.connect(analyser);\n      analyser.fftSize = 256;\n      const dataArr = new Uint8Array(analyser.frequencyBinCount);\n      (function detect() {\n        analyser.getByteFrequencyData(dataArr);\n        setLocalSpeaking(dataArr.reduce((a, v) => a + v, 0) / dataArr.length > 30);\n        requestAnimationFrame(detect);\n      })();\n    }).catch(err => {\n      console.error(\"Microphone access denied\", err);\n      // on peut définir un statut d'erreur si besoin\n    });\n  }, [start]);\n\n  // 2) SIGNALING WS SETUP\n  // 1) SIGNALING WS SETUP (connecte TOUJOURS au WS à l’arrivée sur la page)\n  useEffect(() => {\n    const serverUrl = process.env.REACT_APP_SERVER_URL;\n    wsRef.current = new WebSocket(`${serverUrl.replace(/^http/, \"ws\")}?roomId=${callId}`);\n    wsRef.current.onopen = () => console.log(\"WS open\");\n    wsRef.current.onclose = () => console.log(\"WS closed\");\n    wsRef.current.onmessage = async ({\n      data\n    }) => {\n      let msg;\n      try {\n        msg = JSON.parse(data);\n      } catch {\n        return;\n      }\n      switch (msg.type) {\n        case \"room-status\":\n          console.log(\"room-status\", msg.peers);\n          if (msg.peers === 2 && statusRef.current === \"waiting\" && start && isInitiator) {\n            await initiateCall(true);\n          }\n          break;\n        // ...\n      }\n    };\n    return () => {\n      var _wsRef$current, _pcRef$current;\n      (_wsRef$current = wsRef.current) === null || _wsRef$current === void 0 ? void 0 : _wsRef$current.close();\n      (_pcRef$current = pcRef.current) === null || _pcRef$current === void 0 ? void 0 : _pcRef$current.close();\n    };\n  }, [callId]); // ❌ NE PAS mettre `start` ici sinon le WS est trop tard\n\n  // 3) PEER CONNECTION SETUP\n  async function initiateCall(isOfferer) {\n    setStatus(\"connecting\");\n    pcRef.current = new RTCPeerConnection({\n      iceServers: [{\n        urls: process.env.REACT_APP_STUN_SERVER\n      }]\n    });\n\n    // on utilise le stream déjà obtenu\n    if (!localStreamRef.current) {\n      // sécurité : si jamais getUserMedia n’était pas prêt\n      localStreamRef.current = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n    }\n    localStreamRef.current.getTracks().forEach(track => pcRef.current.addTrack(track, localStreamRef.current));\n\n    // handle remote track\n    pcRef.current.ontrack = ({\n      streams: [stream]\n    }) => {\n      if (remoteAudioRef.current) {\n        remoteAudioRef.current.srcObject = stream;\n        remoteAudioRef.current.play().catch(e => console.warn(\"Audio playback failed:\", e));\n      }\n      // mute/unmute events\n      const rt = stream.getAudioTracks()[0];\n      if (rt) {\n        rt.onmute = () => setRemoteMuted(true);\n        rt.onunmute = () => setRemoteMuted(false);\n      }\n      // remote speech detection\n      if (!remoteSpeaking) {\n        const audioCtxR = new (window.AudioContext || window.webkitAudioContext)();\n        const analyserR = audioCtxR.createAnalyser();\n        const srcR = audioCtxR.createMediaStreamSource(stream);\n        srcR.connect(analyserR);\n        analyserR.fftSize = 256;\n        const dataR = new Uint8Array(analyserR.frequencyBinCount);\n        (function detect() {\n          analyserR.getByteFrequencyData(dataR);\n          setRemoteSpeaking(dataR.reduce((a, v) => a + v, 0) / dataR.length > 30);\n          requestAnimationFrame(detect);\n        })();\n      }\n    };\n\n    // data channel pour chat + mute signalling\n    if (isOfferer) {\n      dataChannelRef.current = pcRef.current.createDataChannel(\"chat\");\n      setupDataChannel();\n    } else {\n      pcRef.current.ondatachannel = ({\n        channel\n      }) => {\n        dataChannelRef.current = channel;\n        setupDataChannel();\n      };\n    }\n\n    // ICE\n    pcRef.current.onicecandidate = ({\n      candidate\n    }) => {\n      if (candidate) {\n        wsRef.current.send(JSON.stringify({\n          type: \"candidate\",\n          candidate\n        }));\n      }\n    };\n\n    // offer\n    if (isOfferer) {\n      const offer = await pcRef.current.createOffer();\n      await pcRef.current.setLocalDescription(offer);\n      wsRef.current.send(JSON.stringify({\n        type: \"offer\",\n        offer\n      }));\n    }\n    setStatus(\"connected\");\n  }\n  function setupDataChannel() {\n    dataChannelRef.current.onopen = () => console.log(\"DC open\");\n    dataChannelRef.current.onmessage = ({\n      data\n    }) => {\n      var _parsed;\n      let parsed;\n      try {\n        parsed = JSON.parse(data);\n      } catch {}\n      if (((_parsed = parsed) === null || _parsed === void 0 ? void 0 : _parsed.type) === \"mute\") {\n        setRemoteMuted(parsed.muted);\n        return;\n      }\n      setChatMessages(prev => [...prev, {\n        sender: \"peer\",\n        text: data\n      }]);\n    };\n  }\n\n  // --- PUBLIC API ---\n  function sendMessage(text) {\n    var _dataChannelRef$curre;\n    if (((_dataChannelRef$curre = dataChannelRef.current) === null || _dataChannelRef$curre === void 0 ? void 0 : _dataChannelRef$curre.readyState) === \"open\") {\n      dataChannelRef.current.send(text);\n      setChatMessages(prev => [...prev, {\n        sender: \"local\",\n        text\n      }]);\n    }\n  }\n  function toggleMute() {\n    var _localStreamRef$curre, _dataChannelRef$curre2;\n    const track = (_localStreamRef$curre = localStreamRef.current) === null || _localStreamRef$curre === void 0 ? void 0 : _localStreamRef$curre.getAudioTracks()[0];\n    if (!track) return;\n    track.enabled = !track.enabled;\n    if (!isInitiator && ((_dataChannelRef$curre2 = dataChannelRef.current) === null || _dataChannelRef$curre2 === void 0 ? void 0 : _dataChannelRef$curre2.readyState) === \"open\") {\n      dataChannelRef.current.send(JSON.stringify({\n        type: \"mute\",\n        muted: !track.enabled\n      }));\n    }\n  }\n  function hangUp() {\n    var _localStreamRef$curre2;\n    if (isInitiator) {\n      wsRef.current.send(JSON.stringify({\n        type: \"end-call\"\n      }));\n    }\n    setStatus(\"ended\");\n    (_localStreamRef$curre2 = localStreamRef.current) === null || _localStreamRef$curre2 === void 0 ? void 0 : _localStreamRef$curre2.getTracks().forEach(t => t.stop());\n    if (remoteAudioRef.current) remoteAudioRef.current.srcObject = null;\n    setTimeout(() => {\n      var _wsRef$current2, _pcRef$current2;\n      (_wsRef$current2 = wsRef.current) === null || _wsRef$current2 === void 0 ? void 0 : _wsRef$current2.close();\n      (_pcRef$current2 = pcRef.current) === null || _pcRef$current2 === void 0 ? void 0 : _pcRef$current2.close();\n    }, 100);\n  }\n  return {\n    remoteAudioRef,\n    status,\n    chatMessages,\n    sendMessage,\n    toggleMute,\n    hangUp,\n    localSpeaking,\n    remoteSpeaking,\n    remoteMuted\n  };\n}\n_s(useWebRTC, \"kNVkQRP/bn1rIT3nAdkBUn9hhUs=\");","map":{"version":3,"names":["useEffect","useRef","useState","useWebRTC","callId","timeout","start","isInitiator","_s","wsRef","pcRef","dataChannelRef","remoteAudioRef","localStreamRef","status","setStatus","statusRef","current","chatMessages","setChatMessages","localSpeaking","setLocalSpeaking","remoteSpeaking","setRemoteSpeaking","remoteMuted","setRemoteMuted","navigator","mediaDevices","getUserMedia","audio","then","stream","audioCtx","window","AudioContext","webkitAudioContext","analyser","createAnalyser","src","createMediaStreamSource","connect","fftSize","dataArr","Uint8Array","frequencyBinCount","detect","getByteFrequencyData","reduce","a","v","length","requestAnimationFrame","catch","err","console","error","serverUrl","process","env","REACT_APP_SERVER_URL","WebSocket","replace","onopen","log","onclose","onmessage","data","msg","JSON","parse","type","peers","initiateCall","_wsRef$current","_pcRef$current","close","isOfferer","RTCPeerConnection","iceServers","urls","REACT_APP_STUN_SERVER","getTracks","forEach","track","addTrack","ontrack","streams","srcObject","play","e","warn","rt","getAudioTracks","onmute","onunmute","audioCtxR","analyserR","srcR","dataR","createDataChannel","setupDataChannel","ondatachannel","channel","onicecandidate","candidate","send","stringify","offer","createOffer","setLocalDescription","_parsed","parsed","muted","prev","sender","text","sendMessage","_dataChannelRef$curre","readyState","toggleMute","_localStreamRef$curre","_dataChannelRef$curre2","enabled","hangUp","_localStreamRef$curre2","t","stop","setTimeout","_wsRef$current2","_pcRef$current2"],"sources":["/Users/theodiamant/Desktop/webrtc/client/src/hooks/useWebRTC.js"],"sourcesContent":["// src/hooks/useWebRTC.js\nimport { useEffect, useRef, useState } from \"react\";\n\nexport default function useWebRTC(\n  callId,\n  { timeout = 30000, start = true, isInitiator = false }\n) {\n  // --- refs & state ---\n  const wsRef = useRef();\n  const pcRef = useRef();\n  const dataChannelRef = useRef();\n  const remoteAudioRef = useRef();\n  const localStreamRef = useRef();            // stream obtenu dès start\n  const [status, setStatus] = useState(\"waiting\");\n  const statusRef = useRef(status);\n  useEffect(() => { statusRef.current = status; }, [status]);\n\n  const [chatMessages, setChatMessages] = useState([]);\n  const [localSpeaking, setLocalSpeaking] = useState(false);\n  const [remoteSpeaking, setRemoteSpeaking] = useState(false);\n  const [remoteMuted, setRemoteMuted] = useState(false);\n\n  // 1) Demande d'accès au micro dès que start = true\n  useEffect(() => {\n    if (!start) return;\n    navigator.mediaDevices.getUserMedia({ audio: true })\n      .then(stream => {\n        localStreamRef.current = stream;\n        // on peut commencer dès maintenant à détecter la parole locale\n        const audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n        const analyser = audioCtx.createAnalyser();\n        const src = audioCtx.createMediaStreamSource(stream);\n        src.connect(analyser);\n        analyser.fftSize = 256;\n        const dataArr = new Uint8Array(analyser.frequencyBinCount);\n        (function detect() {\n          analyser.getByteFrequencyData(dataArr);\n          setLocalSpeaking(dataArr.reduce((a,v)=>a+v,0)/dataArr.length > 30);\n          requestAnimationFrame(detect);\n        })();\n      })\n      .catch(err => {\n        console.error(\"Microphone access denied\", err);\n        // on peut définir un statut d'erreur si besoin\n      });\n  }, [start]);\n\n  // 2) SIGNALING WS SETUP\n  // 1) SIGNALING WS SETUP (connecte TOUJOURS au WS à l’arrivée sur la page)\nuseEffect(() => {\n  const serverUrl = process.env.REACT_APP_SERVER_URL;\n  wsRef.current = new WebSocket(\n    `${serverUrl.replace(/^http/, \"ws\")}?roomId=${callId}`\n  );\n  wsRef.current.onopen = () => console.log(\"WS open\");\n  wsRef.current.onclose = () => console.log(\"WS closed\");\n\n  wsRef.current.onmessage = async ({ data }) => {\n    let msg;\n    try { msg = JSON.parse(data); } catch { return; }\n    switch (msg.type) {\n      case \"room-status\":\n        console.log(\"room-status\", msg.peers);\n        if (msg.peers === 2 && statusRef.current === \"waiting\" && start && isInitiator) {\n          await initiateCall(true);\n        }\n        break;\n      // ...\n    }\n  };\n\n  return () => {\n    wsRef.current?.close();\n    pcRef.current?.close();\n  };\n}, [callId]); // ❌ NE PAS mettre `start` ici sinon le WS est trop tard\n\n\n  // 3) PEER CONNECTION SETUP\n  async function initiateCall(isOfferer) {\n    setStatus(\"connecting\");\n    pcRef.current = new RTCPeerConnection({\n      iceServers: [{ urls: process.env.REACT_APP_STUN_SERVER }],\n    });\n\n    // on utilise le stream déjà obtenu\n    if (!localStreamRef.current) {\n      // sécurité : si jamais getUserMedia n’était pas prêt\n      localStreamRef.current = await navigator.mediaDevices.getUserMedia({ audio: true });\n    }\n    localStreamRef.current.getTracks().forEach(track =>\n      pcRef.current.addTrack(track, localStreamRef.current)\n    );\n\n    // handle remote track\n    pcRef.current.ontrack = ({ streams: [stream] }) => {\n      if (remoteAudioRef.current) {\n        remoteAudioRef.current.srcObject = stream;\n        remoteAudioRef.current\n          .play()\n          .catch(e => console.warn(\"Audio playback failed:\", e));\n      }\n      // mute/unmute events\n      const rt = stream.getAudioTracks()[0];\n      if (rt) {\n        rt.onmute = () => setRemoteMuted(true);\n        rt.onunmute = () => setRemoteMuted(false);\n      }\n      // remote speech detection\n      if (!remoteSpeaking) {\n        const audioCtxR = new (window.AudioContext || window.webkitAudioContext)();\n        const analyserR = audioCtxR.createAnalyser();\n        const srcR = audioCtxR.createMediaStreamSource(stream);\n        srcR.connect(analyserR);\n        analyserR.fftSize = 256;\n        const dataR = new Uint8Array(analyserR.frequencyBinCount);\n        (function detect() {\n          analyserR.getByteFrequencyData(dataR);\n          setRemoteSpeaking(dataR.reduce((a,v)=>a+v,0)/dataR.length > 30);\n          requestAnimationFrame(detect);\n        })();\n      }\n    };\n\n    // data channel pour chat + mute signalling\n    if (isOfferer) {\n      dataChannelRef.current = pcRef.current.createDataChannel(\"chat\");\n      setupDataChannel();\n    } else {\n      pcRef.current.ondatachannel = ({ channel }) => {\n        dataChannelRef.current = channel;\n        setupDataChannel();\n      };\n    }\n\n    // ICE\n    pcRef.current.onicecandidate = ({ candidate }) => {\n      if (candidate) {\n        wsRef.current.send(JSON.stringify({ type: \"candidate\", candidate }));\n      }\n    };\n\n    // offer\n    if (isOfferer) {\n      const offer = await pcRef.current.createOffer();\n      await pcRef.current.setLocalDescription(offer);\n      wsRef.current.send(JSON.stringify({ type: \"offer\", offer }));\n    }\n\n    setStatus(\"connected\");\n  }\n\n  function setupDataChannel() {\n    dataChannelRef.current.onopen = () => console.log(\"DC open\");\n    dataChannelRef.current.onmessage = ({ data }) => {\n      let parsed;\n      try { parsed = JSON.parse(data); } catch {}\n      if (parsed?.type === \"mute\") {\n        setRemoteMuted(parsed.muted);\n        return;\n      }\n      setChatMessages(prev => [...prev, { sender: \"peer\", text: data }]);\n    };\n  }\n\n  // --- PUBLIC API ---\n  function sendMessage(text) {\n    if (dataChannelRef.current?.readyState === \"open\") {\n      dataChannelRef.current.send(text);\n      setChatMessages(prev => [...prev, { sender: \"local\", text }]);\n    }\n  }\n\n  function toggleMute() {\n    const track = localStreamRef.current?.getAudioTracks()[0];\n    if (!track) return;\n    track.enabled = !track.enabled;\n    if (!isInitiator && dataChannelRef.current?.readyState === \"open\") {\n      dataChannelRef.current.send(\n        JSON.stringify({ type: \"mute\", muted: !track.enabled })\n      );\n    }\n  }\n\n  function hangUp() {\n    if (isInitiator) {\n      wsRef.current.send(JSON.stringify({ type: \"end-call\" }));\n    }\n    setStatus(\"ended\");\n    localStreamRef.current?.getTracks().forEach(t => t.stop());\n    if (remoteAudioRef.current) remoteAudioRef.current.srcObject = null;\n    setTimeout(() => {\n      wsRef.current?.close();\n      pcRef.current?.close();\n    }, 100);\n  }\n\n  return {\n    remoteAudioRef,\n    status,\n    chatMessages,\n    sendMessage,\n    toggleMute,\n    hangUp,\n    localSpeaking,\n    remoteSpeaking,\n    remoteMuted,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
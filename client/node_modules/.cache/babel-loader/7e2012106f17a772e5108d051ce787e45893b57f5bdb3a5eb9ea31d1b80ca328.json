{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useWebRTC.js\nimport { useEffect, useRef, useState } from \"react\";\nexport default function useWebRTC(callId, {\n  timeout = 30000,\n  start = true,\n  isInitiator = false\n}) {\n  _s();\n  // --- status + ref so our onmessage callback sees the current status ---\n  const [status, setStatus] = useState(\"waiting\");\n  const statusRef = useRef(status);\n  useEffect(() => {\n    statusRef.current = status;\n  }, [status]);\n  const wsRef = useRef();\n  const pcRef = useRef();\n  const dataChannelRef = useRef();\n  const remoteAudioRef = useRef();\n  const localStreamRef = useRef();\n  const [chatMessages, setChatMessages] = useState([]);\n  const [localSpeaking, setLocalSpeaking] = useState(false);\n  const [remoteSpeaking, setRemoteSpeaking] = useState(false);\n  const [remoteMuted, setRemoteMuted] = useState(false);\n  const [isChannelOpen, setIsChannelOpen] = useState(false);\n\n  // 1) open WebSocket, handle signaling\n  useEffect(() => {\n    if (!start) return;\n    const serverUrl = process.env.REACT_APP_SERVER_URL;\n    wsRef.current = new WebSocket(`${serverUrl.replace(/^http/, \"ws\")}?roomId=${callId}`);\n    wsRef.current.onopen = () => console.log(\"%cWS open\", \"color:green;font-weight:bold;\", new Date());\n    wsRef.current.onclose = () => console.log(\"%cWS closed\", \"color:gray;font-weight:bold;\", new Date());\n    wsRef.current.onmessage = async ({\n      data\n    }) => {\n      console.log(\"%cWS ←\", \"color:purple;\", data);\n      let msg;\n      try {\n        msg = JSON.parse(typeof data === \"string\" ? data : data.toString());\n      } catch {\n        return;\n      }\n      console.log(\"%cSignal→\", \"color:blue;\", msg.type, msg);\n      switch (msg.type) {\n        case \"room-status\":\n          console.log(\"room-status:\", msg.peers, \"peerCount\");\n          if (msg.peers === 2 && statusRef.current === \"waiting\") {\n            await initiateCall(isInitiator);\n          }\n          break;\n        case \"offer\":\n          console.log(\"received OFFER\", msg.offer);\n          await pcRef.current.setRemoteDescription(msg.offer);\n          {\n            const answer = await pcRef.current.createAnswer();\n            console.log(\"created ANSWER\", answer);\n            await pcRef.current.setLocalDescription(answer);\n            wsRef.current.send(JSON.stringify({\n              type: \"answer\",\n              answer\n            }));\n          }\n          break;\n        case \"answer\":\n          console.log(\"received ANSWER\", msg.answer);\n          await pcRef.current.setRemoteDescription(msg.answer);\n          break;\n        case \"candidate\":\n          console.log(\"received CANDIDATE\", msg.candidate);\n          await pcRef.current.addIceCandidate(msg.candidate);\n          break;\n        case \"peer-left\":\n          console.log(\"peer-left\");\n          setStatus(\"peer-left\");\n          break;\n        case \"call-ended\":\n          console.log(\"call-ended\");\n          setStatus(\"ended\");\n          break;\n      }\n    };\n    const timer = setTimeout(() => {\n      if (statusRef.current !== \"connected\") {\n        console.log(\"timeout: no connection in\", timeout, \"ms\");\n        setStatus(\"timeout\");\n      }\n    }, timeout);\n    return () => {\n      var _wsRef$current, _pcRef$current;\n      clearTimeout(timer);\n      (_wsRef$current = wsRef.current) === null || _wsRef$current === void 0 ? void 0 : _wsRef$current.close();\n      (_pcRef$current = pcRef.current) === null || _pcRef$current === void 0 ? void 0 : _pcRef$current.close();\n    };\n  }, [callId, start, isInitiator]);\n\n  // --- setup PeerConnection, media, data channel ---\n  async function initiateCall(isInitiator) {\n    console.log(\"%c⏱ initiateCall()\", \"color:orange;\", {\n      isInitiator\n    });\n    setStatus(\"connecting\");\n    pcRef.current = new RTCPeerConnection({\n      iceServers: [{\n        urls: process.env.REACT_APP_STUN_SERVER\n      }]\n    });\n    pcRef.current.onconnectionstatechange = () => console.log(\"PC connectionState:\", pcRef.current.connectionState);\n    pcRef.current.oniceconnectionstatechange = () => console.log(\"PC iceConnectionState:\", pcRef.current.iceConnectionState);\n\n    // get local audio\n    localStreamRef.current = await navigator.mediaDevices.getUserMedia({\n      audio: true\n    });\n    console.log(\"got localStream:\", localStreamRef.current);\n\n    // speech detection local\n    const audioCtxL = new (window.AudioContext || window.webkitAudioContext)();\n    const analyserL = audioCtxL.createAnalyser();\n    const srcL = audioCtxL.createMediaStreamSource(localStreamRef.current);\n    srcL.connect(analyserL);\n    analyserL.fftSize = 256;\n    const dataL = new Uint8Array(analyserL.frequencyBinCount);\n    (function detectLocal() {\n      analyserL.getByteFrequencyData(dataL);\n      setLocalSpeaking(dataL.reduce((sum, v) => sum + v, 0) / dataL.length > 30);\n      requestAnimationFrame(detectLocal);\n    })();\n\n    // add local tracks\n    localStreamRef.current.getTracks().forEach(t => {\n      console.log(\"addTrack:\", t.kind);\n      pcRef.current.addTrack(t, localStreamRef.current);\n    });\n\n    // handle remote track\n    pcRef.current.ontrack = ({\n      streams: [stream]\n    }) => {\n      console.log(\"%cPC ontrack →\", \"color:teal;\", stream);\n      if (remoteAudioRef.current) remoteAudioRef.current.srcObject = stream;\n      const rt = stream.getAudioTracks()[0];\n      if (rt) {\n        rt.onmute = () => {\n          console.log(\"remote track muted\");\n          setRemoteMuted(true);\n        };\n        rt.onunmute = () => {\n          console.log(\"remote track unmuted\");\n          setRemoteMuted(false);\n        };\n      }\n      if (!remoteSpeaking) {\n        const audioCtxR = new (window.AudioContext || window.webkitAudioContext)();\n        const analyserR = audioCtxR.createAnalyser();\n        const srcR = audioCtxR.createMediaStreamSource(stream);\n        srcR.connect(analyserR);\n        analyserR.fftSize = 256;\n        const dataR = new Uint8Array(analyserR.frequencyBinCount);\n        (function detectRemote() {\n          analyserR.getByteFrequencyData(dataR);\n          setRemoteSpeaking(dataR.reduce((sum, v) => sum + v, 0) / dataR.length > 30);\n          requestAnimationFrame(detectRemote);\n        })();\n      }\n    };\n\n    // data channel setup\n    if (isInitiator) {\n      console.log(\"creating DataChannel as initiator\");\n      dataChannelRef.current = pcRef.current.createDataChannel(\"chat\");\n      setupDataChannel();\n    } else {\n      pcRef.current.ondatachannel = ({\n        channel\n      }) => {\n        console.log(\"ondatachannel event → received channel\", channel);\n        dataChannelRef.current = channel;\n        setupDataChannel();\n      };\n    }\n    pcRef.current.onicecandidate = ({\n      candidate\n    }) => {\n      console.log(\"onicecandidate → send\", candidate);\n      if (candidate) wsRef.current.send(JSON.stringify({\n        type: \"candidate\",\n        candidate\n      }));\n    };\n    if (isInitiator) {\n      const offer = await pcRef.current.createOffer();\n      console.log(\"created OFFER\", offer);\n      await pcRef.current.setLocalDescription(offer);\n      wsRef.current.send(JSON.stringify({\n        type: \"offer\",\n        offer\n      }));\n    }\n    setStatus(\"connected\");\n    console.log(\"status → connected\");\n  }\n  function setupDataChannel() {\n    dataChannelRef.current.onopen = () => {\n      console.log(\"%cDataChannel open\", \"color:green;\", dataChannelRef.current);\n      setIsChannelOpen(true);\n    };\n    dataChannelRef.current.onclose = () => {\n      console.log(\"%cDataChannel closed\", \"color:red;\", dataChannelRef.current);\n      setIsChannelOpen(false);\n    };\n    dataChannelRef.current.onmessage = ({\n      data\n    }) => {\n      console.log(\"%cDataChannel ← peer:\", \"color:purple;\", data);\n      setChatMessages(prev => [...prev, {\n        sender: \"peer\",\n        text: data\n      }]);\n    };\n  }\n  function sendMessage(text) {\n    var _dataChannelRef$curre;\n    console.log(\"sendMessage() →\", text, \"DCstate:\", (_dataChannelRef$curre = dataChannelRef.current) === null || _dataChannelRef$curre === void 0 ? void 0 : _dataChannelRef$curre.readyState);\n    setChatMessages(prev => [...prev, {\n      sender: \"local\",\n      text\n    }]);\n    if (dataChannelRef.current) {\n      try {\n        dataChannelRef.current.send(text);\n      } catch (e) {\n        console.error(\"%cDataChannel.send ERROR\", \"color:red;\", e);\n      }\n    } else {\n      console.warn(\"DataChannel non initialisé, pas d’envoi au pair :\", text);\n    }\n  }\n  function toggleMute() {\n    var _localStreamRef$curre;\n    const t = (_localStreamRef$curre = localStreamRef.current) === null || _localStreamRef$curre === void 0 ? void 0 : _localStreamRef$curre.getAudioTracks()[0];\n    if (t) t.enabled = !t;\n  }\n  function hangUp() {\n    var _localStreamRef$curre2;\n    if (isInitiator) {\n      wsRef.current.send(JSON.stringify({\n        type: \"end-call\"\n      }));\n    }\n    console.log(\"hangUp()\");\n    setStatus(\"ended\");\n    (_localStreamRef$curre2 = localStreamRef.current) === null || _localStreamRef$curre2 === void 0 ? void 0 : _localStreamRef$curre2.getTracks().forEach(t => t.stop());\n    if (remoteAudioRef.current) remoteAudioRef.current.srcObject = null;\n    setTimeout(() => {\n      var _wsRef$current2, _pcRef$current2;\n      (_wsRef$current2 = wsRef.current) === null || _wsRef$current2 === void 0 ? void 0 : _wsRef$current2.close();\n      (_pcRef$current2 = pcRef.current) === null || _pcRef$current2 === void 0 ? void 0 : _pcRef$current2.close();\n    }, 100);\n  }\n  return {\n    remoteAudioRef,\n    status,\n    chatMessages,\n    sendMessage,\n    toggleMute,\n    hangUp,\n    localSpeaking,\n    remoteSpeaking,\n    remoteMuted,\n    isChannelOpen\n  };\n}\n_s(useWebRTC, \"57q8djH89EADKyJ4WZAcEuUFvQc=\");","map":{"version":3,"names":["useEffect","useRef","useState","useWebRTC","callId","timeout","start","isInitiator","_s","status","setStatus","statusRef","current","wsRef","pcRef","dataChannelRef","remoteAudioRef","localStreamRef","chatMessages","setChatMessages","localSpeaking","setLocalSpeaking","remoteSpeaking","setRemoteSpeaking","remoteMuted","setRemoteMuted","isChannelOpen","setIsChannelOpen","serverUrl","process","env","REACT_APP_SERVER_URL","WebSocket","replace","onopen","console","log","Date","onclose","onmessage","data","msg","JSON","parse","toString","type","peers","initiateCall","offer","setRemoteDescription","answer","createAnswer","setLocalDescription","send","stringify","candidate","addIceCandidate","timer","setTimeout","_wsRef$current","_pcRef$current","clearTimeout","close","RTCPeerConnection","iceServers","urls","REACT_APP_STUN_SERVER","onconnectionstatechange","connectionState","oniceconnectionstatechange","iceConnectionState","navigator","mediaDevices","getUserMedia","audio","audioCtxL","window","AudioContext","webkitAudioContext","analyserL","createAnalyser","srcL","createMediaStreamSource","connect","fftSize","dataL","Uint8Array","frequencyBinCount","detectLocal","getByteFrequencyData","reduce","sum","v","length","requestAnimationFrame","getTracks","forEach","t","kind","addTrack","ontrack","streams","stream","srcObject","rt","getAudioTracks","onmute","onunmute","audioCtxR","analyserR","srcR","dataR","detectRemote","createDataChannel","setupDataChannel","ondatachannel","channel","onicecandidate","createOffer","prev","sender","text","sendMessage","_dataChannelRef$curre","readyState","e","error","warn","toggleMute","_localStreamRef$curre","enabled","hangUp","_localStreamRef$curre2","stop","_wsRef$current2","_pcRef$current2"],"sources":["/Users/theodiamant/Desktop/webrtc/client/src/hooks/useWebRTC.js"],"sourcesContent":["// src/hooks/useWebRTC.js\nimport { useEffect, useRef, useState } from \"react\";\n\nexport default function useWebRTC(\n  callId,\n  { timeout = 30000, start = true, isInitiator = false }\n) {\n  // --- status + ref so our onmessage callback sees the current status ---\n  const [status, setStatus] = useState(\"waiting\");\n  const statusRef = useRef(status);\n  useEffect(() => {\n    statusRef.current = status;\n  }, [status]);\n\n  const wsRef = useRef();\n  const pcRef = useRef();\n  const dataChannelRef = useRef();\n  const remoteAudioRef = useRef();\n  const localStreamRef = useRef();\n\n  const [chatMessages, setChatMessages] = useState([]);\n  const [localSpeaking, setLocalSpeaking] = useState(false);\n  const [remoteSpeaking, setRemoteSpeaking] = useState(false);\n  const [remoteMuted, setRemoteMuted] = useState(false);\n  const [isChannelOpen, setIsChannelOpen] = useState(false);\n\n  // 1) open WebSocket, handle signaling\n  useEffect(() => {\n    if (!start) return;\n\n    const serverUrl = process.env.REACT_APP_SERVER_URL;\n    wsRef.current = new WebSocket(\n      `${serverUrl.replace(/^http/, \"ws\")}?roomId=${callId}`\n    );\n    wsRef.current.onopen = () =>\n      console.log(\"%cWS open\", \"color:green;font-weight:bold;\", new Date());\n    wsRef.current.onclose = () =>\n      console.log(\"%cWS closed\", \"color:gray;font-weight:bold;\", new Date());\n\n    wsRef.current.onmessage = async ({ data }) => {\n      console.log(\"%cWS ←\", \"color:purple;\", data);\n      let msg;\n      try {\n        msg = JSON.parse(typeof data === \"string\" ? data : data.toString());\n      } catch {\n        return;\n      }\n\n      console.log(\"%cSignal→\", \"color:blue;\", msg.type, msg);\n      switch (msg.type) {\n        case \"room-status\":\n          console.log(\"room-status:\", msg.peers, \"peerCount\");\n          if (msg.peers === 2 && statusRef.current === \"waiting\") {\n            await initiateCall(isInitiator);\n          }\n          break;\n\n        case \"offer\":\n          console.log(\"received OFFER\", msg.offer);\n          await pcRef.current.setRemoteDescription(msg.offer);\n          {\n            const answer = await pcRef.current.createAnswer();\n            console.log(\"created ANSWER\", answer);\n            await pcRef.current.setLocalDescription(answer);\n            wsRef.current.send(JSON.stringify({ type: \"answer\", answer }));\n          }\n          break;\n\n        case \"answer\":\n          console.log(\"received ANSWER\", msg.answer);\n          await pcRef.current.setRemoteDescription(msg.answer);\n          break;\n\n        case \"candidate\":\n          console.log(\"received CANDIDATE\", msg.candidate);\n          await pcRef.current.addIceCandidate(msg.candidate);\n          break;\n\n        case \"peer-left\":\n          console.log(\"peer-left\");\n          setStatus(\"peer-left\");\n          break;\n\n        case \"call-ended\":\n          console.log(\"call-ended\");\n          setStatus(\"ended\");\n          break;\n      }\n    };\n\n    const timer = setTimeout(() => {\n      if (statusRef.current !== \"connected\") {\n        console.log(\"timeout: no connection in\", timeout, \"ms\");\n        setStatus(\"timeout\");\n      }\n    }, timeout);\n\n    return () => {\n      clearTimeout(timer);\n      wsRef.current?.close();\n      pcRef.current?.close();\n    };\n  }, [callId, start, isInitiator]);\n\n  // --- setup PeerConnection, media, data channel ---\n  async function initiateCall(isInitiator) {\n    console.log(\"%c⏱ initiateCall()\", \"color:orange;\", { isInitiator });\n    setStatus(\"connecting\");\n\n    pcRef.current = new RTCPeerConnection({\n      iceServers: [{ urls: process.env.REACT_APP_STUN_SERVER }],\n    });\n\n    pcRef.current.onconnectionstatechange = () =>\n      console.log(\"PC connectionState:\", pcRef.current.connectionState);\n    pcRef.current.oniceconnectionstatechange = () =>\n      console.log(\"PC iceConnectionState:\", pcRef.current.iceConnectionState);\n\n    // get local audio\n    localStreamRef.current = await navigator.mediaDevices.getUserMedia({\n      audio: true,\n    });\n    console.log(\"got localStream:\", localStreamRef.current);\n\n    // speech detection local\n    const audioCtxL = new (window.AudioContext || window.webkitAudioContext)();\n    const analyserL = audioCtxL.createAnalyser();\n    const srcL = audioCtxL.createMediaStreamSource(localStreamRef.current);\n    srcL.connect(analyserL);\n    analyserL.fftSize = 256;\n    const dataL = new Uint8Array(analyserL.frequencyBinCount);\n    (function detectLocal() {\n      analyserL.getByteFrequencyData(dataL);\n      setLocalSpeaking(\n        dataL.reduce((sum, v) => sum + v, 0) / dataL.length > 30\n      );\n      requestAnimationFrame(detectLocal);\n    })();\n\n    // add local tracks\n    localStreamRef.current.getTracks().forEach((t) => {\n      console.log(\"addTrack:\", t.kind);\n      pcRef.current.addTrack(t, localStreamRef.current);\n    });\n\n    // handle remote track\n    pcRef.current.ontrack = ({ streams: [stream] }) => {\n      console.log(\"%cPC ontrack →\", \"color:teal;\", stream);\n      if (remoteAudioRef.current) remoteAudioRef.current.srcObject = stream;\n\n      const rt = stream.getAudioTracks()[0];\n      if (rt) {\n        rt.onmute = () => {\n          console.log(\"remote track muted\");\n          setRemoteMuted(true);\n        };\n        rt.onunmute = () => {\n          console.log(\"remote track unmuted\");\n          setRemoteMuted(false);\n        };\n      }\n\n      if (!remoteSpeaking) {\n        const audioCtxR =\n          new (window.AudioContext || window.webkitAudioContext)();\n        const analyserR = audioCtxR.createAnalyser();\n        const srcR = audioCtxR.createMediaStreamSource(stream);\n        srcR.connect(analyserR);\n        analyserR.fftSize = 256;\n        const dataR = new Uint8Array(analyserR.frequencyBinCount);\n        (function detectRemote() {\n          analyserR.getByteFrequencyData(dataR);\n          setRemoteSpeaking(\n            dataR.reduce((sum, v) => sum + v, 0) / dataR.length > 30\n          );\n          requestAnimationFrame(detectRemote);\n        })();\n      }\n    };\n\n    // data channel setup\n    if (isInitiator) {\n      console.log(\"creating DataChannel as initiator\");\n      dataChannelRef.current = pcRef.current.createDataChannel(\"chat\");\n      setupDataChannel();\n    } else {\n      pcRef.current.ondatachannel = ({ channel }) => {\n        console.log(\"ondatachannel event → received channel\", channel);\n        dataChannelRef.current = channel;\n        setupDataChannel();\n      };\n    }\n\n    pcRef.current.onicecandidate = ({ candidate }) => {\n      console.log(\"onicecandidate → send\", candidate);\n      if (candidate)\n        wsRef.current.send(JSON.stringify({ type: \"candidate\", candidate }));\n    };\n\n    if (isInitiator) {\n      const offer = await pcRef.current.createOffer();\n      console.log(\"created OFFER\", offer);\n      await pcRef.current.setLocalDescription(offer);\n      wsRef.current.send(JSON.stringify({ type: \"offer\", offer }));\n    }\n\n    setStatus(\"connected\");\n    console.log(\"status → connected\");\n  }\n\n  function setupDataChannel() {\n    dataChannelRef.current.onopen = () => {\n      console.log(\"%cDataChannel open\", \"color:green;\", dataChannelRef.current);\n      setIsChannelOpen(true);\n    };\n    dataChannelRef.current.onclose = () => {\n      console.log(\"%cDataChannel closed\", \"color:red;\", dataChannelRef.current);\n      setIsChannelOpen(false);\n    };\n    dataChannelRef.current.onmessage = ({ data }) => {\n      console.log(\"%cDataChannel ← peer:\", \"color:purple;\", data);\n      setChatMessages((prev) => [...prev, { sender: \"peer\", text: data }]);\n    };\n  }\n\n  function sendMessage(text) {\n    console.log(\n      \"sendMessage() →\",\n      text,\n      \"DCstate:\",\n      dataChannelRef.current?.readyState\n    );\n    setChatMessages((prev) => [...prev, { sender: \"local\", text }]);\n\n    if (dataChannelRef.current) {\n      try {\n        dataChannelRef.current.send(text);\n      } catch (e) {\n        console.error(\"%cDataChannel.send ERROR\", \"color:red;\", e);\n      }\n    } else {\n      console.warn(\"DataChannel non initialisé, pas d’envoi au pair :\", text);\n    }\n  }\n\n  function toggleMute() {\n    const t = localStreamRef.current?.getAudioTracks()[0];\n    if (t) t.enabled = !t;\n  }\n\n  function hangUp() {\n    if (isInitiator) {\n      wsRef.current.send(JSON.stringify({ type: \"end-call\" }));\n    }\n    console.log(\"hangUp()\");\n    setStatus(\"ended\");\n    localStreamRef.current?.getTracks().forEach((t) => t.stop());\n    if (remoteAudioRef.current) remoteAudioRef.current.srcObject = null;\n    setTimeout(() => {\n      wsRef.current?.close();\n      pcRef.current?.close();\n    }, 100);\n  }\n\n  return {\n    remoteAudioRef,\n    status,\n    chatMessages,\n    sendMessage,\n    toggleMute,\n    hangUp,\n    localSpeaking,\n    remoteSpeaking,\n    remoteMuted,\n    isChannelOpen,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _s = $RefreshSig$();\n/* client/src/hooks/useWebRTC.js */\nimport { useEffect, useRef, useState } from \"react\";\nexport default function useWebRTC(callId, {\n  isInitiator = false\n}) {\n  _s();\n  const [status, setStatus] = useState(\"waiting\");\n  const wsRef = useRef();\n  const pcRef = useRef();\n  const dataChannelRef = useRef();\n  const remoteAudioRef = useRef();\n  const localStreamRef = useRef();\n  const [chatMessages, setChatMessages] = useState([]);\n  const [localSpeaking, setLocalSpeaking] = useState(false);\n  const [remoteSpeaking, setRemoteSpeaking] = useState(false);\n  const [remoteMuted, setRemoteMuted] = useState(false);\n  useEffect(() => {\n    // open WS\n    const serverUrl = process.env.REACT_APP_SERVER_URL;\n    wsRef.current = new WebSocket(`${serverUrl.replace(/^http/, \"ws\")}?roomId=${callId}`);\n    wsRef.current.onopen = () => console.log(\"WS open\");\n    wsRef.current.onclose = () => console.log(\"WS closed\");\n    wsRef.current.onmessage = async ({\n      data\n    }) => {\n      let msg;\n      try {\n        msg = JSON.parse(data);\n      } catch {\n        return;\n      }\n      switch (msg.type) {\n        case \"room-status\":\n          if (msg.peers === 2 && status === \"waiting\") {\n            initiateCall();\n          }\n          break;\n        case \"offer\":\n          await pcRef.current.setRemoteDescription(msg.offer);\n          const answer = await pcRef.current.createAnswer();\n          await pcRef.current.setLocalDescription(answer);\n          wsRef.current.send(JSON.stringify({\n            type: \"answer\",\n            answer\n          }));\n          break;\n        case \"answer\":\n          await pcRef.current.setRemoteDescription(msg.answer);\n          break;\n        case \"candidate\":\n          await pcRef.current.addIceCandidate(msg.candidate);\n          break;\n        case \"peer-left\":\n          setStatus(\"peer-left\");\n          break;\n        case \"call-ended\":\n          setStatus(\"ended\");\n          break;\n        default:\n          break;\n      }\n    };\n    return () => {\n      var _wsRef$current, _pcRef$current, _localStreamRef$curre;\n      (_wsRef$current = wsRef.current) === null || _wsRef$current === void 0 ? void 0 : _wsRef$current.close();\n      (_pcRef$current = pcRef.current) === null || _pcRef$current === void 0 ? void 0 : _pcRef$current.close();\n      (_localStreamRef$curre = localStreamRef.current) === null || _localStreamRef$curre === void 0 ? void 0 : _localStreamRef$curre.getTracks().forEach(t => t.stop());\n    };\n  }, [callId, isInitiator]);\n  async function initiateCall() {\n    setStatus(\"connecting\");\n    pcRef.current = new RTCPeerConnection({\n      iceServers: [{\n        urls: process.env.REACT_APP_STUN_SERVER\n      }]\n    });\n\n    // ICE state change\n    pcRef.current.oniceconnectionstatechange = () => {\n      if (pcRef.current.iceConnectionState === \"connected\") {\n        setStatus(\"connected\");\n      }\n    };\n\n    // local audio\n    localStreamRef.current = await navigator.mediaDevices.getUserMedia({\n      audio: true\n    });\n    localStreamRef.current.getTracks().forEach(t => pcRef.current.addTrack(t, localStreamRef.current));\n\n    // remote audio\n    pcRef.current.ontrack = ({\n      streams: [stream]\n    }) => {\n      remoteAudioRef.current.srcObject = stream;\n      const track = stream.getAudioTracks()[0];\n      track.onmute = () => setRemoteMuted(true);\n      track.onunmute = () => setRemoteMuted(false);\n\n      // speech detection\n      const audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n      const analyser = audioCtx.createAnalyser();\n      const src = audioCtx.createMediaStreamSource(stream);\n      src.connect(analyser);\n      analyser.fftSize = 256;\n      const data = new Uint8Array(analyser.frequencyBinCount);\n      (function detect() {\n        analyser.getByteFrequencyData(data);\n        setRemoteSpeaking(data.reduce((sum, v) => sum + v, 0) / data.length > 30);\n        requestAnimationFrame(detect);\n      })();\n    };\n\n    // data channel\n    if (isInitiator) {\n      dataChannelRef.current = pcRef.current.createDataChannel(\"chat\");\n      setupChat();\n      const offer = await pcRef.current.createOffer();\n      await pcRef.current.setLocalDescription(offer);\n      wsRef.current.send(JSON.stringify({\n        type: \"offer\",\n        offer\n      }));\n    } else {\n      pcRef.current.ondatachannel = ({\n        channel\n      }) => {\n        dataChannelRef.current = channel;\n        setupChat();\n      };\n    }\n    pcRef.current.onicecandidate = ({\n      candidate\n    }) => {\n      if (candidate) wsRef.current.send(JSON.stringify({\n        type: \"candidate\",\n        candidate\n      }));\n    };\n  }\n  function setupChat() {\n    dataChannelRef.current.onopen = () => console.log(\"DataChannel open\");\n    dataChannelRef.current.onmessage = ({\n      data\n    }) => setChatMessages(prev => [...prev, {\n      sender: \"peer\",\n      text: data\n    }]);\n  }\n  function sendMessage(text) {\n    var _dataChannelRef$curre;\n    if (((_dataChannelRef$curre = dataChannelRef.current) === null || _dataChannelRef$curre === void 0 ? void 0 : _dataChannelRef$curre.readyState) === \"open\") {\n      dataChannelRef.current.send(text);\n      setChatMessages(prev => [...prev, {\n        sender: \"local\",\n        text\n      }]);\n    }\n  }\n  function toggleMute() {\n    const track = localStreamRef.current.getAudioTracks()[0];\n    track.enabled = !track.enabled;\n  }\n  function hangUp() {\n    wsRef.current.send(JSON.stringify({\n      type: \"end-call\"\n    }));\n    setStatus(\"ended\");\n    localStreamRef.current.getTracks().forEach(t => t.stop());\n    pcRef.current.close();\n  }\n  return {\n    remoteAudioRef,\n    status,\n    chatMessages,\n    sendMessage,\n    toggleMute,\n    hangUp,\n    localSpeaking,\n    remoteSpeaking,\n    remoteMuted\n  };\n}\n_s(useWebRTC, \"7d31rGrHhXT8lRdFLNdShbh3QuA=\");","map":{"version":3,"names":["useEffect","useRef","useState","useWebRTC","callId","isInitiator","_s","status","setStatus","wsRef","pcRef","dataChannelRef","remoteAudioRef","localStreamRef","chatMessages","setChatMessages","localSpeaking","setLocalSpeaking","remoteSpeaking","setRemoteSpeaking","remoteMuted","setRemoteMuted","serverUrl","process","env","REACT_APP_SERVER_URL","current","WebSocket","replace","onopen","console","log","onclose","onmessage","data","msg","JSON","parse","type","peers","initiateCall","setRemoteDescription","offer","answer","createAnswer","setLocalDescription","send","stringify","addIceCandidate","candidate","_wsRef$current","_pcRef$current","_localStreamRef$curre","close","getTracks","forEach","t","stop","RTCPeerConnection","iceServers","urls","REACT_APP_STUN_SERVER","oniceconnectionstatechange","iceConnectionState","navigator","mediaDevices","getUserMedia","audio","addTrack","ontrack","streams","stream","srcObject","track","getAudioTracks","onmute","onunmute","audioCtx","window","AudioContext","webkitAudioContext","analyser","createAnalyser","src","createMediaStreamSource","connect","fftSize","Uint8Array","frequencyBinCount","detect","getByteFrequencyData","reduce","sum","v","length","requestAnimationFrame","createDataChannel","setupChat","createOffer","ondatachannel","channel","onicecandidate","prev","sender","text","sendMessage","_dataChannelRef$curre","readyState","toggleMute","enabled","hangUp"],"sources":["/Users/theodiamant/Desktop/webrtc/client/src/hooks/useWebRTC.js"],"sourcesContent":["/* client/src/hooks/useWebRTC.js */\nimport { useEffect, useRef, useState } from \"react\";\n\nexport default function useWebRTC(callId, { isInitiator = false }) {\n  const [status, setStatus] = useState(\"waiting\");\n  const wsRef = useRef();\n  const pcRef = useRef();\n  const dataChannelRef = useRef();\n  const remoteAudioRef = useRef();\n  const localStreamRef = useRef();\n  const [chatMessages, setChatMessages] = useState([]);\n  const [localSpeaking, setLocalSpeaking] = useState(false);\n  const [remoteSpeaking, setRemoteSpeaking] = useState(false);\n  const [remoteMuted, setRemoteMuted] = useState(false);\n\n  useEffect(() => {\n    // open WS\n    const serverUrl = process.env.REACT_APP_SERVER_URL;\n    wsRef.current = new WebSocket(\n      `${serverUrl.replace(/^http/, \"ws\")}?roomId=${callId}`\n    );\n\n    wsRef.current.onopen = () => console.log(\"WS open\");\n    wsRef.current.onclose = () => console.log(\"WS closed\");\n\n    wsRef.current.onmessage = async ({ data }) => {\n      let msg;\n      try {\n        msg = JSON.parse(data);\n      } catch {\n        return;\n      }\n      switch (msg.type) {\n        case \"room-status\":\n          if (msg.peers === 2 && status === \"waiting\") {\n            initiateCall();\n          }\n          break;\n        case \"offer\":\n          await pcRef.current.setRemoteDescription(msg.offer);\n          const answer = await pcRef.current.createAnswer();\n          await pcRef.current.setLocalDescription(answer);\n          wsRef.current.send(JSON.stringify({ type: \"answer\", answer }));\n          break;\n        case \"answer\":\n          await pcRef.current.setRemoteDescription(msg.answer);\n          break;\n        case \"candidate\":\n          await pcRef.current.addIceCandidate(msg.candidate);\n          break;\n        case \"peer-left\":\n          setStatus(\"peer-left\");\n          break;\n        case \"call-ended\":\n          setStatus(\"ended\");\n          break;\n        default:\n          break;\n      }\n    };\n\n    return () => {\n      wsRef.current?.close();\n      pcRef.current?.close();\n      localStreamRef.current?.getTracks().forEach((t) => t.stop());\n    };\n  }, [callId, isInitiator]);\n\n  async function initiateCall() {\n    setStatus(\"connecting\");\n    pcRef.current = new RTCPeerConnection({\n      iceServers: [{ urls: process.env.REACT_APP_STUN_SERVER }],\n    });\n\n    // ICE state change\n    pcRef.current.oniceconnectionstatechange = () => {\n      if (pcRef.current.iceConnectionState === \"connected\") {\n        setStatus(\"connected\");\n      }\n    };\n\n    // local audio\n    localStreamRef.current = await navigator.mediaDevices.getUserMedia({\n      audio: true,\n    });\n    localStreamRef.current\n      .getTracks()\n      .forEach((t) => pcRef.current.addTrack(t, localStreamRef.current));\n\n    // remote audio\n    pcRef.current.ontrack = ({ streams: [stream] }) => {\n      remoteAudioRef.current.srcObject = stream;\n      const track = stream.getAudioTracks()[0];\n      track.onmute = () => setRemoteMuted(true);\n      track.onunmute = () => setRemoteMuted(false);\n\n      // speech detection\n      const audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n      const analyser = audioCtx.createAnalyser();\n      const src = audioCtx.createMediaStreamSource(stream);\n      src.connect(analyser);\n      analyser.fftSize = 256;\n      const data = new Uint8Array(analyser.frequencyBinCount);\n      (function detect() {\n        analyser.getByteFrequencyData(data);\n        setRemoteSpeaking(\n          data.reduce((sum, v) => sum + v, 0) / data.length > 30\n        );\n        requestAnimationFrame(detect);\n      })();\n    };\n\n    // data channel\n    if (isInitiator) {\n      dataChannelRef.current = pcRef.current.createDataChannel(\"chat\");\n      setupChat();\n      const offer = await pcRef.current.createOffer();\n      await pcRef.current.setLocalDescription(offer);\n      wsRef.current.send(JSON.stringify({ type: \"offer\", offer }));\n    } else {\n      pcRef.current.ondatachannel = ({ channel }) => {\n        dataChannelRef.current = channel;\n        setupChat();\n      };\n    }\n\n    pcRef.current.onicecandidate = ({ candidate }) => {\n      if (candidate)\n        wsRef.current.send(JSON.stringify({ type: \"candidate\", candidate }));\n    };\n  }\n\n  function setupChat() {\n    dataChannelRef.current.onopen = () => console.log(\"DataChannel open\");\n    dataChannelRef.current.onmessage = ({ data }) =>\n      setChatMessages((prev) => [...prev, { sender: \"peer\", text: data }]);\n  }\n\n  function sendMessage(text) {\n    if (dataChannelRef.current?.readyState === \"open\") {\n      dataChannelRef.current.send(text);\n      setChatMessages((prev) => [...prev, { sender: \"local\", text }]);\n    }\n  }\n\n  function toggleMute() {\n    const track = localStreamRef.current.getAudioTracks()[0];\n    track.enabled = !track.enabled;\n  }\n\n  function hangUp() {\n    wsRef.current.send(JSON.stringify({ type: \"end-call\" }));\n    setStatus(\"ended\");\n    localStreamRef.current.getTracks().forEach((t) => t.stop());\n    pcRef.current.close();\n  }\n\n  return {\n    remoteAudioRef,\n    status,\n    chatMessages,\n    sendMessage,\n    toggleMute,\n    hangUp,\n    localSpeaking,\n    remoteSpeaking,\n    remoteMuted,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
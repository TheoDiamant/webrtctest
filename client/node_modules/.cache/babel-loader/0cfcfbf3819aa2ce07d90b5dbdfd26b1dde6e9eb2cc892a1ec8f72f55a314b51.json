{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useWebRTC.js\nimport { useEffect, useRef, useState } from \"react\";\nexport default function useWebRTC(callId, {\n  timeout = 30000,\n  start = true,\n  isInitiator = false\n}) {\n  _s();\n  const wsRef = useRef();\n  const pcRef = useRef();\n  const dataChannelRef = useRef();\n  const remoteAudioRef = useRef();\n  const localStreamRef = useRef();\n  const [status, setStatus] = useState(\"waiting\");\n  const [chatMessages, setChatMessages] = useState([]);\n  const [localSpeaking, setLocalSpeaking] = useState(false);\n  const [remoteSpeaking, setRemoteSpeaking] = useState(false);\n  const [remoteMuted, setRemoteMuted] = useState(false);\n  useEffect(() => {\n    if (!start) return;\n    const serverUrl = process.env.REACT_APP_SERVER_URL;\n    wsRef.current = new WebSocket(`${serverUrl.replace(/^http/, \"ws\")}?roomId=${callId}`);\n    wsRef.current.onopen = () => console.log(\"WS open\");\n    wsRef.current.onclose = () => console.log(\"WS closed\");\n    wsRef.current.onmessage = async ({\n      data\n    }) => {\n      let msg;\n      try {\n        msg = JSON.parse(typeof data === \"string\" ? data : data.toString());\n      } catch {\n        return;\n      }\n      switch (msg.type) {\n        case \"room-status\":\n          if (msg.peers === 2 && status === \"waiting\") await initiateCall(isInitiator);\n          break;\n        case \"offer\":\n          await pcRef.current.setRemoteDescription(msg.offer);\n          {\n            const answer = await pcRef.current.createAnswer();\n            await pcRef.current.setLocalDescription(answer);\n            wsRef.current.send(JSON.stringify({\n              type: \"answer\",\n              answer\n            }));\n          }\n          break;\n        case \"answer\":\n          await pcRef.current.setRemoteDescription(msg.answer);\n          break;\n        case \"candidate\":\n          await pcRef.current.addIceCandidate(msg.candidate);\n          break;\n        case \"peer-left\":\n          setStatus(\"peer-left\");\n          break;\n        case \"call-ended\":\n          setStatus(\"ended\");\n          break;\n      }\n    };\n    async function initiateCall(isInitiator) {\n      setStatus(\"connecting\");\n      pcRef.current = new RTCPeerConnection({\n        iceServers: [{\n          urls: process.env.REACT_APP_STUN_SERVER\n        }]\n      });\n\n      // local audio + speech detection\n      localStreamRef.current = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      const audioCtxL = new (window.AudioContext || window.webkitAudioContext)();\n      const analyserL = audioCtxL.createAnalyser();\n      const srcL = audioCtxL.createMediaStreamSource(localStreamRef.current);\n      srcL.connect(analyserL);\n      analyserL.fftSize = 256;\n      const dataL = new Uint8Array(analyserL.frequencyBinCount);\n      function detectLocal() {\n        analyserL.getByteFrequencyData(dataL);\n        setLocalSpeaking(dataL.reduce((sum, v) => sum + v, 0) / dataL.length > 30);\n        requestAnimationFrame(detectLocal);\n      }\n      detectLocal();\n      localStreamRef.current.getTracks().forEach(t => pcRef.current.addTrack(t, localStreamRef.current));\n\n      // remote audio + speech & mute detection\n      pcRef.current.ontrack = ({\n        streams: [stream]\n      }) => {\n        if (remoteAudioRef.current) remoteAudioRef.current.srcObject = stream;\n\n        // detect mute / unmute on remote track\n        const rt = stream.getAudioTracks()[0];\n        if (rt) {\n          rt.onmute = () => setRemoteMuted(true);\n          rt.onunmute = () => setRemoteMuted(false);\n        }\n        if (!remoteSpeaking) {\n          const audioCtxR = new (window.AudioContext || window.webkitAudioContext)();\n          const analyserR = audioCtxR.createAnalyser();\n          const srcR = audioCtxR.createMediaStreamSource(stream);\n          srcR.connect(analyserR);\n          analyserR.fftSize = 256;\n          const dataR = new Uint8Array(analyserR.frequencyBinCount);\n          function detectRemote() {\n            analyserR.getByteFrequencyData(dataR);\n            setRemoteSpeaking(dataR.reduce((sum, v) => sum + v, 0) / dataR.length > 30);\n            requestAnimationFrame(detectRemote);\n          }\n          detectRemote();\n        }\n      };\n\n      // data channel\n      if (isInitiator) {\n        dataChannelRef.current = pcRef.current.createDataChannel(\"chat\");\n        setupDataChannel();\n      } else {\n        pcRef.current.ondatachannel = ({\n          channel\n        }) => {\n          dataChannelRef.current = channel;\n          setupDataChannel();\n        };\n      }\n      pcRef.current.onicecandidate = ({\n        candidate\n      }) => {\n        if (candidate) wsRef.current.send(JSON.stringify({\n          type: \"candidate\",\n          candidate\n        }));\n      };\n      if (isInitiator) {\n        const offer = await pcRef.current.createOffer();\n        await pcRef.current.setLocalDescription(offer);\n        wsRef.current.send(JSON.stringify({\n          type: \"offer\",\n          offer\n        }));\n      }\n      setStatus(\"connected\");\n    }\n    function setupDataChannel() {\n      dataChannelRef.current.onopen = () => console.log(\"DataChannel open\");\n      dataChannelRef.current.onmessage = ({\n        data\n      }) => setChatMessages(prev => [...prev, {\n        sender: \"peer\",\n        text: data\n      }]);\n    }\n    const timer = setTimeout(() => {\n      if (status !== \"connected\") setStatus(\"timeout\");\n    }, timeout);\n    return () => {\n      var _wsRef$current, _pcRef$current;\n      clearTimeout(timer);\n      (_wsRef$current = wsRef.current) === null || _wsRef$current === void 0 ? void 0 : _wsRef$current.close();\n      (_pcRef$current = pcRef.current) === null || _pcRef$current === void 0 ? void 0 : _pcRef$current.close();\n    };\n  }, [callId, start, status, isInitiator]);\n  function sendMessage(text) {\n    var _dataChannelRef$curre;\n    if (((_dataChannelRef$curre = dataChannelRef.current) === null || _dataChannelRef$curre === void 0 ? void 0 : _dataChannelRef$curre.readyState) === \"open\") {\n      dataChannelRef.current.send(text);\n      setChatMessages(prev => [...prev, {\n        sender: \"local\",\n        text\n      }]);\n    }\n  }\n  function toggleMute() {\n    var _localStreamRef$curre;\n    const track = (_localStreamRef$curre = localStreamRef.current) === null || _localStreamRef$curre === void 0 ? void 0 : _localStreamRef$curre.getAudioTracks()[0];\n    if (track) track.enabled = !track.enabled;\n  }\n  function hangUp() {\n    var _localStreamRef$curre2;\n    if (isInitiator) {\n      wsRef.current.send(JSON.stringify({\n        type: \"end-call\"\n      }));\n    }\n    setStatus(\"ended\");\n    (_localStreamRef$curre2 = localStreamRef.current) === null || _localStreamRef$curre2 === void 0 ? void 0 : _localStreamRef$curre2.getTracks().forEach(t => t.stop());\n    if (remoteAudioRef.current) remoteAudioRef.current.srcObject = null;\n    setTimeout(() => {\n      var _wsRef$current2, _pcRef$current2;\n      (_wsRef$current2 = wsRef.current) === null || _wsRef$current2 === void 0 ? void 0 : _wsRef$current2.close();\n      (_pcRef$current2 = pcRef.current) === null || _pcRef$current2 === void 0 ? void 0 : _pcRef$current2.close();\n    }, 100);\n  }\n  return {\n    remoteAudioRef,\n    status,\n    chatMessages,\n    sendMessage,\n    toggleMute,\n    hangUp,\n    localSpeaking,\n    remoteSpeaking,\n    remoteMuted // <-- exported!\n  };\n}\n_s(useWebRTC, \"4rgj1MF26aBb4YoG7Yy1K5d2F/U=\");","map":{"version":3,"names":["useEffect","useRef","useState","useWebRTC","callId","timeout","start","isInitiator","_s","wsRef","pcRef","dataChannelRef","remoteAudioRef","localStreamRef","status","setStatus","chatMessages","setChatMessages","localSpeaking","setLocalSpeaking","remoteSpeaking","setRemoteSpeaking","remoteMuted","setRemoteMuted","serverUrl","process","env","REACT_APP_SERVER_URL","current","WebSocket","replace","onopen","console","log","onclose","onmessage","data","msg","JSON","parse","toString","type","peers","initiateCall","setRemoteDescription","offer","answer","createAnswer","setLocalDescription","send","stringify","addIceCandidate","candidate","RTCPeerConnection","iceServers","urls","REACT_APP_STUN_SERVER","navigator","mediaDevices","getUserMedia","audio","audioCtxL","window","AudioContext","webkitAudioContext","analyserL","createAnalyser","srcL","createMediaStreamSource","connect","fftSize","dataL","Uint8Array","frequencyBinCount","detectLocal","getByteFrequencyData","reduce","sum","v","length","requestAnimationFrame","getTracks","forEach","t","addTrack","ontrack","streams","stream","srcObject","rt","getAudioTracks","onmute","onunmute","audioCtxR","analyserR","srcR","dataR","detectRemote","createDataChannel","setupDataChannel","ondatachannel","channel","onicecandidate","createOffer","prev","sender","text","timer","setTimeout","_wsRef$current","_pcRef$current","clearTimeout","close","sendMessage","_dataChannelRef$curre","readyState","toggleMute","_localStreamRef$curre","track","enabled","hangUp","_localStreamRef$curre2","stop","_wsRef$current2","_pcRef$current2"],"sources":["/Users/theodiamant/Desktop/webrtc/client/src/hooks/useWebRTC.js"],"sourcesContent":["// src/hooks/useWebRTC.js\nimport { useEffect, useRef, useState } from \"react\";\n\nexport default function useWebRTC(\n  callId,\n  { timeout = 30000, start = true, isInitiator = false }\n) {\n  const wsRef = useRef();\n  const pcRef = useRef();\n  const dataChannelRef = useRef();\n  const remoteAudioRef = useRef();\n  const localStreamRef = useRef();\n\n  const [status, setStatus] = useState(\"waiting\");\n  const [chatMessages, setChatMessages] = useState([]);\n  const [localSpeaking, setLocalSpeaking] = useState(false);\n  const [remoteSpeaking, setRemoteSpeaking] = useState(false);\n  const [remoteMuted, setRemoteMuted] = useState(false);\n\n  useEffect(() => {\n    if (!start) return;\n\n    const serverUrl = process.env.REACT_APP_SERVER_URL;\n    wsRef.current = new WebSocket(\n      `${serverUrl.replace(/^http/, \"ws\")}?roomId=${callId}`\n    );\n\n    wsRef.current.onopen = () => console.log(\"WS open\");\n    wsRef.current.onclose = () => console.log(\"WS closed\");\n\n    wsRef.current.onmessage = async ({ data }) => {\n      let msg;\n      try {\n        msg = JSON.parse(typeof data === \"string\" ? data : data.toString());\n      } catch {\n        return;\n      }\n      switch (msg.type) {\n        case \"room-status\":\n          if (msg.peers === 2 && status === \"waiting\")\n            await initiateCall(isInitiator);\n          break;\n        case \"offer\":\n          await pcRef.current.setRemoteDescription(msg.offer);\n          {\n            const answer = await pcRef.current.createAnswer();\n            await pcRef.current.setLocalDescription(answer);\n            wsRef.current.send(JSON.stringify({ type: \"answer\", answer }));\n          }\n          break;\n        case \"answer\":\n          await pcRef.current.setRemoteDescription(msg.answer);\n          break;\n        case \"candidate\":\n          await pcRef.current.addIceCandidate(msg.candidate);\n          break;\n        case \"peer-left\":\n          setStatus(\"peer-left\");\n          break;\n        case \"call-ended\":\n          setStatus(\"ended\");\n          break;\n      }\n    };\n\n    async function initiateCall(isInitiator) {\n      setStatus(\"connecting\");\n      pcRef.current = new RTCPeerConnection({\n        iceServers: [{ urls: process.env.REACT_APP_STUN_SERVER }],\n      });\n\n      // local audio + speech detection\n      localStreamRef.current = await navigator.mediaDevices.getUserMedia({\n        audio: true,\n      });\n      const audioCtxL =\n        new (window.AudioContext || window.webkitAudioContext)();\n      const analyserL = audioCtxL.createAnalyser();\n      const srcL = audioCtxL.createMediaStreamSource(localStreamRef.current);\n      srcL.connect(analyserL);\n      analyserL.fftSize = 256;\n      const dataL = new Uint8Array(analyserL.frequencyBinCount);\n      function detectLocal() {\n        analyserL.getByteFrequencyData(dataL);\n        setLocalSpeaking(\n          dataL.reduce((sum, v) => sum + v, 0) / dataL.length > 30\n        );\n        requestAnimationFrame(detectLocal);\n      }\n      detectLocal();\n\n      localStreamRef.current\n        .getTracks()\n        .forEach((t) => pcRef.current.addTrack(t, localStreamRef.current));\n\n      // remote audio + speech & mute detection\n      pcRef.current.ontrack = ({ streams: [stream] }) => {\n        if (remoteAudioRef.current) remoteAudioRef.current.srcObject = stream;\n\n        // detect mute / unmute on remote track\n        const rt = stream.getAudioTracks()[0];\n        if (rt) {\n          rt.onmute = () => setRemoteMuted(true);\n          rt.onunmute = () => setRemoteMuted(false);\n        }\n\n        if (!remoteSpeaking) {\n          const audioCtxR =\n            new (window.AudioContext || window.webkitAudioContext)();\n          const analyserR = audioCtxR.createAnalyser();\n          const srcR = audioCtxR.createMediaStreamSource(stream);\n          srcR.connect(analyserR);\n          analyserR.fftSize = 256;\n          const dataR = new Uint8Array(analyserR.frequencyBinCount);\n          function detectRemote() {\n            analyserR.getByteFrequencyData(dataR);\n            setRemoteSpeaking(\n              dataR.reduce((sum, v) => sum + v, 0) / dataR.length > 30\n            );\n            requestAnimationFrame(detectRemote);\n          }\n          detectRemote();\n        }\n      };\n\n      // data channel\n      if (isInitiator) {\n        dataChannelRef.current = pcRef.current.createDataChannel(\"chat\");\n        setupDataChannel();\n      } else {\n        pcRef.current.ondatachannel = ({ channel }) => {\n          dataChannelRef.current = channel;\n          setupDataChannel();\n        };\n      }\n\n      pcRef.current.onicecandidate = ({ candidate }) => {\n        if (candidate)\n          wsRef.current.send(JSON.stringify({ type: \"candidate\", candidate }));\n      };\n\n      if (isInitiator) {\n        const offer = await pcRef.current.createOffer();\n        await pcRef.current.setLocalDescription(offer);\n        wsRef.current.send(JSON.stringify({ type: \"offer\", offer }));\n      }\n\n      setStatus(\"connected\");\n    }\n\n    function setupDataChannel() {\n      dataChannelRef.current.onopen = () => console.log(\"DataChannel open\");\n      dataChannelRef.current.onmessage = ({ data }) =>\n        setChatMessages((prev) => [...prev, { sender: \"peer\", text: data }]);\n    }\n\n    const timer = setTimeout(() => {\n      if (status !== \"connected\") setStatus(\"timeout\");\n    }, timeout);\n\n    return () => {\n      clearTimeout(timer);\n      wsRef.current?.close();\n      pcRef.current?.close();\n    };\n  }, [callId, start, status, isInitiator]);\n\n  function sendMessage(text) {\n    if (dataChannelRef.current?.readyState === \"open\") {\n      dataChannelRef.current.send(text);\n      setChatMessages((prev) => [...prev, { sender: \"local\", text }]);\n    }\n  }\n\n  function toggleMute() {\n    const track = localStreamRef.current?.getAudioTracks()[0];\n    if (track) track.enabled = !track.enabled;\n  }\n\n  function hangUp() {\n    if (isInitiator) {\n      wsRef.current.send(JSON.stringify({ type: \"end-call\" }));\n    }\n    setStatus(\"ended\");\n    localStreamRef.current?.getTracks().forEach((t) => t.stop());\n    if (remoteAudioRef.current) remoteAudioRef.current.srcObject = null;\n    setTimeout(() => {\n      wsRef.current?.close();\n      pcRef.current?.close();\n    }, 100);\n  }\n\n  return {\n    remoteAudioRef,\n    status,\n    chatMessages,\n    sendMessage,\n    toggleMute,\n    hangUp,\n    localSpeaking,\n    remoteSpeaking,\n    remoteMuted,                   // <-- exported!\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
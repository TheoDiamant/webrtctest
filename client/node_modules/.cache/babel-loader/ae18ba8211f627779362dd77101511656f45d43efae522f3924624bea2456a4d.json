{"ast":null,"code":"var _s2 = $RefreshSig$();\nimport { useEffect, useRef, useState } from \"react\";\nexport default function useWebRTC(callId, {\n  timeout = 30000,\n  start = true\n}) {\n  _s2();\n  const wsRef = useRef();\n  const pcRef = useRef();\n  const dataChannelRef = useRef();\n  const remoteAudioRef = useRef();\n  const localStreamRef = useRef();\n  const [status, setStatus] = useState(\"waiting\");\n  const [chatMessages, setChatMessages] = useState([]);\n  useEffect(() => {\n    var _s = $RefreshSig$();\n    if (!start) return;\n    const serverUrl = process.env.REACT_APP_SERVER_URL;\n    wsRef.current = new WebSocket(`${serverUrl.replace(/^http/, \"ws\")}?roomId=${callId}`);\n    wsRef.current.onmessage = async ({\n      data\n    }) => {\n      const msg = JSON.parse(data);\n      switch (msg.type) {\n        case \"room-status\":\n          if (msg.peers === 2 && status === \"waiting\") {\n            await initiateCall(true);\n          }\n          break;\n        case \"offer\":\n          await pcRef.current.setRemoteDescription(msg.offer);\n          const answer = await pcRef.current.createAnswer();\n          await pcRef.current.setLocalDescription(answer);\n          wsRef.current.send(JSON.stringify({\n            type: \"answer\",\n            answer\n          }));\n          break;\n        case \"answer\":\n          await pcRef.current.setRemoteDescription(msg.answer);\n          break;\n        case \"candidate\":\n          await pcRef.current.addIceCandidate(msg.candidate);\n          break;\n        case \"peer-left\":\n          setStatus(\"peer-left\");\n          break;\n        default:\n          break;\n      }\n    };\n    wsRef.current.onopen = () => console.log(\"WS open\");\n    wsRef.current.onclose = () => console.log(\"WS closed\");\n    async function initiateCall(isInitiator) {\n      _s();\n      setStatus(\"connecting\");\n      pcRef.current = new RTCPeerConnection({\n        iceServers: [{\n          urls: process.env.REACT_APP_STUN_SERVER\n        }]\n      });\n      localStreamRef.current = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      const audioCtx = new AudioContext();\n      const analyserLocal = audioCtx.createAnalyser();\n      const sourceLocal = audioCtx.createMediaStreamSource(localStreamRef.current);\n      sourceLocal.connect(analyserLocal);\n      analyserLocal.fftSize = 256;\n      const dataArray = new Uint8Array(analyserLocal.frequencyBinCount);\n      const [localSpeaking, setLocalSpeaking] = useState(false);\n      function detectLocalSpeaking() {\n        analyserLocal.getByteFrequencyData(dataArray);\n        const avg = dataArray.reduce((sum, v) => sum + v, 0) / dataArray.length;\n        setLocalSpeaking(avg > 30); // seuil à ajuster\n        requestAnimationFrame(detectLocalSpeaking);\n      }\n      detectLocalSpeaking();\n      localStreamRef.current.getTracks().forEach(t => pcRef.current.addTrack(t, localStreamRef.current));\n      pcRef.current.ontrack = ({\n        streams: [stream]\n      }) => {\n        if (remoteAudioRef.current) remoteAudioRef.current.srcObject = stream;\n      };\n      if (isInitiator) {\n        dataChannelRef.current = pcRef.current.createDataChannel(\"chat\");\n        setupDataChannel();\n      } else {\n        pcRef.current.ondatachannel = ({\n          channel\n        }) => {\n          dataChannelRef.current = channel;\n          setupDataChannel();\n        };\n      }\n      pcRef.current.onicecandidate = ({\n        candidate\n      }) => {\n        if (candidate) wsRef.current.send(JSON.stringify({\n          type: \"candidate\",\n          candidate\n        }));\n      };\n      if (isInitiator) {\n        const offer = await pcRef.current.createOffer();\n        await pcRef.current.setLocalDescription(offer);\n        wsRef.current.send(JSON.stringify({\n          type: \"offer\",\n          offer\n        }));\n      }\n      setStatus(\"connected\");\n    }\n    _s(initiateCall, \"auWJ7plKj/Zyf8d3jnU7efxztXY=\");\n    function setupDataChannel() {\n      dataChannelRef.current.onopen = () => console.log(\"DataChannel open\");\n      dataChannelRef.current.onmessage = ({\n        data\n      }) => setChatMessages(prev => [...prev, {\n        sender: \"peer\",\n        text: data\n      }]);\n    }\n    const timer = setTimeout(() => {\n      if (status !== \"connected\") setStatus(\"timeout\");\n    }, timeout);\n    return () => {\n      var _wsRef$current, _pcRef$current;\n      clearTimeout(timer);\n      (_wsRef$current = wsRef.current) === null || _wsRef$current === void 0 ? void 0 : _wsRef$current.close();\n      (_pcRef$current = pcRef.current) === null || _pcRef$current === void 0 ? void 0 : _pcRef$current.close();\n    };\n  }, [callId, start]);\n  function sendMessage(text) {\n    var _dataChannelRef$curre;\n    if (((_dataChannelRef$curre = dataChannelRef.current) === null || _dataChannelRef$curre === void 0 ? void 0 : _dataChannelRef$curre.readyState) === \"open\") {\n      dataChannelRef.current.send(text);\n      setChatMessages(prev => [...prev, {\n        sender: \"local\",\n        text\n      }]);\n    }\n  }\n  function toggleMute() {\n    if (localStreamRef.current) {\n      const track = localStreamRef.current.getAudioTracks()[0];\n      track.enabled = !track.enabled;\n    }\n  }\n  function hangUp() {\n    wsRef.current.close();\n    pcRef.current.close();\n    setStatus(\"ended\");\n  }\n  return {\n    remoteAudioRef,\n    status,\n    chatMessages,\n    sendMessage,\n    toggleMute,\n    hangUp\n  };\n}\n_s2(useWebRTC, \"CkuQdux0e6EsOEXQglWeetwi8wk=\");","map":{"version":3,"names":["useEffect","useRef","useState","useWebRTC","callId","timeout","start","_s2","wsRef","pcRef","dataChannelRef","remoteAudioRef","localStreamRef","status","setStatus","chatMessages","setChatMessages","_s","$RefreshSig$","serverUrl","process","env","REACT_APP_SERVER_URL","current","WebSocket","replace","onmessage","data","msg","JSON","parse","type","peers","initiateCall","setRemoteDescription","offer","answer","createAnswer","setLocalDescription","send","stringify","addIceCandidate","candidate","onopen","console","log","onclose","isInitiator","RTCPeerConnection","iceServers","urls","REACT_APP_STUN_SERVER","navigator","mediaDevices","getUserMedia","audio","audioCtx","AudioContext","analyserLocal","createAnalyser","sourceLocal","createMediaStreamSource","connect","fftSize","dataArray","Uint8Array","frequencyBinCount","localSpeaking","setLocalSpeaking","detectLocalSpeaking","getByteFrequencyData","avg","reduce","sum","v","length","requestAnimationFrame","getTracks","forEach","t","addTrack","ontrack","streams","stream","srcObject","createDataChannel","setupDataChannel","ondatachannel","channel","onicecandidate","createOffer","prev","sender","text","timer","setTimeout","_wsRef$current","_pcRef$current","clearTimeout","close","sendMessage","_dataChannelRef$curre","readyState","toggleMute","track","getAudioTracks","enabled","hangUp"],"sources":["/Users/theodiamant/Desktop/webrtc/client/src/hooks/useWebRTC.js"],"sourcesContent":["import { useEffect, useRef, useState } from \"react\";\n\nexport default function useWebRTC(callId, { timeout = 30000, start = true }) {\n  const wsRef = useRef();\n  const pcRef = useRef();\n  const dataChannelRef = useRef();\n  const remoteAudioRef = useRef();\n  const localStreamRef = useRef();\n  const [status, setStatus] = useState(\"waiting\");\n  const [chatMessages, setChatMessages] = useState([]);\n\n  useEffect(() => {\n    if (!start) return;\n    const serverUrl = process.env.REACT_APP_SERVER_URL;\n    wsRef.current = new WebSocket(\n      `${serverUrl.replace(/^http/, \"ws\")}?roomId=${callId}`\n    );\n\n    wsRef.current.onmessage = async ({ data }) => {\n      const msg = JSON.parse(data);\n      switch (msg.type) {\n        case \"room-status\":\n          if (msg.peers === 2 && status === \"waiting\") {\n            await initiateCall(true);\n          }\n          break;\n        case \"offer\":\n          await pcRef.current.setRemoteDescription(msg.offer);\n          const answer = await pcRef.current.createAnswer();\n          await pcRef.current.setLocalDescription(answer);\n          wsRef.current.send(JSON.stringify({ type: \"answer\", answer }));\n          break;\n        case \"answer\":\n          await pcRef.current.setRemoteDescription(msg.answer);\n          break;\n        case \"candidate\":\n          await pcRef.current.addIceCandidate(msg.candidate);\n          break;\n        case \"peer-left\":\n          setStatus(\"peer-left\");\n          break;\n        default:\n          break;\n      }\n    };\n\n    wsRef.current.onopen = () => console.log(\"WS open\");\n    wsRef.current.onclose = () => console.log(\"WS closed\");\n\n    async function initiateCall(isInitiator) {\n      setStatus(\"connecting\");\n      pcRef.current = new RTCPeerConnection({\n        iceServers: [{ urls: process.env.REACT_APP_STUN_SERVER }],\n      });\n      localStreamRef.current = await navigator.mediaDevices.getUserMedia({\n        audio: true,\n      });\n      const audioCtx = new AudioContext();\n      const analyserLocal = audioCtx.createAnalyser();\n      const sourceLocal = audioCtx.createMediaStreamSource(\n        localStreamRef.current\n      );\n      sourceLocal.connect(analyserLocal);\n      analyserLocal.fftSize = 256;\n      const dataArray = new Uint8Array(analyserLocal.frequencyBinCount);\n\n      const [localSpeaking, setLocalSpeaking] = useState(false);\n\n      function detectLocalSpeaking() {\n        analyserLocal.getByteFrequencyData(dataArray);\n        const avg = dataArray.reduce((sum, v) => sum + v, 0) / dataArray.length;\n        setLocalSpeaking(avg > 30); // seuil à ajuster\n        requestAnimationFrame(detectLocalSpeaking);\n      }\n      detectLocalSpeaking();\n      localStreamRef.current\n        .getTracks()\n        .forEach((t) => pcRef.current.addTrack(t, localStreamRef.current));\n      pcRef.current.ontrack = ({ streams: [stream] }) => {\n        if (remoteAudioRef.current) remoteAudioRef.current.srcObject = stream;\n      };\n\n      if (isInitiator) {\n        dataChannelRef.current = pcRef.current.createDataChannel(\"chat\");\n        setupDataChannel();\n      } else {\n        pcRef.current.ondatachannel = ({ channel }) => {\n          dataChannelRef.current = channel;\n          setupDataChannel();\n        };\n      }\n\n      pcRef.current.onicecandidate = ({ candidate }) => {\n        if (candidate)\n          wsRef.current.send(JSON.stringify({ type: \"candidate\", candidate }));\n      };\n\n      if (isInitiator) {\n        const offer = await pcRef.current.createOffer();\n        await pcRef.current.setLocalDescription(offer);\n        wsRef.current.send(JSON.stringify({ type: \"offer\", offer }));\n      }\n\n      setStatus(\"connected\");\n    }\n\n    function setupDataChannel() {\n      dataChannelRef.current.onopen = () => console.log(\"DataChannel open\");\n      dataChannelRef.current.onmessage = ({ data }) =>\n        setChatMessages((prev) => [...prev, { sender: \"peer\", text: data }]);\n    }\n\n    const timer = setTimeout(() => {\n      if (status !== \"connected\") setStatus(\"timeout\");\n    }, timeout);\n\n    return () => {\n      clearTimeout(timer);\n      wsRef.current?.close();\n      pcRef.current?.close();\n    };\n  }, [callId, start]);\n\n  function sendMessage(text) {\n    if (dataChannelRef.current?.readyState === \"open\") {\n      dataChannelRef.current.send(text);\n      setChatMessages((prev) => [...prev, { sender: \"local\", text }]);\n    }\n  }\n\n  function toggleMute() {\n    if (localStreamRef.current) {\n      const track = localStreamRef.current.getAudioTracks()[0];\n      track.enabled = !track.enabled;\n    }\n  }\n\n  function hangUp() {\n    wsRef.current.close();\n    pcRef.current.close();\n    setStatus(\"ended\");\n  }\n\n  return {\n    remoteAudioRef,\n    status,\n    chatMessages,\n    sendMessage,\n    toggleMute,\n    hangUp,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}